#include "Transforms.h"

using namespace SageInterface;

void MainCCSDTransform(ofstream&, SgNode*, string,string);
void insertSignature(ostringstream*);
void insertTimer(ostringstream*);
void loopExpand(ostringstream*);


Transform::Transform(SgNode *theroot) {
	root = theroot;
}

//Get CCSD annotation options
CCSDTransform::CCSDTransform(KVAnnotationValue *val,SgNode *p)
: Transform(p) {
	  // make sure it is a key-value annotation!
	  val = isKVAnnotationValue(val);
	  ROSE_ASSERT(val != NULL);
	  cout << "Found annotated node:" << p->class_name() << endl;
	  Dynamic *chkVersion = val->lookup("version");
		if(chkVersion!=NULL) {
				version = chkVersion->string_value();
                cout << "Transformation type specified: " << version << endl;
				if(version.compare("timing")!=0 && version.compare("expanded")!=0 && version.compare("reduceSync")!=0){
					cerr << "CCSD transformation error : unrecognized version specified. " << endl;
					exit(1);
				}
		}
	  //cout << version << endl;
	  //val->print();

}


void CCSDTransform::generate(string inpFile) {
	// Generate name for the stratego rules
	// file that needs to be generated.
	// inpFile provides the input source file name
	// that is to be transformed.
	string strFile = inpFile + "_ccsd.str";
	string module = inpFile + "_ccsd";

	// File pointer for the stratego rules file.
	ofstream strFptr;

	strFptr.open(strFile.c_str());
	// Insert header include rules
	// just once when the stratego rules
	// file is created.

	// Main function that identifies the CCSD subroutine
	// and calls various other functions that generate the
	// appropriate stratego rules.
	MainCCSDTransform(strFptr,root,version,module);

	// Close stratego rules file.
	if(strFptr.is_open()) strFptr.close();
}

void MainCCSDTransform(ofstream &strFptr,SgNode *root,string version,string module){
	ostringstream *strategoStream = new ostringstream;
	if(version.compare("timing")==0) {
		cout << "Begin timing transformation" << endl;

		SgIfStmt *ifs = isSgIfStmt(root);

		SgStatement *conditional = ifs->get_conditional();

		SgExprStatement *condition = isSgExprStatement(conditional);

		SgBinaryOp *binaryOp = isSgBinaryOp(condition->get_expression());
		SgEqualityOp *equalityOp = isSgEqualityOp(condition->get_expression());

		string lhs = (binaryOp->get_lhs_operand_i())->unparseToString();
		string rhs = (binaryOp->get_rhs_operand_i())->unparseToString();

		*strategoStream << " module " << module << " \n";
		insertSignature(strategoStream);

		*strategoStream << "  \n";
		*strategoStream << "  timerVars : initialized_name(y,initialized_name_annotation(\"type_int\",\"POSTPROCESSMARKER2\",a,b,c),z) ->  \n";
		*strategoStream << " 		initialized_name(y,initialized_name_annotation(\"type_double\",\"POSTPROCESSMARKER2,all_t1,all_t2\",a,b,c),z) \n";
		*strategoStream << "  \n";
		*strategoStream << "  getHB : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GET_HASH_BLOCK\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GET_HASH_BX\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  getHB : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GET_HASH_BLOCK_MA\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GET_HASH_BX_MA\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  getHB : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GET_HASH_BLOCK_I\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GET_HASH_BX_I\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  addHB : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"ADD_HASH_BLOCK\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"ADD_HASH_BX\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  tceS : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"TCE_SORT_2\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"SO_2X\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  tceS : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"TCE_SORT_4\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"SO_4X\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  dgemm : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"DGEMM\",x1,x2,x22),x3),expr_list_exp([st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  ->expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"DM\",x1,x2,x22),x3),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info()),file_info(\"compilerGenerated\",0,0)),st*],x4,x9),x5,x6),x7,x8) \n";
		*strategoStream << "  \n";
		*strategoStream << "  addTimer : if_stmt(expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\""<< lhs <<"\",x2,x3,x4),x5),var_ref_exp(var_ref_exp_annotation(x11,\""<< rhs <<"\",x22,x33,x44),x6),x7,x8),x9,x10),basic_block([st*],ann1,fi1),bb1,ann2,fi2) ->  \n";
		*strategoStream << " 		if_stmt(expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\""<< lhs <<"\",x2,x3,x4),x5),var_ref_exp(var_ref_exp_annotation(x11,\""<< rhs <<" \",x22,x33,x44),x6),x7,x8),x9,x10),basic_block([expr_statement( \n";
		insertTimer(strategoStream);

		*strategoStream << " strategies \n";
		*strategoStream << "     main = io-wrap(rewr) \n";
		*strategoStream << "     rewr = alltd(innermost(timerVars <+ getHB <+ tceS <+ addHB <+ dgemm <+ addTimer)) \n";
		*strategoStream << "  \n";
		*strategoStream << "  \n";

		strFptr << strategoStream->str();
	}

	else if(version.compare("expanded")==0) {
		cout << "Begin loop expansion transformation" << endl;

		*strategoStream << " module " << module << " \n";
		insertSignature(strategoStream);

		*strategoStream << "  \n";
		*strategoStream << "        computed : initialized_name(a,initialized_name_annotation(j,\"next\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"next,computed\",k,l,m),y) \n";
		*strategoStream << "  \n";

		loopExpand(strategoStream);

		*strategoStream << " strategies \n";
		*strategoStream << "     main = io-wrap(rewr) \n";
		*strategoStream << "     rewr = alltd(innermost(computed <+ innerLoop <+ icsdt273 <+ initComputed)) \n";
		*strategoStream << "  \n";
		*strategoStream << "  \n";

		strFptr << strategoStream->str();

	}

	else if(version.compare("reduceSync")==0) {
		cout << "Begin synchronization minimizing transformation" << endl;

		SgExprStatement *expStmt = isSgExprStatement(root);
		SgAssignOp *assignStmt = isSgAssignOp(expStmt->get_expression());

		string lhs = (assignStmt->get_lhs_operand_i())->unparseToString();
		string rhs = (assignStmt->get_rhs_operand_i())->unparseToString();

		SgFunctionCallExp *functionCallExp = isSgFunctionCallExp(assignStmt->get_rhs_operand_i());
		SgFunctionSymbol *funcSym = functionCallExp->getAssociatedFunctionSymbol();
		SgName funcName = funcSym->get_name();
		string fname = (&funcName)->getString();

		// Get argument list for the call.
		SgExprListExp *fArgs = functionCallExp->get_args();
		// Get number of arguments.
		size_t nArgs = fArgs->get_numberOfTraversalSuccessors();
		string arg1="";
		if(nArgs>0) arg1=fArgs->get_traversalSuccessorByIndex(0)->unparseToString();
		else{
			cerr << "Annotated function call " << fname << " has no arguments!!" << endl;
			exit(1);
		}

		*strategoStream << " module " << module << " \n";
		insertSignature(strategoStream);
		*strategoStream << "  \n";
		*strategoStream << "        ren1 : initialized_name(a,initialized_name_annotation(j,\"dima\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"dima_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren2 : initialized_name(a,initialized_name_annotation(j,\"dim_common\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"dim_common_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren3 : initialized_name(a,initialized_name_annotation(j,\"dima_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"dima_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren4 : initialized_name(a,initialized_name_annotation(j,\"l_a_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"l_a_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren5 : initialized_name(a,initialized_name_annotation(j,\"l_b_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"l_b_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren6 : initialized_name(a,initialized_name_annotation(j,\"l_c_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"l_c_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren7 : initialized_name(a,initialized_name_annotation(j,\"k_a_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"k_a_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren8 : initialized_name(a,initialized_name_annotation(j,\"k_b_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"k_b_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren9 : initialized_name(a,initialized_name_annotation(j,\"k_c_sort\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"k_c_sort_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren10 : initialized_name(a,initialized_name_annotation(j,\"k_c\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"k_c_stratego\",k,l,m),y) \n";
		*strategoStream << "        ren11 : initialized_name(a,initialized_name_annotation(j,\"l_c\",k,l,m),y) -> initialized_name(a,initialized_name_annotation(j,\"l_c_stratego\",k,l,m),y) \n";
		*strategoStream << "  \n";

		*strategoStream << "        decls : initialized_name(a,initialized_name_annotation(j,\""<< fname <<"\",k,l,m),y) -> \n";
		*strategoStream << "		initialized_name(a,initialized_name_annotation(j,\"l_c,k_c,l_a_sort,k_a_sort,l_b_sort,k_b_sort,l_c_sort,k_c_sort,dima,dima_sort,dim_common\",k,l,m),y) \n";
		*strategoStream << "  \n";
		*strategoStream << "  \n";

		*strategoStream << "        funCall : expr_statement(assign_op(var_ref_exp(var_ref_exp_annotation(a1,\""<< lhs <<"\",a3,a4,a5),k), \n";
		*strategoStream << "                  function_call_exp(function_ref_exp(function_ref_exp_annotation(\""<< fname <<"\",function_type(\"type_int\",\"default\",e),_,ee),a),\n";
		*strategoStream << "                  expr_list_exp([var_ref_exp(var_ref_exp_annotation(\"type_int\",\""<< arg1 <<"\",\"default\",\"null\",bb),b),_],d1,e1),c,d),g,h),i,j)\n";
		*strategoStream << "                  -> expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",\n";
		*strategoStream << "                  function_type(\"type_void\",\"ellipses\",e),\"subroutine_subprogram_kind\",ee),a),expr_list_exp([var_ref_exp(var_ref_exp_annotation(\n";
		*strategoStream << "                  \"type_int\",\"ctx,icounter,next\",\"default\",\"null\",bb),b)],d1,e1),c,d),i,j) \n";

		*strategoStream << "  \n";
		*strategoStream << "        funCall1 : expr_statement(assign_op(var_ref_exp(var_ref_exp_annotation(a1,\""<< lhs <<"\",a3,a4,a5),k),function_call_exp\n";
		*strategoStream << "          		   (function_ref_exp(function_ref_exp_annotation(\""<< fname <<"\",e,f,ee),a),b,c,d),g,h),i,j) -> \"null\" \n";
		*strategoStream << "  \n";

		*strategoStream << "        gaSync : expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"GA_SYNC\",e,f,ee),a),b,c,d),g,h) -> \"null\" \n";
		*strategoStream << "  \n";
		*strategoStream << "  \n";

		*strategoStream << "  \n";
		*strategoStream << " strategies \n";
		*strategoStream << "     main = io-wrap(rewr) \n";
		*strategoStream << "     rewr = alltd(innermost(ren1 <+ ren2 <+ ren3 <+ ren4 <+ ren5 <+ ren6 <+ ren7 <+ ren8 <+ ren9 <+ \n";
		*strategoStream << " 		   ren10 <+ ren11 <+ decls <+ funCall <+ funCall1 <+ gaSync)) \n";
		*strategoStream << "  \n";
		*strategoStream << "  \n";

		strFptr << strategoStream->str();

	}

}

void insertTimer(ostringstream *strategoStream){
	*strategoStream << "                 assign_op( \n";
	*strategoStream << "                  var_ref_exp( \n";
	*strategoStream << "                   var_ref_exp_annotation( \n";
	*strategoStream << "                    \"type_double\",\"all_t1\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << "                    ) \n";
	*strategoStream << "                   ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",function_type( \n";
	*strategoStream << "                \"type_double\",\"default\",[]) \n";
	*strategoStream << "               ,\"function_subprogram_kind\",preprocessing_info([]) \n";
	*strategoStream << "               ) \n";
	*strategoStream << "              ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,expr_list_exp([] \n";
	*strategoStream << "              ,default_annotation(\"null\",preprocessing_info([]) \n";
	*strategoStream << "               ) \n";
	*strategoStream << "              ,file_info( \n";
	*strategoStream << "               \"NULL_FILE\",0,0) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             , \n";
	*strategoStream << "             function_call_exp_annotation( \n";
	*strategoStream << "              \"type_double\",preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "                  , \n";
	*strategoStream << "                  binary_op_annotation(\"type_double\",preprocessing_info([])) \n";
	*strategoStream << "                  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                  ) \n";
	*strategoStream << "                 ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "                 ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                 ),                   st*,                       expr_statement( \n";
	*strategoStream << "                 assign_op( \n";
	*strategoStream << "                  var_ref_exp( \n";
	*strategoStream << "                   var_ref_exp_annotation( \n";
	*strategoStream << "                    \"type_double\",\"all_t2\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << "                    ) \n";
	*strategoStream << "                   ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",function_type( \n";
	*strategoStream << "                \"type_double\",\"default\",[]) \n";
	*strategoStream << "               ,\"function_subprogram_kind\",preprocessing_info([]) \n";
	*strategoStream << "               ) \n";
	*strategoStream << "              ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,expr_list_exp([] \n";
	*strategoStream << "              ,default_annotation(\"null\",preprocessing_info([]) \n";
	*strategoStream << "               ) \n";
	*strategoStream << "              ,file_info( \n";
	*strategoStream << "               \"NULL_FILE\",0,0) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             , \n";
	*strategoStream << "             function_call_exp_annotation( \n";
	*strategoStream << "              \"type_double\",preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "                  , \n";
	*strategoStream << "                  binary_op_annotation(\"type_double\",preprocessing_info([])) \n";
	*strategoStream << "                  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                  ) \n";
	*strategoStream << "                 ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "                 ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                 ),   expr_statement( \n";
	*strategoStream << "                             function_call_exp( \n";
	*strategoStream << "                              function_ref_exp( \n";
	*strategoStream << "                                \n";
	*strategoStream << "                               function_ref_exp_annotation( \n";
	*strategoStream << "                                \"record_time\",function_type( \n";
	*strategoStream << "                                 \"type_void\",\"ellipses\",[]) \n";
	*strategoStream << "                                ,\"subroutine_subprogram_kind\",preprocessing_info([]) \n";
	*strategoStream << "                                ) \n";
	*strategoStream << "                               ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                               ) \n";
	*strategoStream << "                              ,expr_list_exp( \n";
	*strategoStream << "                               [ \n";
	*strategoStream << "                                var_ref_exp( \n";
	*strategoStream << "                                 var_ref_exp_annotation( \n";
	*strategoStream << "                                  \"type_int\",\"icounter\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << "                                  ) \n";
	*strategoStream << "                                 ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                                 ) \n";
	*strategoStream << "                                ,subtract_op(var_ref_exp( \n";
	*strategoStream << " 				  var_ref_exp_annotation( \n";
	*strategoStream << " 				   \"type_double\",\"all_t2\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << " 				   ) \n";
	*strategoStream << " 				  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 				  ) \n";
	*strategoStream << " 				,var_ref_exp( \n";
	*strategoStream << " 				  var_ref_exp_annotation( \n";
	*strategoStream << " 				   \"type_double\",\"all_t1\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << " 				   ) \n";
	*strategoStream << " 				  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 				  ),  \n";
	*strategoStream << " 				 binary_op_annotation(\"type_double\",preprocessing_info([])) \n";
	*strategoStream << " 				 ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 				 ) \n";
	*strategoStream << "                                ,int_val( \n";
	*strategoStream << " 				    value_annotation( \n";
	*strategoStream << " 				     7,preprocessing_info([])) \n";
	*strategoStream << " 				    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 				    ) \n";
	*strategoStream << "                                ] \n";
	*strategoStream << "                               , \n";
	*strategoStream << "                               default_annotation( \n";
	*strategoStream << "                                \"null\",preprocessing_info([])) \n";
	*strategoStream << "                               ,file_info( \n";
	*strategoStream << "                                \"NULL_FILE\",0,0) \n";
	*strategoStream << "                               ) \n";
	*strategoStream << "                              , \n";
	*strategoStream << "                              function_call_exp_annotation( \n";
	*strategoStream << "                               \"type_void\",preprocessing_info([]) \n";
	*strategoStream << "                               ) \n";
	*strategoStream << "                              ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                              ) \n";
	*strategoStream << "                             , \n";
	*strategoStream << "                             default_annotation( \n";
	*strategoStream << "                              \"null\",preprocessing_info([])) \n";
	*strategoStream << "                             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                             )                      ],ann1,fi1),bb1,ann2,fi2) \n";
	*strategoStream << "                  \n";
	*strategoStream << "  \n";
	*strategoStream << "  \n";
	*strategoStream << "  \n";
}

void insertSignature(ostringstream *strategoStream){

	*strategoStream << " imports \n";
	*strategoStream << "   libstratego-lib \n";
	*strategoStream << "   libstratego-gpp \n";
	*strategoStream << " signature \n";
	*strategoStream << "   sorts A B C D E F G H I J K L M N O P Q A1 A2 A3 A4 A5 T U V W C1 C2 C3 C4 F1 F2 F3 \n";
	*strategoStream << "   constructors \n";
	*strategoStream << "  \n";
	*strategoStream << "     initialized_name_annotation : A * B * C * D * E -> F \n";
	*strategoStream << "     initialized_name : G * F * H -> I \n";
	*strategoStream << "     function_ref_exp_annotation : A1 * A2 * A3 -> A4 \n";
	*strategoStream << "     function_ref_exp_annotation : A1 * A2 * A3 * A33 -> A4 \n";
	*strategoStream << "     function_ref_exp : A4 * A5 -> J \n";
	*strategoStream << "     expr_list_exp : ELE -> M \n";
	*strategoStream << "     expr_list_exp : J * K * L -> M \n";
	*strategoStream << "     expr_list_exp : J1 * J2 * K1 * L1 -> M \n";
	*strategoStream << "     expr_list_exp : J1 * K1 * L1 -> M \n";
	*strategoStream << "     attribute_specification_statement_annotation : N * M * O * P -> Q \n";
	*strategoStream << "     attribute_specification_statement : Q * R -> S \n";
	*strategoStream << "     file_info   : T * U * V -> W \n";
	*strategoStream << "     function_call_exp : J * C1 * C2 * C3 -> C4 \n";
	*strategoStream << "     function_call_exp : J * C1 * C2 -> C4 \n";
	*strategoStream << "     fortranStyleComment : F1 * F2 * W -> F3 \n";
	*strategoStream << "     assign_op : V2 * C4 * B1 * B2 -> B3 \n";
	*strategoStream << "     var_ref_exp_annotation : R1 * R2 * R3 * R4 * R5 -> R6 \n";
	*strategoStream << "     var_ref_exp : R6 * V1 -> V2  \n";
	*strategoStream << "     int_val : V5 * I1 -> I2 \n";
	*strategoStream << "     value_annotation : V3 * V4 -> V5 \n";
	*strategoStream << "     expr_statement : B3 * E1 * W -> E3 \n";
	*strategoStream << "     expr_statement : C4 * E1 * W -> E3 \n";
	*strategoStream << "     preprocessing_info : P1 \n";
	*strategoStream << "     preprocessing_info : PINF -> P1 \n";
	*strategoStream << "     function_type : TY1 * TY2 * TY3 -> TY \n";
	*strategoStream << "     function_parameter_list : PL1 * PL2 * PL3 -> PL \n";
	*strategoStream << "     //if_stmt : IF1 * IF2 -> IF  \n";
	*strategoStream << "     if_stmt : IF1 * IF2 * IF3 * IF4 -> IF  \n";
	*strategoStream << "     if_stmt : IF1 * IF2 * IF3 * IF4 * IF5 -> IF  \n";
	*strategoStream << "     if_stmt : IF1 * IF2 * IF3 * IF4 * IF5 * IF6 -> IF  \n";
	*strategoStream << "     expr_statement : EQ * ES * W -> E3 \n";
	*strategoStream << "     expr_statement : EQ * ES -> E3 \n";
	*strategoStream << "     equality_op : V2 * V2 * DA * W -> EQ \n";
	*strategoStream << "     default_annotation : ANN * P1 -> DANN \n";
	*strategoStream << "     function_call_exp_annotation : FCANN * P1 -> FUNCANN \n";
	*strategoStream << "     basic_block : BB1 * BB2 * BB3 -> BB \n";
	*strategoStream << "     basic_block : BB11 * BB12 * BB13 * BB14 -> BB \n";
	*strategoStream << "     binary_op_annotation : BOA * P1 -> BINOP \n";
	*strategoStream << "     variable_declaration : VD1 * VD2 * VD3 -> VD \n";
	*strategoStream << "     add_op : AD1 * AD2 * AD3 * AD4 -> ADD \n";
	*strategoStream << "     subtract_op : MN1 * MN2 * MN3 * MN4 -> MINUS \n";
	*strategoStream << "     not_op : NO1 * NO2 * NO3 -> NO \n";
	*strategoStream << "     fortran_do : DO1 * DO2 * DO3 * DO4 -> DOF \n";
	*strategoStream << "     fortran_do : DO1 * DO2 * DO3 * DO4 * DO5 * DO6 -> DOF \n";
	*strategoStream << "     fortran_do : DO1 * DO2 * DO3 * DO4 * DO5 * DO6 * DO7 -> DOF \n";
	*strategoStream << "     if_stmt_annotation : ISA1 * ISA2 * ISA3 * P1 -> ISA \n";
	*strategoStream << "  \n";
	*strategoStream << " rules \n";
}

void loopExpand(ostringstream *strategoStream){

	*strategoStream << "      \n";
	*strategoStream << " 	 \n";
	*strategoStream << " 	 initComputed : expr_statement(  \n";
	*strategoStream << " 	                 function_call_exp( \n";
	*strategoStream << " 	                  function_ref_exp( \n";
	*strategoStream << " 	                   function_ref_exp_annotation( \n";
	*strategoStream << " 	                    \"DM\",y3 \n";
	*strategoStream << " 	                    ,y4,y5 \n";
	*strategoStream << " 	                    ) \n";
	*strategoStream << " 	                   ,y6 \n";
	*strategoStream << " 	                   ) \n";
	*strategoStream << " 	                  ,y7 \n";
	*strategoStream << " 	                  ,y8 \n";
	*strategoStream << " 	                  ,y9 \n";
	*strategoStream << " 	                  ),y10,y11) \n";
	*strategoStream << " 	          -> \n";
	*strategoStream << " 		           basic_block([expr_statement( \n";
	*strategoStream << " 			          assign_op( \n";
	*strategoStream << " 			           var_ref_exp( \n";
	*strategoStream << " 			            var_ref_exp_annotation( \n";
	*strategoStream << " 			             \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << " 			             ) \n";
	*strategoStream << " 			            ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			            ) \n";
	*strategoStream << " 			           ,int_val( \n";
	*strategoStream << " 			            value_annotation( \n";
	*strategoStream << " 			             1,preprocessing_info([]) \n";
	*strategoStream << " 			             ) \n";
	*strategoStream << " 			            ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			            ) \n";
	*strategoStream << " 			           ,binary_op_annotation(\"type_int\",preprocessing_info([])) \n";
	*strategoStream << " 			           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			           ) \n";
	*strategoStream << " 			          ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << " 			          ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			          ) \n";
	*strategoStream << " 		          ,expr_statement(  \n";
	*strategoStream << " 		                 function_call_exp( \n";
	*strategoStream << " 		                  function_ref_exp( \n";
	*strategoStream << " 		                   function_ref_exp_annotation( \n";
	*strategoStream << " 		                    \"DM \",y3 \n";
	*strategoStream << " 		                    ,y4,y5 \n";
	*strategoStream << " 		                    ) \n";
	*strategoStream << " 		                   ,y6 \n";
	*strategoStream << " 		                   ) \n";
	*strategoStream << " 		                  ,y7 \n";
	*strategoStream << " 		                  ,y8 \n";
	*strategoStream << " 		                  ,y9 \n";
	*strategoStream << " 		                  ),y10,y11)],default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "           \n";
	*strategoStream << "           \n";
	*strategoStream << "        innerLoop :  \n";
	*strategoStream << "        	basic_block( \n";
	*strategoStream << " [ \n";
	*strategoStream << "  if_stmt( \n";
	*strategoStream << "   expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\"next\",x2,x3,x4),x5),var_ref_exp( \n";
	*strategoStream << "   	var_ref_exp_annotation(x6,\"count\",x7,x8,x9),x10),x11,x12),x13,x14) \n";
	*strategoStream << "   ,basic_block( \n";
	*strategoStream << "   [ \n";
	*strategoStream << "    expr_statement( \n";
	*strategoStream << "         assign_op( \n";
	*strategoStream << "          var_ref_exp( \n";
	*strategoStream << "           var_ref_exp_annotation( \n";
	*strategoStream << "            \"type_double\",\"all_t1\",x15,x16,x17 \n";
	*strategoStream << "            ),x18 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",x19 \n";
	*strategoStream << "               ,x20,x21 \n";
	*strategoStream << "               ),x22) \n";
	*strategoStream << "             ,x23,x24,x25),x26,x27),x28,x29 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "    ,if_stmt( \n";
	*strategoStream << "    w1 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w2 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w3 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "      w4 \n";
	*strategoStream << "     ,if_stmt(expr_statement( \n";
	*strategoStream << "         not_op( \n";
	*strategoStream << "          function_call_exp( \n";
	*strategoStream << "           function_ref_exp( \n";
	*strategoStream << "            function_ref_exp_annotation( \n";
	*strategoStream << "             \"MA_push_get\",x30 \n";
	*strategoStream << "             ,x31,x32 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,x33 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,x34 \n";
	*strategoStream << "           ,x35 \n";
	*strategoStream << "           ,x36 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,x37 \n";
	*strategoStream << "          ,x38 \n";
	*strategoStream << "          ) \n";
	*strategoStream << "         ,x39,x40 \n";
	*strategoStream << "          ),x41,x42,x43,x44) \n";
	*strategoStream << " ,expr_statement(function_call_exp( \n";
	*strategoStream << "  function_ref_exp(function_ref_exp_annotation \n";
	*strategoStream << "  (\"DFILL\",x45,x46,x47),x48),x49,x50,x51),x52,x53) \n";
	*strategoStream << " ,fortran_do( \n";
	*strategoStream << "     assign_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation(y1,y2,y3,y4,y5) \n";
	*strategoStream << "       ,y6) \n";
	*strategoStream << "      ,add_op( \n";
	*strategoStream << "       var_ref_exp( \n";
	*strategoStream << "        var_ref_exp_annotation( \n";
	*strategoStream << "         y7,\"noab\",y8,y9,y10) \n";
	*strategoStream << "        ,y11) \n";
	*strategoStream << "       ,int_val( \n";
	*strategoStream << "        value_annotation( \n";
	*strategoStream << "         1,y12) \n";
	*strategoStream << "        ,y13) \n";
	*strategoStream << "       ,y14,y15 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,y16,y17) \n";
	*strategoStream << "     ,add_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y21,\"noab\",y18,y19,y20) \n";
	*strategoStream << "       ,y22 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y23,\"nvab\",y24,y25,y26) \n";
	*strategoStream << "       ,y27) \n";
	*strategoStream << "      ,y28,y29) \n";
	*strategoStream << "     ,y30,basic_block([y31*],y32,y33),y34,y35) \n";
	*strategoStream << "      ,z1 \n";
	*strategoStream << "      ,z2 \n";
	*strategoStream << "      ,z3 \n";
	*strategoStream << "      ,z4 \n";
	*strategoStream << "      ,z5 \n";
	*strategoStream << "      ,z6 \n";
	*strategoStream << "      ,z7 \n";
	*strategoStream << "     ] \n";
	*strategoStream << "    ,z8 \n";
	*strategoStream << "    ,z9 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z10 \n";
	*strategoStream << "    ,z11 \n";
	*strategoStream << "    ,z12 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z13 \n";
	*strategoStream << "    ,z14 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z15 \n";
	*strategoStream << "    ,z16 \n";
	*strategoStream << "    ,z17 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z18 \n";
	*strategoStream << "    ,z19 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z20 \n";
	*strategoStream << "    ,z21 \n";
	*strategoStream << "    ,z22 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",z23,z29,z30),z31),z32,z33,z34),z35,z36) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z24 \n";
	*strategoStream << "    ,z25 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z26 \n";
	*strategoStream << "    ,z27 \n";
	*strategoStream << "    ,z28 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z37 \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z38 \n";
	*strategoStream << "    ,z39 \n";
	*strategoStream << "    )  \n";
	*strategoStream << "     \n";
	*strategoStream << "  \n";
	*strategoStream << "    ->  \n";
	*strategoStream << "     \n";
	*strategoStream << "        	basic_block( \n";
	*strategoStream << " [ \n";
	*strategoStream << "    if_stmt( \n";
	*strategoStream << "    w1 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w2 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w3 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "      w4 \n";
	*strategoStream << "      ,fortran_do( \n";
	*strategoStream << "     assign_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation(y1,y2,y3,y4,y5) \n";
	*strategoStream << "       ,y6) \n";
	*strategoStream << "      ,add_op( \n";
	*strategoStream << "       var_ref_exp( \n";
	*strategoStream << "        var_ref_exp_annotation( \n";
	*strategoStream << "         y7,\"noab\",y8,y9,y10) \n";
	*strategoStream << "        ,y11) \n";
	*strategoStream << "       ,int_val( \n";
	*strategoStream << "        value_annotation( \n";
	*strategoStream << "         1,y12) \n";
	*strategoStream << "        ,y13) \n";
	*strategoStream << "       ,y14,y15 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,y16,y17) \n";
	*strategoStream << "     ,add_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y21,\"noab\",y18,y19,y20) \n";
	*strategoStream << "       ,y22 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y23,\"nvab\",y24,y25,y26) \n";
	*strategoStream << "       ,y27) \n";
	*strategoStream << "      ,y28,y29) \n";
	*strategoStream << "     ,y30,basic_block([ \n";
	*strategoStream << "      	  if_stmt( \n";
	*strategoStream << "   expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\"next\",x2,x3,x4),x5),var_ref_exp( \n";
	*strategoStream << "   	var_ref_exp_annotation(x6,\"count\",x7,x8,x9),x10),x11,x12),x13,x14) \n";
	*strategoStream << "   ,basic_block( \n";
	*strategoStream << "   [ \n";
	*strategoStream << "         expr_statement( \n";
	*strategoStream << "         assign_op( \n";
	*strategoStream << "          var_ref_exp( \n";
	*strategoStream << "           var_ref_exp_annotation( \n";
	*strategoStream << "            \"type_double\",\"all_t1\",x15,x16,x17 \n";
	*strategoStream << "            ),x18 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",x19 \n";
	*strategoStream << "               ,x20,x21 \n";
	*strategoStream << "               ),x22) \n";
	*strategoStream << "             ,x23,x24,x25),x26,x27),x28,x29 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "             ,expr_statement( \n";
	*strategoStream << "           assign_op( \n";
	*strategoStream << "            var_ref_exp( \n";
	*strategoStream << "             var_ref_exp_annotation( \n";
	*strategoStream << "              \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,int_val( \n";
	*strategoStream << "             value_annotation( \n";
	*strategoStream << "              0,preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,binary_op_annotation(\"type_int\",preprocessing_info([])) \n";
	*strategoStream << "            ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "           )	 \n";
	*strategoStream << "     ,if_stmt(expr_statement( \n";
	*strategoStream << "         not_op( \n";
	*strategoStream << "          function_call_exp( \n";
	*strategoStream << "           function_ref_exp( \n";
	*strategoStream << "            function_ref_exp_annotation( \n";
	*strategoStream << "             \"MA_push_get\",x30 \n";
	*strategoStream << "             ,x31,x32 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,x33 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,x34 \n";
	*strategoStream << "           ,x35 \n";
	*strategoStream << "           ,x36 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,x37 \n";
	*strategoStream << "          ,x38 \n";
	*strategoStream << "          ) \n";
	*strategoStream << "         ,x39,x40 \n";
	*strategoStream << "          ),x41,x42,x43,x44) \n";
	*strategoStream << " ,expr_statement(function_call_exp( \n";
	*strategoStream << "  function_ref_exp(function_ref_exp_annotation \n";
	*strategoStream << "  (\"DFILL\",x45,x46,x47),x48),x49,x50,x51),x52,x53) \n";
	*strategoStream << " ,y31*, \n";
	*strategoStream << "  if_stmt( \n";
	*strategoStream << "                   expr_statement( \n";
	*strategoStream << "                  equality_op( \n";
	*strategoStream << " 		   var_ref_exp( \n";
	*strategoStream << " 		    var_ref_exp_annotation( \n";
	*strategoStream << "  \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << " 		     ) \n";
	*strategoStream << " 		    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 		    ) \n";
	*strategoStream << "                   ,int_val( \n";
	*strategoStream << " 			    value_annotation( \n";
	*strategoStream << " 			     1,preprocessing_info([])) \n";
	*strategoStream << " 			    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			   ) \n";
	*strategoStream << "                   ,binary_op_annotation( \n";
	*strategoStream << "                    \"type_bool\",preprocessing_info([]) \n";
	*strategoStream << "                    ) \n";
	*strategoStream << "                   ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,default_annotation( \n";
	*strategoStream << "                  \"null\",preprocessing_info([]) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                  ) \n";
	*strategoStream << "   ,basic_block([z1,z2,z3,z4] \n";
	*strategoStream << "           ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,basic_block([] \n";
	*strategoStream << "       ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "       ,file_info(\"NULL_FILE\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,if_stmt_annotation( \n";
	*strategoStream << "       \"has_end_statement\",\"use_then_keyword\",\"no_is_else_if_statement\" \n";
	*strategoStream << "       ,preprocessing_info([]) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                                               ) \n";
	*strategoStream << "      ,z5 \n";
	*strategoStream << "      ,z6 \n";
	*strategoStream << "      ,z7 \n";
	*strategoStream << "      ,expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",z23,z29,z30),z31),z32,z33,z34),z35,z36) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z24 \n";
	*strategoStream << "    ,z25 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z26 \n";
	*strategoStream << "    ,z27 \n";
	*strategoStream << "    ,z28 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z37 \n";
	*strategoStream << "    ],y32,y33),y34,y35) \n";
	*strategoStream << "  \n";
	*strategoStream << "  \n";
	*strategoStream << "     ] \n";
	*strategoStream << "    ,z8 \n";
	*strategoStream << "    ,z9 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z10 \n";
	*strategoStream << "    ,z11 \n";
	*strategoStream << "    ,z12 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z13 \n";
	*strategoStream << "    ,z14 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z15 \n";
	*strategoStream << "    ,z16 \n";
	*strategoStream << "    ,z17 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z18 \n";
	*strategoStream << "    ,z19 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z20 \n";
	*strategoStream << "    ,z21 \n";
	*strategoStream << "    ,z22 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z38 \n";
	*strategoStream << "    ,z39 \n";
	*strategoStream << "    )  \n";
	*strategoStream << "     \n";
	*strategoStream << "  \n";
	*strategoStream << " innerLoop :  \n";
	*strategoStream << "        	basic_block( \n";
	*strategoStream << " [ \n";
	*strategoStream << "  if_stmt( \n";
	*strategoStream << "   expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\"next\",x2,x3,x4),x5),var_ref_exp( \n";
	*strategoStream << "   	var_ref_exp_annotation(x6,\"count\",x7,x8,x9),x10),x11,x12),x13,x14) \n";
	*strategoStream << "   ,basic_block( \n";
	*strategoStream << "   [ \n";
	*strategoStream << "    expr_statement( \n";
	*strategoStream << "         assign_op( \n";
	*strategoStream << "          var_ref_exp( \n";
	*strategoStream << "           var_ref_exp_annotation( \n";
	*strategoStream << "            \"type_double\",\"all_t1\",x15,x16,x17 \n";
	*strategoStream << "            ),x18 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",x19 \n";
	*strategoStream << "               ,x20,x21 \n";
	*strategoStream << "               ),x22) \n";
	*strategoStream << "             ,x23,x24,x25),x26,x27),x28,x29 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "    ,if_stmt( \n";
	*strategoStream << "    w1 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w2 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w3 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "      w4 \n";
	*strategoStream << "     ,if_stmt(expr_statement( \n";
	*strategoStream << "         not_op( \n";
	*strategoStream << "          function_call_exp( \n";
	*strategoStream << "           function_ref_exp( \n";
	*strategoStream << "            function_ref_exp_annotation( \n";
	*strategoStream << "             \"MA_push_get\",x30 \n";
	*strategoStream << "             ,x31,x32 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,x33 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,x34 \n";
	*strategoStream << "           ,x35 \n";
	*strategoStream << "           ,x36 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,x37 \n";
	*strategoStream << "          ,x38 \n";
	*strategoStream << "          ) \n";
	*strategoStream << "         ,x39,x40 \n";
	*strategoStream << "          ),x41,x42,x43,x44) \n";
	*strategoStream << " ,expr_statement(function_call_exp( \n";
	*strategoStream << "  function_ref_exp(function_ref_exp_annotation \n";
	*strategoStream << "  (\"DFILL\",x45,x46,x47),x48),x49,x50,x51),x52,x53) \n";
	*strategoStream << " ,fortran_do( \n";
	*strategoStream << "     assign_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation(y1,y2,y3,y4,y5) \n";
	*strategoStream << "       ,y6) \n";
	*strategoStream << "      ,add_op( \n";
	*strategoStream << "       var_ref_exp( \n";
	*strategoStream << "        var_ref_exp_annotation( \n";
	*strategoStream << "         y7,\"noab\",y8,y9,y10) \n";
	*strategoStream << "        ,y11) \n";
	*strategoStream << "       ,int_val( \n";
	*strategoStream << "        value_annotation( \n";
	*strategoStream << "         1,y12) \n";
	*strategoStream << "        ,y13) \n";
	*strategoStream << "       ,y14,y15 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,y16,y17) \n";
	*strategoStream << "     ,add_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y21,\"noab\",y18,y19,y20) \n";
	*strategoStream << "       ,y22 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y23,\"nvab\",y24,y25,y26) \n";
	*strategoStream << "       ,y27) \n";
	*strategoStream << "      ,y28,y29) \n";
	*strategoStream << "     ,y30,basic_block([y31*],y32,y33),y34,y35) \n";
	*strategoStream << "      ,z1 \n";
	*strategoStream << "      ,z2 \n";
	*strategoStream << "      ,z3 \n";
	*strategoStream << "      ,z4 \n";
	*strategoStream << "      ,if1 \n";
	*strategoStream << "      ,if2 \n";
	*strategoStream << "      ,z5 \n";
	*strategoStream << "      ,z6 \n";
	*strategoStream << "      ,z7 \n";
	*strategoStream << "     ] \n";
	*strategoStream << "    ,z8 \n";
	*strategoStream << "    ,z9 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z10 \n";
	*strategoStream << "    ,z11 \n";
	*strategoStream << "    ,z12 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z13 \n";
	*strategoStream << "    ,z14 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z15 \n";
	*strategoStream << "    ,z16 \n";
	*strategoStream << "    ,z17 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z18 \n";
	*strategoStream << "    ,z19 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z20 \n";
	*strategoStream << "    ,z21 \n";
	*strategoStream << "    ,z22 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",z23,z29,z30),z31),z32,z33,z34),z35,z36) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z24 \n";
	*strategoStream << "    ,z25 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z26 \n";
	*strategoStream << "    ,z27 \n";
	*strategoStream << "    ,z28 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z37 \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z38 \n";
	*strategoStream << "    ,z39 \n";
	*strategoStream << "    )  \n";
	*strategoStream << "     \n";
	*strategoStream << "  \n";
	*strategoStream << "    ->  \n";
	*strategoStream << "     \n";
	*strategoStream << "        	basic_block( \n";
	*strategoStream << " [ \n";
	*strategoStream << "    if_stmt( \n";
	*strategoStream << "    w1 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w2 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w3 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "      w4 \n";
	*strategoStream << "      ,fortran_do( \n";
	*strategoStream << "     assign_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation(y1,y2,y3,y4,y5) \n";
	*strategoStream << "       ,y6) \n";
	*strategoStream << "      ,add_op( \n";
	*strategoStream << "       var_ref_exp( \n";
	*strategoStream << "        var_ref_exp_annotation( \n";
	*strategoStream << "         y7,\"noab\",y8,y9,y10) \n";
	*strategoStream << "        ,y11) \n";
	*strategoStream << "       ,int_val( \n";
	*strategoStream << "        value_annotation( \n";
	*strategoStream << "         1,y12) \n";
	*strategoStream << "        ,y13) \n";
	*strategoStream << "       ,y14,y15 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,y16,y17) \n";
	*strategoStream << "     ,add_op( \n";
	*strategoStream << "      var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y21,\"noab\",y18,y19,y20) \n";
	*strategoStream << "       ,y22 \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,var_ref_exp( \n";
	*strategoStream << "       var_ref_exp_annotation( \n";
	*strategoStream << "        y23,\"nvab\",y24,y25,y26) \n";
	*strategoStream << "       ,y27) \n";
	*strategoStream << "      ,y28,y29) \n";
	*strategoStream << "     ,y30,basic_block([ \n";
	*strategoStream << "      	  if_stmt( \n";
	*strategoStream << "   expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\"next\",x2,x3,x4),x5),var_ref_exp( \n";
	*strategoStream << "   	var_ref_exp_annotation(x6,\"count\",x7,x8,x9),x10),x11,x12),x13,x14) \n";
	*strategoStream << "   ,basic_block( \n";
	*strategoStream << "   [ \n";
	*strategoStream << "         expr_statement( \n";
	*strategoStream << "         assign_op( \n";
	*strategoStream << "          var_ref_exp( \n";
	*strategoStream << "           var_ref_exp_annotation( \n";
	*strategoStream << "            \"type_double\",\"all_t1\",x15,x16,x17 \n";
	*strategoStream << "            ),x18 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",x19 \n";
	*strategoStream << "               ,x20,x21 \n";
	*strategoStream << "               ),x22) \n";
	*strategoStream << "             ,x23,x24,x25),x26,x27),x28,x29 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "             ,expr_statement( \n";
	*strategoStream << "           assign_op( \n";
	*strategoStream << "            var_ref_exp( \n";
	*strategoStream << "             var_ref_exp_annotation( \n";
	*strategoStream << "              \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,int_val( \n";
	*strategoStream << "             value_annotation( \n";
	*strategoStream << "              0,preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,binary_op_annotation(\"type_int\",preprocessing_info([])) \n";
	*strategoStream << "            ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "           )	 \n";
	*strategoStream << "     ,if_stmt(expr_statement( \n";
	*strategoStream << "         not_op( \n";
	*strategoStream << "          function_call_exp( \n";
	*strategoStream << "           function_ref_exp( \n";
	*strategoStream << "            function_ref_exp_annotation( \n";
	*strategoStream << "             \"MA_push_get\",x30 \n";
	*strategoStream << "             ,x31,x32 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,x33 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,x34 \n";
	*strategoStream << "           ,x35 \n";
	*strategoStream << "           ,x36 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,x37 \n";
	*strategoStream << "          ,x38 \n";
	*strategoStream << "          ) \n";
	*strategoStream << "         ,x39,x40 \n";
	*strategoStream << "          ),x41,x42,x43,x44) \n";
	*strategoStream << " ,expr_statement(function_call_exp( \n";
	*strategoStream << "  function_ref_exp(function_ref_exp_annotation \n";
	*strategoStream << "  (\"DFILL\",x45,x46,x47),x48),x49,x50,x51),x52,x53) \n";
	*strategoStream << " ,y31*, \n";
	*strategoStream << "  if_stmt( \n";
	*strategoStream << "                   expr_statement( \n";
	*strategoStream << "                  equality_op( \n";
	*strategoStream << " 		   var_ref_exp( \n";
	*strategoStream << " 		    var_ref_exp_annotation( \n";
	*strategoStream << "  \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << " 		     ) \n";
	*strategoStream << " 		    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 		    ) \n";
	*strategoStream << "                   ,int_val( \n";
	*strategoStream << " 			    value_annotation( \n";
	*strategoStream << " 			     1,preprocessing_info([])) \n";
	*strategoStream << " 			    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			   ) \n";
	*strategoStream << "                   ,binary_op_annotation( \n";
	*strategoStream << "                    \"type_bool\",preprocessing_info([]) \n";
	*strategoStream << "                    ) \n";
	*strategoStream << "                   ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,default_annotation( \n";
	*strategoStream << "                  \"null\",preprocessing_info([]) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                  ) \n";
	*strategoStream << "   ,basic_block([z1,z2,z3,z4,if1,if2] \n";
	*strategoStream << "           ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,basic_block([] \n";
	*strategoStream << "       ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "       ,file_info(\"NULL_FILE\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,if_stmt_annotation( \n";
	*strategoStream << "       \"has_end_statement\",\"use_then_keyword\",\"no_is_else_if_statement\" \n";
	*strategoStream << "       ,preprocessing_info([]) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                                               ) \n";
	*strategoStream << "      ,z5 \n";
	*strategoStream << "      ,z6 \n";
	*strategoStream << "      ,z7 \n";
	*strategoStream << "      ,expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",z23,z29,z30),z31),z32,z33,z34),z35,z36) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z24 \n";
	*strategoStream << "    ,z25 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z26 \n";
	*strategoStream << "    ,z27 \n";
	*strategoStream << "    ,z28 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z37 \n";
	*strategoStream << "    ],y32,y33),y34,y35) \n";
	*strategoStream << "  \n";
	*strategoStream << "  \n";
	*strategoStream << "     ] \n";
	*strategoStream << "    ,z8 \n";
	*strategoStream << "    ,z9 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z10 \n";
	*strategoStream << "    ,z11 \n";
	*strategoStream << "    ,z12 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z13 \n";
	*strategoStream << "    ,z14 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z15 \n";
	*strategoStream << "    ,z16 \n";
	*strategoStream << "    ,z17 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z18 \n";
	*strategoStream << "    ,z19 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z20 \n";
	*strategoStream << "    ,z21 \n";
	*strategoStream << "    ,z22 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z38 \n";
	*strategoStream << "    ,z39 \n";
	*strategoStream << "    )  \n";
	*strategoStream << "     \n";
	*strategoStream << " icsdt273 :  \n";
	*strategoStream << "        	basic_block( \n";
	*strategoStream << " [ \n";
	*strategoStream << "  if_stmt( \n";
	*strategoStream << "   expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\"next\",x2,x3,x4),x5),var_ref_exp( \n";
	*strategoStream << "   	var_ref_exp_annotation(x6,\"count\",x7,x8,x9),x10),x11,x12),x13,x14) \n";
	*strategoStream << "   ,basic_block( \n";
	*strategoStream << "   [ \n";
	*strategoStream << "    expr_statement( \n";
	*strategoStream << "         assign_op( \n";
	*strategoStream << "          var_ref_exp( \n";
	*strategoStream << "           var_ref_exp_annotation( \n";
	*strategoStream << "            \"type_double\",\"all_t1\",x15,x16,x17 \n";
	*strategoStream << "            ),x18 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",x19 \n";
	*strategoStream << "               ,x20,x21 \n";
	*strategoStream << "               ),x22) \n";
	*strategoStream << "             ,x23,x24,x25),x26,x27),x28,x29 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "    ,if_stmt( \n";
	*strategoStream << "    w1 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w2 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w3 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "      w4 \n";
	*strategoStream << "     ,if_stmt(expr_statement( \n";
	*strategoStream << "         not_op( \n";
	*strategoStream << "          function_call_exp( \n";
	*strategoStream << "           function_ref_exp( \n";
	*strategoStream << "            function_ref_exp_annotation( \n";
	*strategoStream << "             \"MA_push_get\",x30 \n";
	*strategoStream << "             ,x31,x32 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,x33 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,x34 \n";
	*strategoStream << "           ,x35 \n";
	*strategoStream << "           ,x36 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,x37 \n";
	*strategoStream << "          ,x38 \n";
	*strategoStream << "          ) \n";
	*strategoStream << "         ,x39,x40 \n";
	*strategoStream << "          ),x41,x42,x43,x44) \n";
	*strategoStream << " ,expr_statement(function_call_exp( \n";
	*strategoStream << "  function_ref_exp(function_ref_exp_annotation \n";
	*strategoStream << "  (\"DFILL\",x45,x46,x47),x48),x49,x50,x51),x52,x53) \n";
	*strategoStream << " ,fortran_do( \n";
	*strategoStream << "           assign_op( \n";
	*strategoStream << " 	     var_ref_exp( \n";
	*strategoStream << " 	      var_ref_exp_annotation(y1,\"h8b\",y3,y4,y5),y6) \n";
	*strategoStream << "            ,int_val( \n";
	*strategoStream << "             value_annotation( \n";
	*strategoStream << "              1,y7),y8) \n";
	*strategoStream << "            ,y9,y10 \n";
	*strategoStream << "            ) \n";
	*strategoStream << " ,var_ref_exp( \n";
	*strategoStream << "            var_ref_exp_annotation( \n";
	*strategoStream << "            y11,\"noab\",y12,y13,y14) \n";
	*strategoStream << "            ,y15 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "     ,y30,basic_block([y31*],y32,y33),y34,y35) \n";
	*strategoStream << "      ,z1 \n";
	*strategoStream << "      ,z2 \n";
	*strategoStream << "      ,z3 \n";
	*strategoStream << "      ,z4 \n";
	*strategoStream << "      ,z5 \n";
	*strategoStream << "      ,z6 \n";
	*strategoStream << "      ,z7 \n";
	*strategoStream << "     ] \n";
	*strategoStream << "    ,z8 \n";
	*strategoStream << "    ,z9 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z10 \n";
	*strategoStream << "    ,z11 \n";
	*strategoStream << "    ,z12 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z13 \n";
	*strategoStream << "    ,z14 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z15 \n";
	*strategoStream << "    ,z16 \n";
	*strategoStream << "    ,z17 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z18 \n";
	*strategoStream << "    ,z19 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z20 \n";
	*strategoStream << "    ,z21 \n";
	*strategoStream << "    ,z22 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",z23,z29,z30),z31),z32,z33,z34),z35,z36) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z24 \n";
	*strategoStream << "    ,z25 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z26 \n";
	*strategoStream << "    ,z27 \n";
	*strategoStream << "    ,z28 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z37 \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z38 \n";
	*strategoStream << "    ,z39 \n";
	*strategoStream << "    )  \n";
	*strategoStream << "     \n";
	*strategoStream << "  \n";
	*strategoStream << "    ->  \n";
	*strategoStream << "     \n";
	*strategoStream << "        	basic_block( \n";
	*strategoStream << " [ \n";
	*strategoStream << "    if_stmt( \n";
	*strategoStream << "    w1 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w2 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "     if_stmt( \n";
	*strategoStream << "    w3 \n";
	*strategoStream << "    ,basic_block( \n";
	*strategoStream << "     [ \n";
	*strategoStream << "      w4 \n";
	*strategoStream << "      ,fortran_do( \n";
	*strategoStream << "           assign_op( \n";
	*strategoStream << " 	     var_ref_exp( \n";
	*strategoStream << " 	      var_ref_exp_annotation(y1,\"h8b\",y3,y4,y5),y6) \n";
	*strategoStream << "            ,int_val( \n";
	*strategoStream << "             value_annotation( \n";
	*strategoStream << "              1,y7),y8) \n";
	*strategoStream << "            ,y9,y10 \n";
	*strategoStream << "            ) \n";
	*strategoStream << " ,var_ref_exp( \n";
	*strategoStream << "            var_ref_exp_annotation( \n";
	*strategoStream << "            y11,\"noab\",y12,y13,y14) \n";
	*strategoStream << "            ,y15 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "     ,y30,basic_block([ \n";
	*strategoStream << "      	  if_stmt( \n";
	*strategoStream << "   expr_statement(equality_op(var_ref_exp(var_ref_exp_annotation(x1,\"next\",x2,x3,x4),x5),var_ref_exp( \n";
	*strategoStream << "   	var_ref_exp_annotation(x6,\"count\",x7,x8,x9),x10),x11,x12),x13,x14) \n";
	*strategoStream << "   ,basic_block( \n";
	*strategoStream << "   [ \n";
	*strategoStream << "         expr_statement( \n";
	*strategoStream << "         assign_op( \n";
	*strategoStream << "          var_ref_exp( \n";
	*strategoStream << "           var_ref_exp_annotation( \n";
	*strategoStream << "            \"type_double\",\"all_t1\",x15,x16,x17 \n";
	*strategoStream << "            ),x18 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,function_call_exp( \n";
	*strategoStream << "             function_ref_exp( \n";
	*strategoStream << "              function_ref_exp_annotation( \n";
	*strategoStream << "               \"util_wallsec\",x19 \n";
	*strategoStream << "               ,x20,x21 \n";
	*strategoStream << "               ),x22) \n";
	*strategoStream << "             ,x23,x24,x25),x26,x27),x28,x29 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "             ,expr_statement( \n";
	*strategoStream << "           assign_op( \n";
	*strategoStream << "            var_ref_exp( \n";
	*strategoStream << "             var_ref_exp_annotation( \n";
	*strategoStream << "              \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,int_val( \n";
	*strategoStream << "             value_annotation( \n";
	*strategoStream << "              0,preprocessing_info([]) \n";
	*strategoStream << "              ) \n";
	*strategoStream << "             ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,binary_op_annotation(\"type_int\",preprocessing_info([])) \n";
	*strategoStream << "            ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "           )	 \n";
	*strategoStream << "     ,if_stmt(expr_statement( \n";
	*strategoStream << "         not_op( \n";
	*strategoStream << "          function_call_exp( \n";
	*strategoStream << "           function_ref_exp( \n";
	*strategoStream << "            function_ref_exp_annotation( \n";
	*strategoStream << "             \"MA_push_get\",x30 \n";
	*strategoStream << "             ,x31,x32 \n";
	*strategoStream << "             ) \n";
	*strategoStream << "            ,x33 \n";
	*strategoStream << "            ) \n";
	*strategoStream << "           ,x34 \n";
	*strategoStream << "           ,x35 \n";
	*strategoStream << "           ,x36 \n";
	*strategoStream << "           ) \n";
	*strategoStream << "          ,x37 \n";
	*strategoStream << "          ,x38 \n";
	*strategoStream << "          ) \n";
	*strategoStream << "         ,x39,x40 \n";
	*strategoStream << "          ),x41,x42,x43,x44) \n";
	*strategoStream << " ,expr_statement(function_call_exp( \n";
	*strategoStream << "  function_ref_exp(function_ref_exp_annotation \n";
	*strategoStream << "  (\"DFILL\",x45,x46,x47),x48),x49,x50,x51),x52,x53) \n";
	*strategoStream << " ,y31*, \n";
	*strategoStream << "  if_stmt( \n";
	*strategoStream << "                   expr_statement( \n";
	*strategoStream << "                  equality_op( \n";
	*strategoStream << " 		   var_ref_exp( \n";
	*strategoStream << " 		    var_ref_exp_annotation( \n";
	*strategoStream << "  \"type_int\",\"computed\",\"default\",\"null\",preprocessing_info([]) \n";
	*strategoStream << " 		     ) \n";
	*strategoStream << " 		    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 		    ) \n";
	*strategoStream << "                   ,int_val( \n";
	*strategoStream << " 			    value_annotation( \n";
	*strategoStream << " 			     1,preprocessing_info([])) \n";
	*strategoStream << " 			    ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << " 			   ) \n";
	*strategoStream << "                   ,binary_op_annotation( \n";
	*strategoStream << "                    \"type_bool\",preprocessing_info([]) \n";
	*strategoStream << "                    ) \n";
	*strategoStream << "                   ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,default_annotation( \n";
	*strategoStream << "                  \"null\",preprocessing_info([]) \n";
	*strategoStream << "                   ) \n";
	*strategoStream << "                  ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                  ) \n";
	*strategoStream << "   ,basic_block([z1,z2,z3,z4] \n";
	*strategoStream << "           ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "           ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,basic_block([] \n";
	*strategoStream << "       ,default_annotation(\"null\",preprocessing_info([])) \n";
	*strategoStream << "       ,file_info(\"NULL_FILE\",0,0) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,if_stmt_annotation( \n";
	*strategoStream << "       \"has_end_statement\",\"use_then_keyword\",\"no_is_else_if_statement\" \n";
	*strategoStream << "       ,preprocessing_info([]) \n";
	*strategoStream << "       ) \n";
	*strategoStream << "      ,file_info(\"compilerGenerated\",0,0) \n";
	*strategoStream << "                                               ) \n";
	*strategoStream << "      ,z5 \n";
	*strategoStream << "      ,z6 \n";
	*strategoStream << "      ,z7 \n";
	*strategoStream << "      ,expr_statement(function_call_exp(function_ref_exp(function_ref_exp_annotation(\"nxt_ctx_next\",z23,z29,z30),z31),z32,z33,z34),z35,z36) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z24 \n";
	*strategoStream << "    ,z25 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z26 \n";
	*strategoStream << "    ,z27 \n";
	*strategoStream << "    ,z28 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z37 \n";
	*strategoStream << "    ],y32,y33),y34,y35) \n";
	*strategoStream << "  \n";
	*strategoStream << "  \n";
	*strategoStream << "     ] \n";
	*strategoStream << "    ,z8 \n";
	*strategoStream << "    ,z9 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z10 \n";
	*strategoStream << "    ,z11 \n";
	*strategoStream << "    ,z12 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z13 \n";
	*strategoStream << "    ,z14 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z15 \n";
	*strategoStream << "    ,z16 \n";
	*strategoStream << "    ,z17 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z18 \n";
	*strategoStream << "    ,z19 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ,z20 \n";
	*strategoStream << "    ,z21 \n";
	*strategoStream << "    ,z22 \n";
	*strategoStream << "    ) \n";
	*strategoStream << "    ] \n";
	*strategoStream << "    ,z38 \n";
	*strategoStream << "    ,z39 \n";
	*strategoStream << "    )  \n";
	*strategoStream << "       \n";
	*strategoStream << "  \n";
	*strategoStream << "      \n";
}
