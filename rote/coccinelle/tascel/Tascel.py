'''
Created on Oct 9, 2011
Last Modified: May 23, 2012

@author: Ajay Panyala
'''

#!/usr/bin/env python

import os
import sys

if len(sys.argv) <= 1: 
   print "\nUsage: ./Tascel.py path-to-input-file autoAnnot"
   sys.exit()

filePath = sys.argv[1]

autoAnnotOption = ""
version = 0

try:
    version = sys.argv[2]
except:
    pass

sindex = 0
try:
    sindex = filePath.rindex("/")+1
except ValueError:
    pass
    
print 'version = ' + str(version)
fileName = filePath[sindex:]
filePath = filePath[0:sindex]

TascelHome = os.path.dirname(os.path.realpath(__file__))

if filePath: os.chdir(filePath)

if os.path.exists(TascelHome+"/build"):
    if(not os.path.exists(TascelHome+"/build/TASCEL")):
        print "Tascel Binary not found. Please build the Tascel \nsources first by referring to the README file."
        quit()        
elif not os.path.exists(TascelHome+"/build"):
    print "Please build the Tascel sources first by referring to the README file."
    quit()
           
tascelBin = TascelHome+"/build/TASCEL"
RoseHome = os.environ.get("ROSE_HOME")
simpleTrans = RoseHome+"/bin/identityTranslator"

fName = fileName[0:fileName.rindex(".")]
extension = fileName[fileName.rindex(".")+1:]

cocciOptions = ""
if(extension != "c"): cocciOptions = "-c++"

os.system("%s -rose:skipfinalCompileStep %s" %(simpleTrans,fileName))

os.system("cp rose_%s rose_trans_%s" %(fileName,fileName))

print "Running TASCEL"
os.system("%s rose_trans_%s.%s" %(tascelBin,fName,extension))

tascelCocci = "rose_trans_%s_tascel.cocci" %(fName)



if(os.path.exists(tascelCocci)):
    print "Transforming rose_trans_%s.%s" %(fName,extension)

    os.system("spatch %s -sp_file  %s rose_trans_%s.%s\
              -o rose_trans_%s_tascel.%s > /dev/null" %(cocciOptions,tascelCocci,fName,extension,fName,extension))

    if str(version)=="1":
        csrc="rose_trans_%s_tascel.c" %(fName)
        cdest="rose_trans_%s_tascel.C" %(fName)
        os.system("cp %s %s" %(csrc,cdest))
        oldLine = "\/\/TASCELSEDREP " 
        replaceLine = ""
        
        os.system("sed -i 's/%s/%s/g' %s" %(oldLine.strip(),replaceLine.strip(),cdest)) 
        
        oldLine = "TASCELSEDREP +" 
        replaceLine = ""
        
        os.system("sed -i 's/%s/%s/g' %s" %(oldLine.strip(),replaceLine.strip(),cdest)) 


else:
    print "File "+tascelCocci+" not generated by TASCEL.\n \
           TASCEL Transformation cannot be applied to " + fileName
    
    
