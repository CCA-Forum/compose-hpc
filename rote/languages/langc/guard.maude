fmod GUARD is
  protecting STRING .
  protecting NAT .
  
  sort Term .
  sort TermList .
  
  op _ _ : Term Term -> TermList [ctor] .
  op _ _ : Term TermList -> TermList [ctor] .
  op _[_] : Term Term -> Term [ctor] .
  op _[_] : Term TermList -> Term [ctor] .
  op !_ : Term -> Term [ctor] .
  
  op Int : -> Term [ctor] .
  op Short : -> Term [ctor] .
  op Long : -> Term [ctor] .
  op Char : -> Term [ctor] .
  op Double : -> Term [ctor] .
  op Float : -> Term [ctor] .
  op Unsigned : -> Term [ctor] .
  op Unit : -> Term [ctor] .
  op Func : -> Term [ctor] .
  op Body : -> Term [ctor] .
  op FunSpecifiers : -> Term [ctor] .
  op Declaration : -> Term [ctor] .
  op DSpec : -> Term [ctor] .
  op Ident_ : String -> Term [ctor] .
  op CompoundStmt : -> Term [ctor] .
  op Declr : -> Term [ctor] .
  op Just : -> Term [ctor] .
  op Derived : -> Term [ctor] .
  op CPtr : -> Term [ctor] .
  op ExprStmt : -> Term [ctor] .
  op Assign : -> Term [ctor] .
  op Var : -> Term [ctor] .
  op Call : -> Term [ctor] .
  op Args : -> Term [ctor] .
  op Const_ : Nat -> Term [ctor] .
  op ReturnStmt : -> Term [ctor] .
  op IfStmt : -> Term [ctor] .
  op Null : -> Term [ctor] .
  op Eq : -> Term [ctor] .
  
  var X Y Z : Term .
  var TS : TermList .
  
  eq ExprStmt [Assign [Var [X] Call [Var [(Ident "malloc")] Z ]]] = 
     CompoundStmt [ 
      ! ExprStmt [Assign [Var [X] Call [Var [(Ident "malloc")] Z ]]]
      IfStmt [ 
        Eq [Var [X] Null] 
        Call [Var [(Ident "exit")] Args [(Const 1)]]]] .
endfm
