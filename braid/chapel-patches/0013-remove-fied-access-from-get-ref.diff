diff --git compiler/AST/expr.cpp compiler/AST/expr.cpp
index e7cac9f..f0e7d00 100644
--- compiler/AST/expr.cpp
+++ compiler/AST/expr.cpp
@@ -801,23 +801,23 @@ void CallExpr::codegen(FILE* outfile) {
     case PRIM_REF_BORROW:
       { 
         // Ensure we have a string constant as the second argument   
-        SymExpr* fieldNameSym = toSymExpr(get(2));
-        if (fieldNameSym == NULL) {
-          USR_FATAL(fieldNameSym, "Expected string expr as second argument to r
-        }
-        VarSymbol* fieldNameVarSym = toVarSymbol(fieldNameSym->var);
-        if (fieldNameVarSym == NULL || fieldNameVarSym->immediate == NULL ||
-            fieldNameVarSym->immediate->const_kind != CONST_KIND_STRING) {
-          USR_FATAL(fieldNameVarSym, "Expected string constant as second argume
-        }
+        // SymExpr* fieldNameSym = toSymExpr(get(2));
+        // if (fieldNameSym == NULL) {
+        //   USR_FATAL(fieldNameSym, "Expected string expr as second argument t
+        // }
+        // VarSymbol* fieldNameVarSym = toVarSymbol(fieldNameSym->var);
+        // if (fieldNameVarSym == NULL || fieldNameVarSym->immediate == NULL ||
+        //     fieldNameVarSym->immediate->const_kind != CONST_KIND_STRING) {
+        //   USR_FATAL(fieldNameVarSym, "Expected string constant as second arg
+        // }
         // Now a little hack to ensure we do not output quotes for the field
-        VarSymbol* fieldNameVarSymCopy = fieldNameVarSym->copy();
-        fieldNameVarSymCopy->cname = fieldNameVarSym->immediate->v_string;
-        fieldNameVarSymCopy->immediate == NULL;
-        gen(outfile, "_REF_BORROW(%A, %A, %A, %A, %A, %A)", get(1),
+        // VarSymbol* fieldNameVarSymCopy = fieldNameVarSym->copy();
+        // fieldNameVarSymCopy->cname = fieldNameVarSym->immediate->v_string;
+        // fieldNameVarSymCopy->immediate == NULL;
+        gen(outfile, "_REF_BORROW(%A, %A, %A, %A, %A)", get(1),
             getDataClassType(get(1)->typeInfo()->symbol),
-            fieldNameVarSymCopy, 
-            get(3), get(4), get(5));
+            //fieldNameVarSymCopy, 
+            get(2), get(3), get(4));
       }
       break;  
     case PRIM_GPU_ALLOC:
diff --git runtime/include/chplrt.h runtime/include/chplrt.h
index f86d8d6..e2bcb1e 100644
--- runtime/include/chplrt.h
+++ runtime/include/chplrt.h
@@ -32,14 +32,14 @@ extern int chpl_threads_initialized;
 #define _CHECK_NIL(x, lineno, filename)                                 \
   do {                                                                  \
     if (x == nil)                                                       \
-      chpl_error("attempt to dereference nil", lineno, filename);      \
+      chpl_error("attempt to dereference nil", lineno, filename);      \
   } while (0)
 
-#define _REF_BORROW(x, type, fieldname,data, lineno, filename)         \
+#define _REF_BORROW(x, type, data, lineno, filename)                   \
   do {                                                                 \
     if (data == nil)                                                   \
       chpl_error("data vector is nil", lineno, filename);              \
-  (x)->fieldname = (type*) data;                                       \
+    x = (type*) data;                                                  \
   } while (0)
 
 #define _ARRAY_GET(x, i) (&((x)[i]))
