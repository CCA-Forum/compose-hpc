From 935217d0e91642b9fd65d3c65ab68260f402875d Mon Sep 17 00:00:00 2001
From: Adrian Prantl <adrian@llnl.gov>
Date: Mon, 9 Jul 2012 10:08:36 -0700
Subject: [PATCH 02/11] add example for borrowed array

---
 examples/borrowed/borrowed_array.chpl |  351 +++++++++++++++++++++++++++++++++
 examples/borrowed/borrowed_data.h     |   23 +++
 2 files changed, 374 insertions(+), 0 deletions(-)
 create mode 100644 examples/borrowed/borrowed_array.chpl
 create mode 100644 examples/borrowed/borrowed_data.h

diff --git a/examples/borrowed/borrowed_array.chpl b/examples/borrowed/borrowed_array.chpl
new file mode 100644
index 0000000..7acd01e
--- /dev/null
+++ b/examples/borrowed/borrowed_array.chpl
@@ -0,0 +1,351 @@
+use DSIUtil;
+use DefaultRectangular;
+
+// dynamic data block class
+pragma "data class"
+class _borrowedData {
+  type eltType;
+  proc ~_borrowedData() {
+    // Nothing to free!
+  }
+  pragma "inline" proc init(opaqueData: opaque) {
+    // Just copy over the reference to the data
+    __primitive("ref_borrow", this, opaqueData);
+  }
+  pragma "inline" proc this(i: integral) var {
+    // rely on chapel compiler to generate lvalue
+    return __primitive("array_get", this, i);
+  }
+}
+
+_extern proc allocateData(typeSize: int(32), numElements: int(32)): opaque;
+
+_extern proc deallocateData(bData: opaque);
+
+///////////////////////////////////////////////////////////////////////////
+
+class BorrowedDist: BaseDist {
+  proc dsiNewRectangularDom(param rank: int, type idxType, param stridable: bool)
+    return new BorrowedRectangularDom(rank, idxType, stridable, this);
+}
+
+///////////////////////////////////////////////////////////////////////////
+
+class BorrowedRectangularDom: BaseRectangularDom {
+  param rank : int;
+  type idxType;
+  param stridable: bool;
+  
+  var dist: BorrowedDist;
+  // var ranges: rank*range(idxType,BoundedRangeType.bounded,stridable);
+  var rectDom: DefaultRectangularDom(rank, idxType, stridable);
+
+  proc linksDistribution() param return false;
+  proc dsiLinksDistribution()     return false;
+
+  proc BorrowedRectangularDom(param rank, type idxType, param stridable, dist) {
+    this.dist = dist;
+    this.rectDom = new DefaultRectangularDom(rank, idxType, stridable, defaultDist._value);
+  }
+
+  proc initIndices(theLimits ...?k) {
+    var myRanges : k * range(idxType, BoundedRangeType.bounded, stridable);
+    for param i in 1..k do {
+      myRanges(i) = 0..theLimits(i);
+    }
+    dsiSetIndices(myRanges);
+  }
+
+  proc dsiClear() { this.rectDom.dsiClear(); }
+  
+  // function and iterator versions, also for setIndices
+  proc dsiGetIndices() { return this.rectDom.dsiGetIndices(); }
+
+  proc dsiSetIndices(x) { this.rectDom.dsiSetIndices(x); }
+
+  iter these_help(param d: int) {
+    for i in this.rectDom.these_help(d) do
+      yield i;
+  }
+
+  iter these_help(param d: int, block) {
+    for i in this.rectDom.these_help(d, block) do
+      yield i;
+  }
+
+  iter these() {
+    for i in this.rectDom.these() do
+      yield i;
+  }
+
+  iter these(param tag: iterator) where tag == iterator.leader {
+    for i in this.rectDom.these(tag) do
+      yield i;
+  }
+
+  iter these(param tag: iterator, follower) where tag == iterator.follower {
+    for i in this.rectDom.these(tag, follower) do
+      yield i;
+  }
+
+  proc dsiMember(ind: rank*idxType) { return this.rectDom.dsiMember(ind); }
+
+  proc dsiIndexOrder(ind: rank*idxType) { return this.rectDom.dsiIndexOrder(ind); }
+
+  proc dsiDims() { return this.rectDom.dsiDims(); }
+
+  proc dsiDim(d : int) { return this.rectDom.dsiDim(d); }
+
+  // optional, is this necesary? probably not now that
+  // homogeneous tuples are implemented as C vectors.
+  proc dsiDim(param d : int) { return this.rectDom.dsiDim(d); }
+
+  proc dsiNumIndices { return this.rectDom.dsiNumIndices(); }
+
+  proc dsiLow { return this.rectDom.dsiLow; }
+
+  proc dsiHigh { return this.rectDom.dsiHigh; }
+
+  proc dsiAlignedLow { return this.rectDom.dsiAlignedLow; }
+
+  proc dsiAlignedHigh { return this.rectDom.dsiAlignedHigh; }
+
+  proc dsiStride { return this.rectDom.dsiStride; }
+
+  proc dsiAlignment { return this.rectDom.dsiAlignment; }
+
+  proc dsiFirst { return this.rectDom.dsiFirst; }
+
+  proc dsiLast { return this.rectDom.dsiLast; }
+
+  proc dsiBuildArray(type eltType) {
+    return new BorrowedRectangularArr(eltType=eltType, rank=rank, idxType=idxType,
+                                    stridable=stridable, dom=this);
+  }
+
+  proc dsiBuildRectangularDom(param rank: int, type idxType, param stridable: bool,
+        ranges: rank*range(idxType, BoundedRangeType.bounded, stridable)) {
+    return this.rectDom.dsiBuildRectangularDom(rank, idxType, stridable, ranges);
+  }
+}
+
+///////////////////////////////////////////////////////////////////////////
+
+class BorrowedRectangularArr: BaseArr {
+
+  type eltType;
+  param rank : int;
+  type idxType;
+  param stridable: bool;
+
+  var dom : BorrowedRectangularDom(rank=rank, idxType=idxType, stridable=stridable);
+  var off: rank*idxType;
+  var blk: rank*idxType;
+  var str: rank*chpl__signedType(idxType);
+  var origin: idxType;
+  var factoredOffs: idxType;
+  var bData : _borrowedData(eltType);
+  var noinit: bool = false;
+
+  proc canCopyFromDevice param return true;
+
+  // end class definition here, then defined secondary methods below
+
+  // can the compiler create this automatically?
+  proc dsiGetBaseDom() { return dom; }
+
+  proc dsiDestroyData() {
+    // Nothing to do
+  }
+
+  iter these() var {
+    if rank == 1 {
+      // This is specialized to avoid overheads of calling dsiAccess()
+      if !dom.stridable {
+        // This is specialized because the strided version disables the
+        // "single loop iterator" optimization
+        var first = getDataIndex(dom.dsiLow);
+        var second = getDataIndex(dom.dsiLow+dom.ranges(1).stride:idxType);
+        var step = (second-first):chpl__signedType(idxType);
+        var last = first + (dom.dsiNumIndices-1) * step:idxType;
+        for i in first..last by step do
+          yield bData(i);
+      } else {
+        const stride = dom.ranges(1).stride: idxType,
+              start  = dom.ranges(1).first,
+              first  = getDataIndex(start),
+              second = getDataIndex(start + stride),
+              step   = (second-first):chpl__signedType(idxType),
+              last   = first + (dom.ranges(1).length-1) * step:idxType;
+        if step > 0 then
+          for i in first..last by step do
+            yield bData(i);
+        else
+          for i in last..first by step do
+            yield bData(i);
+      }
+    } else {
+      for i in dom do
+        yield dsiAccess(i);
+    }
+  }
+
+  iter these(param tag: iterator) where tag == iterator.leader {
+    for follower in dom.these(tag) do
+      yield follower;
+  }
+
+  iter these(param tag: iterator, follower) var where tag == iterator.follower {
+    if debugDefaultDist then
+      writeln("*** In array follower code:"); // [\n", this, "]");
+    for i in dom.these(tag=iterator.follower, follower) {
+      __primitive("noalias pragma");
+      yield dsiAccess(i);
+    }
+  }
+
+  proc computeFactoredOffs() {
+    factoredOffs = 0:idxType;
+    for param i in 1..rank do {
+      factoredOffs = factoredOffs + blk(i) * off(i);
+    }
+  }
+  
+  // change name to setup and call after constructor call sites
+  // we want to get rid of all initialize functions everywhere
+  proc initialize() {
+    if noinit == true then return;
+    for param dim in 1..rank {
+      off(dim) = dom.dsiDim(dim).alignedLow;
+      str(dim) = dom.dsiDim(dim).stride;
+    }
+    blk(rank) = 1:idxType;
+    for param dim in 1..rank-1 by -1 do
+      blk(dim) = blk(dim+1) * dom.dsiDim(dim+1).length;
+    computeFactoredOffs();
+    var size = blk(1) * dom.dsiDim(1).length;
+    // Do not initialize data here, user will explicitly init the data
+  }
+
+  proc initializeData(opData: opaque) { 
+    this.bData = new _borrowedData(eltType);
+    this.bData.init(opData); 
+  }
+
+
+  pragma "inline"
+  proc getDataIndex(ind: idxType ...1) where rank == 1 {
+    return getDataIndex(ind);
+  }
+
+  pragma "inline"
+  proc getDataIndex(ind: rank* idxType) {
+    var sum = origin;
+    if stridable {
+      for param i in 1..rank do
+        sum += (ind(i) - off(i)) * blk(i) / abs(str(i)):idxType;
+    } else {
+      for param i in 1..rank do
+        sum += ind(i) * blk(i);
+      sum -= factoredOffs;
+    }
+    return sum;
+  }
+
+  proc this(ind: idxType ...1) var where rank == 1 {
+    return dsiAccess(ind);
+  }
+
+  // only need second version because wrapper record can pass a 1-tuple
+  pragma "inline"
+  proc dsiAccess(ind: idxType ...1) var where rank == 1 {
+    return dsiAccess(ind);
+  }
+
+  pragma "inline"
+  proc dsiAccess(ind : rank*idxType) var {
+    if boundsChecking then
+      if !dom.dsiMember(ind) then
+        halt("array index out of bounds: ", ind);
+    var dataInd = getDataIndex(ind);
+    //assert(dataInd >= 0);
+    //assert(numelm >= 0); // ensure it has been initialized
+    //assert(dataInd: uint(64) < numelm: uint(64));
+    return bData(dataInd);
+  }
+
+  proc dsiReindex(d: DefaultRectangularDom) {
+    halt("dsiReindex() not supported for BorrowedRectangularArray");
+  }
+
+  proc dsiSlice(d: DefaultRectangularDom) {
+    halt("dsiSlice() not supported for BorrowedRectangularArray");
+  }
+
+  proc dsiRankChange(d, param newRank: int, param newStridable: bool, args) {
+    halt("dsiRankChange() not supported for BorrowedRectangularArray");
+  }
+
+  proc dsiReallocate(d: domain) {
+    halt("dsiReallocate() not supported for BorrowedRectangularArray");
+  }
+
+  proc dsiLocalSlice(ranges) {
+    halt("all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl");
+  }
+}
+
+proc BorrowedRectangularDom.dsiSerialWrite(f: Writer) {
+  f.write("[", dsiDim(1));
+  for i in 2..rank do
+    f.write(", ", dsiDim(i));
+  f.write("]");
+}
+
+///////////////////////////////////////////////////////////////////////////
+
+writeln("borrowed_array.chpl: Starting...");
+
+type arrayIndexType = int(32);
+type arrayElmntType = real(64);
+
+var bDistr = new BorrowedDist();
+write("bDistr = "); writeln(bDistr);
+
+var bDom = bDistr.dsiNewRectangularDom(1, arrayIndexType, false);
+writeln("created borrowed domain.");
+
+var arraySize = 10;
+bDom.initIndices(arraySize);
+writeln("initialized domain indices: ");
+
+var bArr = bDom.dsiBuildArray(arrayElmntType); // Array does not have data yet
+writeln("created borrowed array.");
+
+var bData: opaque;
+local { bData = allocateData(numBits(bArr.eltType), arraySize); }
+
+bArr.initializeData(bData);
+writeln("initialized borrowed data in borrowed array.");
+
+writeln("Initially:");
+[i in 0.. #arraySize] { 
+  writeln("bArr(", i, ") = ", bArr.dsiAccess(i));
+}
+
+[i in 0.. #arraySize] { 
+  bArr(i) = (2 * i) + 1;
+}
+writeln("After modifying:");
+[i in 0.. #arraySize] { 
+  writeln("bArr(", i, ") = ", bArr.dsiAccess(i));
+}
+
+var bDataCopy = bData; // assignment of void* in chapel
+local { deallocateData(bDataCopy); }
+
+writeln("borrowed_array.chpl: Done.");
+
+
+
+
diff --git a/examples/borrowed/borrowed_data.h b/examples/borrowed/borrowed_data.h
new file mode 100644
index 0000000..6c7b967
--- /dev/null
+++ b/examples/borrowed/borrowed_data.h
@@ -0,0 +1,23 @@
+#ifndef __BORROWED_DATA_H__
+#define __BORROWED_DATA_H__
+
+#include<stdio.h>
+#include<stdlib.h> 
+
+typedef struct __BorrowedData {
+  int* _data;
+} _BorrowedData, *BorrowedData;
+
+void* allocateData(int typeSize, int numElements) {
+  printf("allocateData(%d, %d): ", typeSize, numElements);
+  void* bData = calloc(numElements, typeSize);
+  printf("at address %p \n", bData);
+  return bData;
+}
+
+void deallocateData(void* bData) {
+  printf("deallocateData(%p)\n", bData);
+  free(bData);
+}
+
+#endif
-- 
1.7.0.4

