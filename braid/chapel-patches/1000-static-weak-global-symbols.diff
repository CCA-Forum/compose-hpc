Index: ././chapel/modules/internal/ChapelThreads.chpl
===================================================================
--- a/./chapel/modules/internal/ChapelThreads.chpl	(revision 20036)
+++ b/./chapel/modules/internal/ChapelThreads.chpl	(working copy)
@@ -13,6 +13,7 @@
 // threads to use.
 //
 pragma "no use ChapelStandard"
+pragma "weak init"
 module ChapelThreads {
 
 use ChapelBase; // for uint().
Index: ././chapel/modules/internal/ChapelStandard.chpl
===================================================================
--- a/./chapel/modules/internal/ChapelStandard.chpl	(revision 20036)
+++ b/./chapel/modules/internal/ChapelStandard.chpl	(working copy)
@@ -1,6 +1,7 @@
 // ChapelStandard.chpl
 //
 pragma "no use ChapelStandard"
+pragma "weak init"
 module ChapelStandard {
   // Internal modules.
   use ChapelBase;
Index: ././chapel/modules/internal/ChapelTaskTable.chpl
===================================================================
--- a/./chapel/modules/internal/ChapelTaskTable.chpl	(revision 20036)
+++ b/./chapel/modules/internal/ChapelTaskTable.chpl	(working copy)
@@ -83,6 +83,7 @@
 //
 ////////////////////////////////////////////////////////////////////////}
 
+pragma "weak"
 export proc chpldev_taskTable_add(taskID   : chpl_taskID_t,
                                   lineno   : uint(32),
                                   filename : string,
@@ -99,6 +100,7 @@
                                                lineno, filename, tl_info);
 }
 
+pragma "weak"
 export proc chpldev_taskTable_remove(taskID : chpl_taskID_t)
 {
   if (chpldev_taskTable == nil ||
@@ -109,6 +111,7 @@
     chpldev_taskTable.dom.remove(taskID);
 }
 
+pragma "weak"
 export proc chpldev_taskTable_set_active(taskID : chpl_taskID_t)
 {
   if (chpldev_taskTable == nil ||
@@ -117,6 +120,7 @@
   chpldev_taskTable.map[taskID].state = taskState.active;
 }
 
+pragma "weak"
 export proc chpldev_taskTable_set_suspended(taskID : chpl_taskID_t)
 {
   if (chpldev_taskTable == nil ||
@@ -125,6 +129,7 @@
   chpldev_taskTable.map[taskID].state = taskState.suspended;
 }
 
+pragma "weak"
 export proc chpldev_taskTable_get_tl_info(taskID : chpl_taskID_t)
 {
   if (chpldev_taskTable == nil ||
@@ -133,6 +138,7 @@
   return chpldev_taskTable.map[taskID].tl_info;
 }
 
+pragma "weak"
 export proc chpldev_taskTable_print() 
 {
   if (chpldev_taskTable == nil) then return;
Index: ././chapel/compiler/include/flags_list.h
===================================================================
--- a/./chapel/compiler/include/flags_list.h	(revision 20036)
+++ b/./chapel/compiler/include/flags_list.h	(working copy)
@@ -114,6 +114,8 @@
 symbolFlag( FLAG_TYPE_VARIABLE , npr, "type variable" , "contains a type instead of a value" )
 symbolFlag( FLAG_USER_NAMED , npr, "user named" , "named by the user" /* so leave it alone */ )
 symbolFlag( FLAG_VIRTUAL , npr, "virtual" , ncm )
+symbolFlag( FLAG_WEAK_INIT , ypr, "weak init" , "generate the module init function as a weak symbol" )
+symbolFlag( FLAG_WEAK , ypr, "weak" , "generate this as a weak symbol" )
 symbolFlag( FLAG_WIDE , npr, "wide" , ncm )
 symbolFlag( FLAG_WIDE_CLASS , npr, "wide class" , ncm )
 symbolFlag( FLAG_WRAPPER , npr, "wrapper" , "wrapper function" )
Index: ././chapel/compiler/main/driver.cpp
===================================================================
--- a/./chapel/compiler/main/driver.cpp	(revision 20036)
+++ b/./chapel/compiler/main/driver.cpp	(working copy)
@@ -590,11 +590,11 @@
   initChplProgram();
   initPrimitive();
   initPrimitiveTypes();
+  process_args(&arg_state, argc, argv);
   initTheProgram();
   setupOrderedGlobals();
   compute_program_name_loc(argv[0], &(arg_state.program_name),
                            &(arg_state.program_loc));
-  process_args(&arg_state, argc, argv);
   initCompilerGlobals(); // must follow argument parsing
   setupDependentVars();
   setupModulePaths();
Index: ././chapel/compiler/AST/symbol.cpp
===================================================================
--- a/./chapel/compiler/AST/symbol.cpp	(revision 20036)
+++ b/./chapel/compiler/AST/symbol.cpp	(working copy)
@@ -564,10 +564,14 @@
 void FnSymbol::codegenHeader(FILE* outfile) {
   if (fGenIDS)
     fprintf(outfile, "/* %7d */ ", id);
+  if (!hasFlag(FLAG_EXPORT) && !hasFlag(FLAG_WEAK))
+      fprintf(outfile, "static ");
   // Prepend function header with necessary __global__ declaration
   if (hasFlag(FLAG_GPU_ON))
     fprintf(outfile, "__global__ ");
   retType->codegen(outfile);
+  if (hasFlag(FLAG_WEAK) && fLibraryCompile)
+      fprintf(outfile, " __attribute__((weak))");
   fprintf(outfile, " ");
   fprintf(outfile, "%s", cname);
   fprintf(outfile, "(");
Index: ././chapel/compiler/AST/type.cpp
===================================================================
--- a/./chapel/compiler/AST/type.cpp	(revision 20036)
+++ b/./chapel/compiler/AST/type.cpp	(working copy)
@@ -876,6 +876,14 @@
 }
 
 void initTheProgram(void) {
+  if (fLibraryCompile) {
+    const int max = 256;
+    static char cname[max];
+    snprintf(cname, max, "chpl__Library_%s", mainModuleName);
+    theProgram->name = cname;
+    theProgram->cname = cname;
+  }
+
   createInitFn(theProgram);
   theProgram->initFn->addFlag(FLAG_EXPORT);     // Called from main.c
 
Index: ././chapel/compiler/passes/codegen.cpp
===================================================================
--- a/./chapel/compiler/passes/codegen.cpp	(revision 20036)
+++ b/./chapel/compiler/passes/codegen.cpp	(working copy)
@@ -138,7 +138,7 @@
   forv_Vec(TypeSymbol, ts, typeSymbols) {
     if (ClassType* ct = toClassType(ts->type)) {
       if (!isReferenceType(ct) && isClass(ct)) {
-        fprintf(outfile, "const chpl__class_id chpl__cid_%s = %d;\n", 
+        fprintf(outfile, "static const chpl__class_id chpl__cid_%s = %d;\n", 
                 ts->cname, count++);
       }
     }
@@ -361,18 +361,22 @@
     uniquifyNameCounts.clear();
   }
 
+  const char* weak = "";
+  if (fLibraryCompile)
+    weak = "__attribute__((weak)) ";
+
   fprintf(hdrfile, "/*** Compilation Info ***/\n\n");
   if (fGPU)
     fprintf(hdrfile, "#ifndef ENABLE_GPU\n");
-  fprintf(hdrfile, "const char* chpl_compileCommand     = \"%s\";\n", compileCommand);
-  fprintf(hdrfile, "const char* chpl_compileVersion     = \"%s\";\n", compileVersion);
-  fprintf(hdrfile, "const char* CHPL_HOST_PLATFORM      = \"%s\";\n", CHPL_HOST_PLATFORM);
-  fprintf(hdrfile, "const char* CHPL_TARGET_PLATFORM    = \"%s\";\n", CHPL_TARGET_PLATFORM);
-  fprintf(hdrfile, "const char* CHPL_HOST_COMPILER      = \"%s\";\n", CHPL_HOST_COMPILER);
-  fprintf(hdrfile, "const char* CHPL_TARGET_COMPILER    = \"%s\";\n", CHPL_TARGET_COMPILER);
-  fprintf(hdrfile, "const char* CHPL_TASKS              = \"%s\";\n", CHPL_TASKS);
-  fprintf(hdrfile, "const char* CHPL_THREADS            = \"%s\";\n", CHPL_THREADS);
-  fprintf(hdrfile, "const char* CHPL_COMM               = \"%s\";\n", CHPL_COMM);
+  fprintf(hdrfile, "%sconst char* chpl_compileCommand     = \"%s\";\n", weak, compileCommand);
+  fprintf(hdrfile, "%sconst char* chpl_compileVersion     = \"%s\";\n", weak, compileVersion);
+  fprintf(hdrfile, "%sconst char* CHPL_HOST_PLATFORM      = \"%s\";\n", weak, CHPL_HOST_PLATFORM);
+  fprintf(hdrfile, "%sconst char* CHPL_TARGET_PLATFORM    = \"%s\";\n", weak, CHPL_TARGET_PLATFORM);
+  fprintf(hdrfile, "%sconst char* CHPL_HOST_COMPILER      = \"%s\";\n", weak, CHPL_HOST_COMPILER);
+  fprintf(hdrfile, "%sconst char* CHPL_TARGET_COMPILER    = \"%s\";\n", weak, CHPL_TARGET_COMPILER);
+  fprintf(hdrfile, "%sconst char* CHPL_TASKS              = \"%s\";\n", weak, CHPL_TASKS);
+  fprintf(hdrfile, "%sconst char* CHPL_THREADS            = \"%s\";\n", weak, CHPL_THREADS);
+  fprintf(hdrfile, "%sconst char* CHPL_COMM               = \"%s\";\n", weak, CHPL_COMM);
   if (fGPU) {
     fprintf(hdrfile, "#else\n");
     fprintf(hdrfile, "extern const char* chpl_compileCommand;\n");
@@ -505,7 +509,7 @@
     fprintf(hdrfile, "\n#ifndef ENABLE_GPU\n");
 
   fprintf(hdrfile, "\n/*** Function Pointer Table ***/\n\n");
-  fprintf(hdrfile, "chpl_fn_p chpl_ftable[] = {\n");
+  fprintf(hdrfile, "__attribute__((weak)) chpl_fn_p chpl_ftable[] = {\n");
   forv_Vec(FnSymbol, fn, functions) {
     if (fn->hasFlag(FLAG_BEGIN_BLOCK) ||
         fn->hasFlag(FLAG_COBEGIN_OR_COFORALL_BLOCK) ||
@@ -538,7 +542,7 @@
   for (int i = 0; i < virtualMethodTable.n; i++)
     if (virtualMethodTable.v[i].key && virtualMethodTable.v[i].value->n > maxVMT)
       maxVMT = virtualMethodTable.v[i].value->n;
-  const char* vmt = "chpl_vmtable";
+  const char* vmt = "__attribute__((weak)) chpl_vmtable";
   fprintf(hdrfile, "chpl_fn_p %s[][%d] = {\n", vmt, maxVMT);
   bool comma = false;
   forv_Vec(TypeSymbol, ts, types) {
@@ -577,16 +581,16 @@
     varSymbol->codegenDef(hdrfile);
   }
 
-  fprintf(hdrfile, "\nconst int chpl_numGlobalsOnHeap = %d;\n", numGlobalsOnHeap);
-  fprintf(hdrfile, "\nvoid** chpl_globals_registry;\n");
-  fprintf(hdrfile, "\nvoid* chpl_globals_registry_static[%d];\n", 
+  fprintf(hdrfile, "\n__attribute__((weak)) const int chpl_numGlobalsOnHeap = %d;\n", numGlobalsOnHeap);
+  fprintf(hdrfile, "\n__attribute__((weak)) void** chpl_globals_registry;\n");
+  fprintf(hdrfile, "\n__attribute__((weak)) void* chpl_globals_registry_static[%d];\n", 
           (numGlobalsOnHeap ? numGlobalsOnHeap : 1));
-  fprintf(hdrfile, "\nconst int chpl_heterogeneous = ");
+  fprintf(hdrfile, "\n__attribute__((weak)) const int chpl_heterogeneous = ");
   if (fHeterogeneous)
     fprintf(hdrfile, " 1;\n");
   else
     fprintf(hdrfile, " 0;\n");
-  fprintf(hdrfile, "\nconst char* chpl_mem_descs[] = {\n");
+  fprintf(hdrfile, "\n__attribute__((weak)) const char* chpl_mem_descs[] = {\n");
   first = true;
   forv_Vec(const char*, memDesc, memDescsVec) {
     if (!first)
@@ -595,12 +599,12 @@
     first = false;
   }
   fprintf(hdrfile, "\n};\n");
-  fprintf(hdrfile, "\nconst int chpl_mem_numDescs = %d;\n", memDescsVec.n);
+  fprintf(hdrfile, "\n__attribute__((weak)) const int chpl_mem_numDescs = %d;\n", memDescsVec.n);
 
   //
   // add table of private-broadcast constants
   //
-  fprintf(hdrfile, "\nvoid* const chpl_private_broadcast_table[] = {\n");
+  fprintf(hdrfile, "\n__attribute__((weak)) void* const chpl_private_broadcast_table[] = {\n");
   fprintf(hdrfile, "&chpl_verbose_comm");
   fprintf(hdrfile, ",\n&chpl_comm_diagnostics");
   fprintf(hdrfile, ",\n&chpl_verbose_mem");
@@ -647,7 +651,7 @@
 
   fprintf(outfile, "#include \"error.h\"\n\n");
 
-  fprintf(outfile, "void CreateConfigVarTable(void) {\n");
+  fprintf(outfile, "__attribute__((weak)) void CreateConfigVarTable(void) {\n");
   fprintf(outfile, "initConfigVarTable();\n");
 
   forv_Vec(VarSymbol, var, gVarSymbols) {
Index: ././chapel/compiler/passes/filesToAST.cpp
===================================================================
--- a/./chapel/compiler/passes/filesToAST.cpp	(revision 20036)
+++ b/./chapel/compiler/passes/filesToAST.cpp	(working copy)
@@ -181,6 +181,9 @@
   parseDependentModules(MOD_USER);
 
   forv_Vec(ModuleSymbol, mod, allModules) {
+    if (mod->hasFlag(FLAG_WEAK_INIT))
+      mod->initFn->addFlag(FLAG_WEAK);
+
     // Filter out modules that don't want to include ChapelStandard by default.
     if (mod->hasFlag(FLAG_NO_DEFAULT_USE))
       continue;
Index: ././chapel/compiler/passes/addInitGuards.cpp
===================================================================
--- a/./chapel/compiler/passes/addInitGuards.cpp	(revision 20036)
+++ b/./chapel/compiler/passes/addInitGuards.cpp	(working copy)
@@ -79,6 +79,7 @@
   // We need a function to drop the initializers into.
   FnSymbol* preInitFn = new FnSymbol(astr("chpl__init_preInit"));
   preInitFn->retType = dtVoid;
+  preInitFn->addFlag(FLAG_WEAK);
   preInitFn->addFlag(FLAG_EXPORT);
   preInitFn->addFlag(FLAG_INSERT_LINE_FILE_INFO);
   theProgram->block->insertAtTail(new DefExpr(preInitFn));
Index: ././chapel/compiler/passes/parallel.cpp
===================================================================
--- a/./chapel/compiler/passes/parallel.cpp	(revision 20036)
+++ b/./chapel/compiler/passes/parallel.cpp	(working copy)
@@ -1051,6 +1051,7 @@
 void
 insertWideReferences(void) {
   FnSymbol* heapAllocateGlobals = new FnSymbol("chpl__heapAllocateGlobals");
+  heapAllocateGlobals->addFlag(FLAG_WEAK);
   heapAllocateGlobals->retType = dtVoid;
   theProgram->block->insertAtTail(new DefExpr(heapAllocateGlobals));
   heapAllocateGlobals->insertAtHead(new CallExpr(PRIM_ALLOC_GVR));
Index: ././chapel/compiler/passes/buildDefaultFunctions.cpp
===================================================================
--- a/./chapel/compiler/passes/buildDefaultFunctions.cpp	(revision 20036)
+++ b/./chapel/compiler/passes/buildDefaultFunctions.cpp	(working copy)
@@ -303,9 +303,18 @@
   // code
   //
   chpl_gen_main = new FnSymbol("chpl_gen_main");
-  chpl_gen_main->cname = "chpl_gen_main";
+  if (fLibraryCompile) {
+    const int max = 256;
+    static char cname[max];
+    snprintf(cname, max, "chpl_gen_%s", mainModuleName);
+    chpl_gen_main->name = cname;
+    chpl_gen_main->cname = cname;
+  } else {
+    chpl_gen_main->cname = "chpl_gen_main";
+  }
   chpl_gen_main->retType = dtVoid;
   chpl_gen_main->addFlag(FLAG_EXPORT);  // chpl_gen_main is always exported.
+  chpl_gen_main->addFlag(FLAG_WEAK);
   chpl_gen_main->addFlag(FLAG_TEMP);
   mainModule->block->insertAtTail(new DefExpr(chpl_gen_main));
   normalize(chpl_gen_main);
