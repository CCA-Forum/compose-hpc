.\" Man page generated from reStructeredText.
.
.TH BRAID 1 "2012-03-27" "0.2.4" "Compilers and Programming Languages"
.SH NAME
BRAID \- Next-generation high-performance language interoperability
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" -*- rst -*-
.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B braid [\-h] [\-\-gen\-sexp] [\-\-gen\-sidl] [\-c <language>] [\-s <language>]
.
[\-m] [\-\-debug] [\-\-profile] [\-\-version] [\-\-license] [\-v]
[<file.sidl> [<file.sidl> ...]]
.UNINDENT
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
Braid 0.2.4 \- Do magically wonderful things with SIDL (scientific interface
definition language) files. BRAID is a high\-performance language
interoperability tool that generates Babel\-compatible bindings for the Chapel
.SS About
.sp
BRAID, the Braid system for Rewriting Abstract Descriptions, is a
compiler\-like tool to generate the glue code necessary for language
interoperability. Developed by the
[Components project](\fI\%https://computation.llnl.gov/casc/components/\fP) at
Lawrence Livermore National Laboratory, BRAID supports the Scientific
Interface Definition Language (SIDL) for the language\-independent
declaration of interfaces associated with scientific software
packages.
.SS Relation to Babel
.sp
The language bindings generated by BRAID are binary\-compatible to
those generated by the related
[Babel](\fI\%https://computation.llnl.gov/casc/components/\fP) tool. While
Babel handles traditional programming languages (such as C, C++,
Fortran (77\-2008), Python, and Java), BRAID adds support for modern
[PGAS](\fI\%http://en.wikipedia.org/wiki/Partitioned_global_address_space\fP)
languages.
.sp
In practice, this means that if you want to, for example, let a Chapel
program use a component implemented in Fortran 95, you would invoke
Babel for the Fortran code and Braid for Chapel code:
.sp
.nf
.ft C
braid \-\-makefile \-\-client=Chapel interface.sidl
babel \-\-makefile \-\-server=F95    interface.sidl
.ft P
.fi
.SS Supported Languages
.sp
At this moment Chapel client code is well\-tested and considered
stable. Chapel server support exists, but will be redesigned after the
next release of the Chapel compiler, which will have support for
building Chapel libraries:
.sp
.nf
.ft C
Language | Client   Server
\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Chapel   | stable   experimental
UPC      | planned  planned
X10      | planned  planned
.ft P
.fi
.SS Notes
.sp
In addition to all regular Babel/SIDL features, the Chapel backend
also extends the Chapel runtime to support \fIborrowed arrays\fP;
i.e. Arrays that are initialized by an external function and can be
passed to Chapel code without copying. It also provides an interface
for \fIdistributed arrays\fP which allow non\-Chapel code to access
non\-local data residing in the PGAS\-space.
.sp
The following features are not yet implemented:
.sp
Generic arrays, arrays of objects, structs, contracts, hooks and RMI.
.SS Installation
.sp
BRAID uses an autotools\-based build system, so the regular:
.sp
.nf
.ft C
\&./configure && make install
.ft P
.fi
.sp
will work just fine. Below is the step\-by\-step break\-down of the the
.sp
installation process:
.sp
.nf
.ft C
tar xvf braid\-0.2.3.tar.bz2 && cd braid\-0.2.3
mkdir build && cd build
\&../configure \-\-prefix=<INSTALL_PATH>
make [\-j<N>] && make install

# other useful commands
\&../configure \-\-help
make check
.ft P
.fi
.SS Compiling Chapel to run on SLURM\-managed Clusters with Infiniband
.sp
We found the following setup to be working with MPI (to spawn
processes) and direct Infiniband (for the actual communication).
.sp
For Compiling Chapel in CHPL_HOME:
.sp
.nf
.ft C
export CHPL_COMM=gasnet
export CHPL_COMM_SUBSTRATE=ibv
make \-C ${CHPL_HOME}
.ft P
.fi
.sp
To initialize the environment:
.sp
.nf
.ft C
export CHPL_COMM=gasnet
export CHPL_COMM_SUBSTRATE=ibv
cd ${CHPL_HOME}
source util/setchplenv.bash
cd \-
.ft P
.fi
.sp
To run a Chapel program using Infiniband communication and MPI to spawn
new processes via SLURM:
.sp
.nf
.ft C
export MPIRUN_CMD="srun \-ppdebug \-N %N %P %A" # you can customize this
\&./program
.ft P
.fi
.sp
Those are substitutions made by Chapel (or GASnet), here is a list
taken from one of the Chapel\-internal Makefiles:
.sp
.nf
.ft C
# The following substitutions are performed:
#   %P = program executable name
#   %N = requested node count
#   %A = program arguments
#   %Q = program arguments w/ an extra level of quotes
#   %D = the current working directory
#   %H = hostfile (if any)
CONDUIT_RUNCMD = mpirun \-np %N %P %A
.ft P
.fi
.sp
The way I understand it SLURM provides the mpirun launcher on the
machines it manages. Chapel/GASnet uses this mechanism to trick SLURM
into launching processes on multiple nodes. If you compiled Chapel
with the \(aqibv\(aq conduit, however, no actual communication will be done
over MPI, instead GASnet will directly use the Infiniband network to
exchange data between nodes.
.sp
Using Infiniband directly is supposed to perform better because MPI
apparently does not do one\-sided communication well.
.SS Patching the Chapel compiler
.sp
You will need to patch your Chapel 1.4.0 compiler using the following
command _after_ running ./configure:
.sp
.nf
.ft C
bash <builddir>/patch\-chapel\-compiler.sh
.ft P
.fi
.sp
The script will patch and recompile the compiler automatically. You
can undo this operation by running:
.sp
.nf
.ft C
bash <builddir>/patch\-chapel\-compiler.sh \-\-undo
.ft P
.fi
.sp
this will reverse the effects of the patch.
.SS User\-visible dependencies
.sp
If you just want to compile and install BRAID, you will need:
\- Python:                Version 2.6 or higher
\- gcc, ld, Perl, AWK, sed
.sp
If you want to run the regression tests, you will also need:
\- Babel:                 Version 2.0 or higher
\- Chapel:                Version 1.4.0
\- Java:                  JVM 1.6 or higher
\- NumPy:                 Version 1.0.4 or higher
.SS Developer\-only dependencies
.INDENT 0.0
.IP \(bu 2
.
Make:          GNU make version 3.74 or higher
.IP \(bu 2
.
Autotools:     Version 2.65 or later
.IP \(bu 2
.INDENT 2.0
.TP
.B SWI\-Prolog:    Version 5.10.4 or higher
.
(only needed if you intend to modify [ir,sidl].def)
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B Doxygen:       Version 1.6 or higher
.
(disable with ./configure \-\-disable\-documentation)
.UNINDENT
.IP \(bu 2
.
graphviz:      (for Doxygen)
.IP \(bu 2
.
GNU flex
.UNINDENT
.SS Development status
.sp
BRAID is written in 98% Python; the SIDL scanner is implemented in
flex (C). Some of the Python sources are automatically generated from
a high\-level specification (sidl.def, ir.def) by a Prolog script. The
implementation language choice is motivated by Python being the
highest\-level language that we can assume to be pre\-installed on all
our target systems. So far we have three components:
.INDENT 0.0
.IP \(bu 2
.
A complete parser for SIDL which generates an object\-oriented
intermediate representation (IR)
.IP \(bu 2
.
A converter to an extensible s\-expression\-based language
independent IR
.IP \(bu 2
.
Code generators that convert this IR into Chapel and C code.
Other languages supported by Babel will follow.
.sp
To facilitate the writing of these code generators we put some
effort into extending Python with a pattern\-matching mechanism
for arbitrarily complex tuples. (And the s\-expressions from the
IR are internally represented as Python tuples.)
.UNINDENT
.sp
This diagram shows the work\-flow implemented in BRAID:
.sp
.nf
.ft C
             Parser               Conversion
+\-\-\-\-\-\-\-\-\-\-\-\-\-+  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| SIDL        |\-\-| SIDL\-based       |\-\-| Language indep. IR  |
|             |  | declarative IR   |  | (s\-expressions)     |
+\-\-\-\-\-\-\-\-\-\-\-\-\-+  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
                                         |              |   |
                                         |   Code       |   |
                                         |   Generators |   |
                                         |              |   |
                                       +\-\-\-\-\-\-\-\-\-\-\-+ +\-\-\-\-\-\-\-\-\-\-+
                                       | Chapel    | | C, ...   |
                                       |           | |          |
                                       +\-\-\-\-\-\-\-\-\-\-\-+ +\-\-\-\-\-\-\-\-\-\-+
.ft P
.fi
.sp
The idea to use the s\-expression\-based IR to interface with ROTE
at some later point. Other components (e.g. PAUL) can also
generate this IR to get access to the code generators.
.SS Further Information
.sp
The following files are available at the top of the release directory
structure provide additional information on the Babel release:
.INDENT 0.0
.IP \(bu 2
.
BUGS:       Lists known bugs
.IP \(bu 2
.
COPYRIGHT:  Lawrence Livermore National Security, LLC notice
.IP \(bu 2
.
INSTALL:    Provides installation instructions
.IP \(bu 2
.
README:     This file
.sp
Additional background information can be found at our web site at
.sp
\fI\%http://www.llnl.gov/CASC/components/\fP
.sp
and
.sp
\fI\%http://compose\-hpc.sourceforge.net/\fP
.UNINDENT
.SH Authors
.SS Active Members
.sp
Adrian Prantl: Architect, main author
.SS Summer Interns
.sp
Shams Imam, Rice University
interoperability tool that generates Babel\-compatible bindings for the Chapel
programming language. For details on using the command\-line tool, please
consult the Babel manual at \fI\%https://computation.llnl.gov/casc/components/\fP .
.SH OPTIONS
.SS positional arguments
.INDENT 0.0
.INDENT 3.5
.sp
<file.sidl>           SIDL files to use as input
.UNINDENT
.UNINDENT
.SS optional arguments
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \-h,  \-\-help
.
show this help message and exit
.TP
.B \-\-gen\-sexp
.
generate an s\-expression
.TP
.B \-\-gen\-sidl
.
generate SIDL output again
.TP
.BI \-c \ <language>, \ \-\-client \ <language>
.
generate client code in the specified language
(Chapel, or any language supported through Babel)
.TP
.BI \-s \ <language>, \ \-\-server \ <language>
.
generate server code in the specified language
(Chapel, or any language supported through Babel)
.TP
.B \-m,  \-\-makefile
.
generate a default GNUmakefile
.TP
.B \-\-debug
.
enable debugging features
.TP
.B \-\-profile
.
enable profiling
.TP
.B \-\-version
.
print version and exit
.TP
.B \-\-license
.
print licensing details
.TP
.B \-v,  \-\-verbose
.
print more debug info
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Please report bugs to <\fI\%components@llnl.gov\fP>.
.SH COPYRIGHT NOTICE
.sp
Copyright (c) 2011, Lawrence Livermore National Security, LLC.
Produced at the Lawrence Livermore National Laboratory.
Written by the Components Team <\fI\%components@llnl.gov\fP>.
.sp
LLNL\-CODE\-473891.
All rights reserved.
.sp
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.INDENT 0.0
.IP \(bu 2
.
Redistributions of source code must retain the above copyright
notice, this list of conditions and the disclaimer below.
.IP \(bu 2
.
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the disclaimer (as noted below)
in the documentation and/or other materials provided with the
distribution.
.IP \(bu 2
.
Neither the name of the LLNS/LLNL nor the names of its contributors
may be used to endorse or promote products derived from this
software without specific prior written permission.
.UNINDENT
.sp
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE
LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.sp
Additional BSD Notice
.INDENT 0.0
.IP 1. 3
.
This notice is required to be provided under our contract with the
U.S.  Department of Energy (DOE). This work was produced at
Lawrence Livermore National Laboratory under Contract
No. DE\-AC52\-07NA27344 with the DOE.
.IP 2. 3
.
Neither the United States Government nor Lawrence Livermore
National Security, LLC nor any of their employees, makes any
warranty, express or implied, or assumes any liability or
responsibility for the accuracy, completeness, or usefulness of any
information, apparatus, product, or process disclosed, or
represents that its use would not infringe privately\-owned rights.
.IP 3. 3
.
Also, reference herein to any specific commercial products,
process, or services by trade name, trademark, manufacturer or
otherwise does not necessarily constitute or imply its endorsement,
recommendation, or favoring by the United States Government or
Lawrence Livermore National Security, LLC.  The views and opinions
of authors expressed herein do not necessarily state or reflect
those of the United States Government or Lawrence Livermore
National Security, LLC, and shall not be used for advertising or
product endorsement purposes.
.UNINDENT
.\" Generated by docutils manpage writer.
.\" 
.
