%%# -*- prolog -*-
%%# Pipe this into GRAMOLA
%%# Lines starting with a single '%' will be presereved.
%%# 
%%# 
%#!/usr/bin/env python
%# -*- python -*-
%## @package ir
%# Convenience definitions for intermediate representation (IR) nodes.
%#
%# Please report bugs to <adrian@llnl.gov>.
%#
%# \authors <pre>
%#
%# Copyright (c) 2011, Lawrence Livermore National Security, LLC.
%# Produced at the Lawrence Livermore National Laboratory
%# Written by Adrian Prantl <adrian@llnl.gov>.
%#  
%# LLNL-CODE-473891.
%# All rights reserved.
%#  
%# This file is part of BRAID. For details, see 
%# http://compose-hpc.sourceforge.net/. 
%# Please read the COPYRIGHT file for Our Notice and
%# for the BSD License.
%#
%# </pre>

%# Procedural IR Grammar definition
%# Built-in types are [str, int, float]
[ %# Do not forget to add parentheses around ( A|B )!
  Stmt = stmt(Do_while | While_ | break_ | return_(Expr) | If_ | goto(Expr) | Expr),
  Do_while = do_while(Body, BoolExpr),
  While_ = while_(BoolExpr, Body),
  If_ = if_(BoolExpr, Body),
  Body = [Stmt],
  Expr = ( plus(Expr, Expr) 
         | call(Expr, [Expr])
         | var_decl(Name)
         | var_defn(Name)
	 | get_struct_item(Struct, Name, Struct_item)
	 | set_struct_item(Struct, Name, Struct_item, Expr)
         | assignment(VarRefExpr)
         | plus(Expr, Expr)
         | minus(Expr, Expr)
         | times(Expr, Expr)
	 | BoolExpr
	 | str
	 | literal(string)
	 | int
	 | float
	 ),
  Struct = struct(Name, [Struct_item]),
  Struct_item = struct_item(Type_, Name),
  Enum = struct(Name, [Enum_item]),
  Enum_item = enum_item(Name),
			    
  BoolExpr = (true | false
	     | eq(Expr, Expr) | neq(Expr, Expr)
	     | not_(Expr)
             ),
  VarRefExpr = (Name | pointer(VarRefExpr) | deref(VarRefExpr)),
  Fn_decl = fn_decl(Type_, Method_name, [Arg]),
  Fn_defn = fn_defn(Type_, Method_name, [Arg], [Stmt]),
  Arg = arg([Attr], Mode, Type_, Name),
  Attr = [],
  Mode = (in_ | out | inout),
  Type_ = (primitive_type(void | int) | User_type),
  User_type = [],
  Method_name = method_name(string, string),
  Name = identifier(string)
].