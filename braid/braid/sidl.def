%% -*- prolog -*-
%%# Pipe this into GRAMOLA
%%# Lines starting with a single '%' will be presereved.
%%# To avoid duplicate doxygen comments, '% %%' will be replaced by '##'
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%#!/usr/bin/env python
%# -*- python -*-
%#% @package sidl
%# Grammar for the SIDL intermediate representation (IR).
%# This is NOT a grammar for SIDL, the language.
%#
%# Please report bugs to <components@llnl.gov>.
%#
%# \authors <pre>
%#
%# Copyright (c) 2011, Lawrence Livermore National Security, LLC.
%# Produced at the Lawrence Livermore National Laboratory
%# Written by Adrian Prantl <adrian@llnl.gov>.
%#
%# LLNL-CODE-473891.
%# All rights reserved.
%#
%# This file is part of BRAID. For details, see
%# http://compose-hpc.sourceforge.net/.
%# Please read the COPYRIGHT file for Our Notice and
%# for the BSD License.
%#
%# </pre>
%#
%#
%# <h2>Grammar definition</h2>
%#
%%# Built-in types are ['STR' | 'FLOAT' | 'INT']
%%# Do not forget to add parentheses around ( A|B )!
%%# In alternatives, atoms must come first: atom|complex(something).
%%# Prefix an underscore to suppress singleton warnings.
[
  _File = file([Requires], [Import], [User_type]),
  Version = version('STR' | 'FLOAT' | 'INT'),
  Requires = requires(Scoped_id, Version),
  Import = import(Scoped_id, Version),
  Package = package(Id, Version, [User_type], Doc_comment),
  User_type = user_type([(Type_attr|Custom_attr)], Cipse),
  Cipse = ( Class
          | Interface
          | Package
          | Struct
          | Enum ),
  Type_attr = (final | abstract),
  Id = 'STR',
  Doc_comment = 'STR',
  Enum = enum(Id, [Enumerator], Doc_comment),
  Enumerator = ( enumerator(Id) | enumerator_value(Id, 'INT')),
  Struct = struct(Id, [Struct_item], Doc_comment),
  Struct_item = struct_item( (Type_void | Rarray), Id),
  Class = class(Id, [Extends], [Implements], [Invariant], [Method], Doc_comment),
  Interface = interface(Id, [Extends], [Invariant], [Method], Doc_comment),
  Implements = ( implements(Scoped_id)
               | implements_all(Scoped_id)),
  Method = method(Type_void, Method_name, [Method_attr], [Arg],
                  [Except], [From], [Require], [Ensure], Doc_comment),
  Method_name = method_name(Id, Extension),
  Extension = 'STR',
  Type_void = ( void | Type ),
  Method_attr = ( oneway
                | local
                | static
                | abstract
                | final
                | nonblocking
                | copy ),
  From = from(Scoped_id),
  Invariant = invariant(Assertion),
  Assertion = assertion(Id, AssertExpr),
  Except = except(Scoped_id),
  Extends = extends(Scoped_id),
  Ensure = ensure(Assertion),
  Require = require(Assertion),
  Arg = arg([Arg_attr], Mode, (Type_void | Rarray), Id),
  Arg_attr = (copy | ['STR']),
  Custom_attr = ( custom_attribute('STR')
                | custom_attribute_assoc('STR', 'STR')
                ),
  Mode = (in | out | inout),
  Type = (Primitive_type | Array | Scoped_id),
  Primitive_type = primitive_type(
      bool|char|int|long|float|double|fcomplex|dcomplex|string|opaque),
  Array = array(Scalar_type, Dimension, Orientation),
  Scalar_type = (Primitive_type|Scoped_id),
  Dimension = 'INT',
  Orientation = (row_major|column_major),
  Rarray = rarray(Primitive_type, Dimension, [Extents]),
  Extents = SimpleIntExpr,
  SimpleIntExpr = ( simple_int_infix_expr(Bin_op, SimpleIntExpr, SimpleIntExpr)
               | simple_int_prefix_expr(Un_op, SimpleIntExpr)
               | simple_int_fn_eval(Id, [SimpleIntExpr])
               | var_ref(Id)
               | 'INT'
               ),
  AssertExpr = ( infix_expr(Bin_op, AssertExpr, AssertExpr)
               | prefix_expr(Un_op, AssertExpr)
               | fn_eval(Id, [AssertExpr])
               | var_ref(Id)
               | Literal
               ),
  Bin_op = (log_or|log_and|eq|ne|bit_or|bit_and|bit_xor|lt|gt|le|ge
	   |lshift|rshift|plus|minus|times|divide|modulo|pow|implies|iff),
  Un_op = ( is|log_not|bit_not ),
  Scoped_id = scoped_id([Module], Id, Extension),
  Module = 'STR',
  Literal = ('INT' | 'FLOAT' | 'STR' | pure | result | Complex),
  Complex = complex('FLOAT', 'FLOAT')
].
% ## token overrides to simplify the parser
%bit_not = '~'
%eq = '=='
%ne = '!='
%bit_or = '|'
%bit_and = '&'
%bit_xor = '^'
%lt = '<'
%gt = '>'
%le = '<='
%ge = '>='
%lshift = '<<'
%rshift = '>>'
%plus = '+'
%minus = '_'
%times = '*'
%divide = '/'
%modulo = '%'
%pow = '**'
% ## sidl primitive types
%pt_bool = Primitive_type(bool)
%pt_bool     = Primitive_type(bool)
%pt_char     = Primitive_type(char)
%pt_int      = Primitive_type(int)
%pt_long     = Primitive_type(long)
%pt_float    = Primitive_type(float)
%pt_double   = Primitive_type(double)
%pt_fcomplex = Primitive_type(fcomplex)
%pt_dcomplex = Primitive_type(dcomplex)
%pt_string   = Primitive_type(string)
%pt_opaque   = Primitive_type(opaque)
%
%def type_id(t):
%    """
%    \return the Id of a class, interface, package, etc.
%    """
%    return t[1]
%
%def method_id(t):
%    """
%    \return full name of a method
%    """
%    return t[2][1]+t[2][2]
%
%def ext_invariants(ext):
%    """
%    \return the invariants specified by a class or interface
%    """
%    if ext[0] == class_:
%        return class_invariants(ext)
%    elif ext[0] == interface:
%        return interface_invariants(ext)
%    return []
%
%def ext_methods(ext):
%    """
%    \return the methods specified by a class or interface
%    """
%    if ext[0] == class_:
%        return class_methods(ext)
%    elif ext[0] == interface:
%        return interface_methods(ext)
%    return []
%
%def hashable_type_id(t):
%    """
%    \return the (hashable) scoped Id of a class, interface, package, etc.
%    """
%    from utils import hashable
%    tid = t[1]
%    if isinstance(tid, tuple) and tid[0] == scoped_id:
%        return hashable(t[1])
%    return tid
%
%def get_scoped_id(symbol_table, ext):
%    """
%    return the scoped_id of an extendible
%    This wouldn't need to be so complicated if symbol_table[]
%    would return a class with an id instead of a scoped_id.
%    """
%    if is_scoped_id(ext):
%        return ext
%    tid = type_id(ext)
%    if is_scoped_id(tid):
%        return tid
%    return Scoped_id(symbol_table.prefix, tid, '')
%
%def is_static(method):
%    """
%    \return \c true iff the sidl.method \c method has the \c static
%    attribute.
%    """
%    from patmat import member_chk
%    return member_chk(static, method_method_attrs(method))
% 
%def is_nonblocking(method):
%    """
%    \return \c true iff the sidl.method \c method has the \c nonblocking
%    attribute.
%    """
%    from patmat import member_chk
%    return member_chk(nonblocking, method_method_attrs(method))
% 
%def is_not_static(method):
%    """
%    \return \c false iff the sidl.method \c method has the \c static
%    attribute.
%    """
%    return not is_static(method)
%def long_method_name(m):
%    """
%    \return \the long name of the sidl.method \c method
%    """
%    n = method_method_name(m)
%    return n[1]+n[2]
%
%def fixed_rarray(e):
%    """
%    determine whether a SimpleIntExpr contains a Var_ref.
%    """
%    import operator
%    if isinstance(e, tuple):
%        if e[0] == var_ref: return False
%        if e[0] == simple_int_infix_expr:
%            return fixed_rarray(e[1]) and fixed_rarray(e[2]) 
%        if e[0] == simple_int_prefix_expr:
%            return fixed_rarray(e[1])
%        if e[0] == simple_int_fn_eval:
%            return reduce(operator.and_, map(fixed_rarray, e[2]))
%        else:
%            return reduce(operator.and_, map(fixed_rarray, e))
%    return True
  
