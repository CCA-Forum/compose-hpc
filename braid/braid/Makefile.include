# TO BE INCLUDED BY THE TOPLEVEL Makefile.am         -*- makefile-automake -*-

# 3rd party stuff
if PYTHON_VERSION_2_6
# add Backports
  BACKPORTS=$(top_srcdir)/contrib/argparse-1.1
else
  BACKPORTS=
endif
python_PYTHON += $(top_srcdir)/contrib/ply/yacc.py $(top_srcdir)/contrib/ply/lex.py

# list all Python source files that also contain unit tests
PYTHON_SOURCES = \
	braid/braid.py \
	braid/chapel/__init__.py \
	braid/chapel/backend.py \
	braid/chapel/cgen.py \
	braid/chapel/chpl.py \
	braid/chapel/makefile.py \
	braid/burg.py \
	braid/codegen.py \
	braid/config.py \
	braid/ior.py \
	braid/ior_template.py \
	braid/parse_tree.py \
	braid/patmat.py \
	braid/rote2braid.py \
	braid/sidl_oop.py \
	braid/sidl_parser.py \
	braid/sidl_symbols.py \
	braid/sidl_token.py \
	braid/splicer.py \
	braid/utils.py

BUILT_PYTHON_SOURCES = \
	braid/parsetab.pyc braid/ir.py braid/sidl.py braid/legal.py \
	$(builddir)/braid/conversions.py

# the nobase_ prefix prevents path stripping during install
nobase_python_PYTHON += $(PYTHON_SOURCES) $(BUILT_PYTHON_SOURCES)
BUILT_SOURCES += $(BUILT_PYTHON_SOURCES)
GRAMMARS = braid/ir.def braid/sidl.def
BURG_RULES = braid/chapel/conversions.burg

bin_SCRIPTS += braid/braid braid/headerize braid/pyburg braid/rote2braid

nobase_pyexec_LTLIBRARIES += braid/scanner.la
braid_scanner_la_SOURCES = braid/scanner.l
braid_scanner_la_CPPFLAGS = $(PYTHONINC)
braid_scanner_la_LDFLAGS = -avoid-version -module
braid_scanner_la_LIBADD = -lfl

SIDL_TESTS= \
	regression/parser/args.sidl \
	regression/parser/ArrayTest.sidl \
	regression/parser/cca-0.6.3.sidl \
	regression/parser/cca-0.8.2.sidl \
	regression/parser/cca.sidl \
	regression/parser/clife.sidl \
	regression/parser/construct.sidl \
	regression/parser/cxxlife.sidl \
	regression/parser/decaf.sidl \
	regression/parser/enums.sidl \
	regression/parser/ExceptionTest.sidl \
	regression/parser/f90life.sidl \
	regression/parser/hello-client.sidl \
	regression/parser/hello-server.sidl \
	regression/parser/hello.sidl \
	regression/parser/hello2.sidl \
	regression/parser/hooks.sidl \
	regression/parser/inherit.sidl \
	regression/parser/knapsack.sidl \
	regression/parser/life.sidl \
	regression/parser/objarg.sidl \
	regression/parser/ordering.sidl \
	regression/parser/output.sidl \
	regression/parser/Overload.sidl \
	regression/parser/pythonlife.sidl \
	regression/parser/sidl.sidl \
	regression/parser/sidlx.sidl \
	regression/parser/sort.sidl \
	regression/parser/strings.sidl \
	regression/parser/strop.sidl \
	regression/parser/struct.sidl \
	regression/parser/vect.sidl \
	regression/parser/wave2d_cxx_internal.sidl \
	regression/parser/wave2d_cxx.sidl \
	regression/parser/wave2d_f90.sidl \
	regression/parser/wave2d.sidl \
	regression/parser/wrapper.sidl

EXTRA_DIST+=$(SIDL_TESTS) $(GRAMMARS) braid/gramola.pl braid/ir.py braid/sidl.py braid/headerize

# Most of the Python files contain doctest tests, see
# http://www.gnu.org/software/automake/manual/automake.html#Simple-Tests-using-parallel_002dtests
if ENABLE_REGRESSION
TESTS += $(PYTHON_SOURCES) $(SIDL_TESTS)
endif

TEST_EXTENSIONS += .py .sidl
PY_LOG_COMPILER = env PYTHONPATH=$(builddir)/braid:$(PYTHONPATH) $(PYTHON)
AM_PY_LOG_FLAGS = -m doctest
SIDL_LOG_COMPILER = env PYTHONPATH=$(builddir)/braid:$(PYTHONPATH) $(PYTHON) $(srcdir)/braid/braid.py
AM_SIDL_LOG_FLAGS = --gen-sexp --gen-sidl

$(builddir)/%.unit: $(srcdir)/%.py scanner.la
	env PYTHONPATH=$(builddir)/braid:$(PYTHONPATH) $(PYTHON) -m doctest $<

$(builddir)/braid/parsetab.pyc: braid/sidl_parser.py braid/sidl.py braid/scanner.la braid/sidl_token.py
	@echo "  GEN  [sidl parser tables]"
	@rm -f $@
	@cd braid && env PYTHONPATH=.:../$(PYTHONPATH):../$(BACKPORTS) $(PYTHON) ../$<
	@cd braid && env PYTHONPATH=.:../$(PYTHONPATH):../$(BACKPORTS) $(PYTHON) ../$<

braid/legal.py: $(top_srcdir)/COPYRIGHT
	$(AM_V_GEN)
	@echo "## @package legal">$@
	@echo "# The BSD license.">>$@
	@echo "license = '''">>$@
	@cat $< >>$@
	@echo "'''">>$@

# Code generators
$(builddir)/braid/conversions.py: $(srcdir)/braid/chapel/conversions.burg $(srcdir)/braid/burg.py
	@$(MKDIR_P) `dirname $@`
	$(AM_V_GEN) env PYTHONPATH=$(builddir)/braid:$(PYTHONPATH) $(PYTHON) \
		$(srcdir)/braid/burg.py $< -o $@

# We keep this file in srcdir because we only regenerate them if the
# user has swipl installed
$(srcdir)/braid/ir.py: $(srcdir)/braid/ir.def $(srcdir)/braid/gramola.pl
$(srcdir)/braid/sidl.py: $(srcdir)/braid/sidl.def $(srcdir)/braid/gramola.pl

$(srcdir)/braid/%.py: $(srcdir)/braid/%.def
	$(AM_V_GEN)if [ -n "$(SWIPL)" ]; then \
          egrep '^%#' $< | sed -e 's/^%#%/##/g' -e 's/^%//g' >$@ && \
	  echo '#\verbatim' >>$@ && \
	  egrep  -v '^%' $< | sed -e 's/\(.*\)/# \1/g' >>$@ && \
	  echo '#\endverbatim' >>$@ && \
	  $(SWIPL) -f $(srcdir)/braid/gramola.pl -t main -q -s <$< >>$@ && \
          egrep '^%[^#%]' $< | sed -e 's/^%//g' >>$@; \
	else \
	  touch $@ && \
	  echo "WARNING: $@ was NOT updated because swipl is missing"; \
	fi

clean-braid:
	cd braid && rm -rf scanner.c braid *.pyc *.pyo parsetab.py* lextab.py* parser.log parser.out
	rm -rf $(SIDL_TOKENS) $(UNIT_TOKENS)
# This can be done more nicely... Problem is, we do not want to force
# the dependency on swipl on the users
	if [ -x $(SWIPL) ]; then rm -f $(BUILT_SOURCES); fi
