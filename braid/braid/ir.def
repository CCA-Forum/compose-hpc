%% -*- prolog -*-
%%# Pipe this into GRAMOLA
%%# Lines starting with a single '%' will be presereved.
%%# To avoid duplicate doxygen comments, '% %%' will be replaced by '##'
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#!/usr/bin/env python
%# -*- python -*-
%#% @package ir
%# Convenience definitions for intermediate representation (IR) nodes.
%#
%# Please report bugs to <adrian@llnl.gov>.
%#
%# \authors <pre>
%#
%# Copyright (c) 2011, Lawrence Livermore National Security, LLC.
%# Produced at the Lawrence Livermore National Laboratory
%# Written by Adrian Prantl <adrian@llnl.gov>.
%#  
%# LLNL-CODE-473891.
%# All rights reserved.
%#  
%# This file is part of BRAID. For details, see 
%# http://compose-hpc.sourceforge.net/. 
%# Please read the COPYRIGHT file for Our Notice and
%# for the BSD License.
%#
%# </pre>
%#
%#
%# <h2>Grammar definition</h2>
%#
%# Caveats: scoped IDs in IR must always be absolute.
%#
%%# Built-in types are ['STR' | 'FLOAT' | 'INT']
%%# Do not forget to add parentheses around ( A|B )!
%%# In alternatives, atoms must come first: atom|complex(something).
%%# Prefix an underscore to suppress singleton warnings.
[
  _File = [ (Fn_decl | Fn_defn
	  | Var_decl
	  | Import
	  | type_decl(Type)
	  ) ],
  Import = import(Id),
  Stmt = (stmt(Do_while | While | break | Return | If | Goto | Expr) | Comment),
  Return = return(Expr),
  Goto = goto(Expr),
  Do_while = do_while(Body, Expr),
  While = while(Expr, Body),
  If = if(Expr, Body),
  Body = [Stmt],
  Expr = ( Literal
	 | new(Type, [Arg])
         | Var_decl
	 | VarRefExpr
	 | cast(Type, Expr)
	 | set_struct_item(Struct, Expr, Struct_item, Expr)
         | assignment(VarRefExpr, Expr)
         | set_arg(VarRefExpr, Expr)	 
	 | infix_expr(Bin_op, Expr, Expr)
	 | prefix_expr(Un_op, Expr)
	 | sign_extend(Bits, Expr)
	 ),
  Var_decl = ( var_decl(Type, Id)
	     | var_decl_init(Type, Id, Expr)
	     ),
  Bin_op = (log_or|log_and|eq|ne|bit_or|bit_and|bit_xor|lt|gt|le|ge|lshift|rshift
	   |plus|minus|times|divide|modulo|pow),
  Un_op = ( is|log_not|bit_not ),
  Literal = (StringLiteral | FloatLiteral | DoubleLiteral | 'INT' | pure | result | Complex | Bool),
  FloatLiteral = float( 'FLOAT' ),
  DoubleLiteral = double( 'FLOAT' ),
  StringLiteral = str('STR'),
  Bool = bool(true | false), % Python otherwise would treat ints and bools as the same thing
  Complex = complex('FLOAT', 'FLOAT'),
  Struct = struct((Scoped_id|Id), [Struct_item], DocComment),
  Struct_item = struct_item(Type, Id),
  Enum = enum(Id, [Enumerator], DocComment),
  Enumerator = ( enumerator(Id) | enumerator_value(Id, 'INT')),
  %Class = class(Scoped_id, [Fn_defn], Doc_comment),
  VarRefExpr = ( Id % untyped variable
	       | Pointer_expr
	       | Deref
	       | get_struct_item(Struct, Expr, Struct_item)
	       | call(Expr, [Expr])	 
	       ),
  Pointer_expr = pointer_expr(VarRefExpr),
  Deref = deref(VarRefExpr),
  Fn_decl = fn_decl([Attr], Type, Id, [Arg], DocComment),
  Fn_defn = fn_defn([Attr], Type, Id, [Arg], [Stmt], DocComment),
  Arg = arg([Attr], Mode, Type, Id),
  Attr = (static | pure | hooks),
  Mode = (in | out | inout),
  Type = ( Primitive_type
	 | Pointer_type
	 | typedef_type(Id)
	 | const(Type) 
	 | Struct
	 | Enum
	 | Rarray
	 % | Class
	 ),
  Primitive_type = primitive_type(
      bool
    | char
    | int
    | long
    | long_long
    | float
    | double
    | long_double
    | fcomplex
    | dcomplex
    | string
    | void ),
  Rarray = rarray(Primitive_type, Dimension, [Extents]),
  Dimension = 'INT',
  Extents = SimpleIntExpr,
  SimpleIntExpr = ( simple_int_infix_expr(Bin_op, SimpleIntExpr, SimpleIntExpr)
               | simple_int_prefix_expr(Un_op, SimpleIntExpr)
               | simple_int_fn_eval(Id, [SimpleIntExpr])
               | var_ref(Id)
               | 'INT'
               ),
  Pointer_type = pointer_type(Type|Fn_decl),
  Scoped_id = scoped_id([Module], Id, Extension),
  Module = 'STR',
  Extension = 'STR',
  Id = 'STR',
  DocComment='STR',
  Bits = 'INT',
  Comment = comment('STR')
].
% ## token overrides fir sidl.def compatibility
%bit_not = '~'
%eq = '=='
%ne = '!='
%bit_or = '|'
%bit_and = '&'
%bit_xor = '^'
%lt = '<'
%gt = '>'
%le = '<='
%ge = '>='
%lshift = '<<'
%rshift = '>>'
%plus = '+'
%minus = '_'
%times = '*'
%divide = '/'
%modulo = '%'
%pow = '**'
% ## ir primitive types
%pt_bool     = Primitive_type(bool)
%pt_char     = Primitive_type(char)
%pt_int      = Primitive_type(int)
%pt_long     = Primitive_type(long)
%pt_float    = Primitive_type(float)
%pt_double   = Primitive_type(double)
%pt_fcomplex = Primitive_type(fcomplex)
%pt_dcomplex = Primitive_type(dcomplex)
%pt_string   = Primitive_type(string)
%pt_void     = Primitive_type(void)
%void_ptr    = Pointer_type(pt_void)
%pt_long_long= Primitive_type(long_long)
%pt_long_double= Primitive_type(long_double)
%
% ## const char*
%const_str = Pointer_type(Const(Primitive_type(char)))
% 
%def Plus(A, B):
%    """
%    same as Infix_expr(ir.plus, A, B)
%    """
%    return Infix_expr(plus, A, B)
%
%def Get_struct_item_stmt(struct, sname, iname):
%    """
%    Convenience replacement function for Get_struct_item().
%    Accepts just the name of the item and looks up the type from \c struct.
%    """
%    for item in struct[2]:
%        (_, _, id) = item
%        if id == iname:
%            return Stmt(Get_struct_item(struct, sname, item))
%    raise Exception('lookup failed')
%
%def Set_struct_item_stmt(struct, sname, iname, expr):
%    """
%    Convenience replacement function for Set_struct_item().
%    Accepts just the name of the item and looks up the type from \c struct.
%    """
%    for item in struct[2]:
%        (_, _, id) = item
%        if id == iname:
%            return Stmt(Set_struct_item(struct, sname, item, expr))
%    raise Exception('lookup failed')
% 
%def Copy(A, B):
%    """
%    same as Stmt(Assignment(A, B))
%    """
%    return Stmt(Assignment(A, B))
%
%def simpleint_expr(prefix, e):
%    """
%    convert a SimpleIntExpr into a regular Expr, prepend prefix to all variable refs.
%    """
%    if isinstance(e, tuple):
%        if e[0] == var_ref: return prefix+e[1]
%        if e[0] == simple_int_infix_expr:
%            return Infix_expr(e[1], simpleint_expr(e[2]), simpleint_expr(e[3]))
%        if e[0] == simple_int_prefix_expr:
%            return prefix_expr, simpleint_expr(e[1])
%        if e[0] == simple_int_fn_eval:
%            return Call(e[1], map(simpleint_expr, e[2]))
%        else: import pdb; pdb.set_trace()
%    return e
%
%def all_var_refs(e):
%    """
%    yield all var_refs in a Simpleint_Expr
%    """
%    if isinstance(e, tuple):
%        if e[0] == var_ref: yield e[1]
%        elif e[0] == simple_int_infix_expr:
%            for e2 in all_var_refs(e[2]): yield e2
%            for e3 in all_var_refs(e[3]): yield e3
%        elif e[0] == simple_int_prefix_expr:
%            for e1 in all_var_refs(e[1]): yield e1
%        elif e[0] == simple_int_fn_eval:
%            for e1 in e[2]:
%                for e2 in all_var_refs(e1): yield e2
%        else:
%            for e1 in e:
%                for e2 in all_var_refs(e1): yield e2
%