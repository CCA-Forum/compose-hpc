%% -*- prolog -*-
%%# Pipe this into GRAMOLA
%%# Lines starting with a single '%' will be presereved.
%%# To avoid duplicate doxygen comments, '% %%' will be replaced by '##'
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#!/usr/bin/env python
%# -*- python -*-
%#% @package ir
%# Convenience definitions for intermediate representation (IR) nodes.
%#
%# Please report bugs to <adrian@llnl.gov>.
%#
%# \authors <pre>
%#
%# Copyright (c) 2011, Lawrence Livermore National Security, LLC.
%# Produced at the Lawrence Livermore National Laboratory
%# Written by Adrian Prantl <adrian@llnl.gov>.
%#  
%# LLNL-CODE-473891.
%# All rights reserved.
%#  
%# This file is part of BRAID. For details, see 
%# http://compose-hpc.sourceforge.net/. 
%# Please read the COPYRIGHT file for Our Notice and
%# for the BSD License.
%#
%# </pre>
%#
%#
%# <h2>Grammar definition</h2>
%#
%# Caveats: scoped IDs in IR must always be absolute.
%#
%%# Built-in types are ['STR' | 'FLOAT' | 'INT']
%%# Do not forget to add parentheses around ( A|B )!
%%# In alternatives, atoms must come first: atom|complex(something).
%%# Prefix an underscore to suppress singleton warnings.
[
  _File = [ Fn_decl | Fn_defn | Import
	  | Var_decl | Var_defn | type_decl(Type)
	  ],
  Import = import(Id),
  Stmt = stmt(Do_while | While | break | return(Expr) | If | goto(Expr) | Expr),
  Do_while = do_while(Body, Expr),
  While = while(Expr, Body),
  If = if(Expr, Body),
  Body = [Stmt],
  Expr = ( Literal
	 | call(Expr, [Expr])
         | Var_decl
         | Var_defn
	 | VarRefExpr
	 | set_struct_item(Struct, Expr, Struct_item, Expr)
         | assignment(VarRefExpr)
	 | infix_expr(Bin_op, Expr, Expr)
	 | prefix_expr(Un_op, Expr)
	 ),
  Var_decl = var_decl(Type, Id),
  Var_defn = var_defn(Type, Id),
  Bin_op = (log_or|log_and|eq|ne|bit_or|bit_and|bit_xor|lt|gt|lshift|rshift
	   |plus|minus|times|divide|modulo|rem|pow),
  Un_op = ( is|log_not|bit_not ),
  Literal = ('STR' | 'FLOAT' | 'INT' | pure | result | Complex | true | false),
  Complex = complex('FLOAT', 'FLOAT'),
  Struct = struct((Scoped_id|Id), [Struct_item], DocComment),
  Struct_item = struct_item(Type, Id),
  Enum = enum(Id, [Enum_item], DocComment),
  Enum_item = enum_item(Id),
  VarRefExpr = ( Id
	       | Pointer_expr
	       | Deref
	       | get_struct_item(Struct, Expr, Struct_item)
	       ),
  Pointer_expr = pointer_expr(VarRefExpr),
  Deref = deref(VarRefExpr),
  Fn_decl = fn_decl(Type, Id, [Arg], DocComment),
  Fn_defn = fn_defn(Type, Id, [Arg], [Stmt], DocComment),
  Arg = arg([Attr], Mode, Type, Id),
  Attr = [],
  Mode = (in | out | inout),
  Type = ( Primitive_type
	 | Pointer_type
	 | typedef_type(Id)
	 | const(Type) 
	 | Struct
	 | Enum),
  Primitive_type = primitive_type(
      bool
    | char
    | int
    | long
    | float
    | double
    | fcomplex
    | dcomplex
    | string
    | void ),
  Pointer_type = pointer_type(Type|Fn_decl),
  Scoped_id = scoped_id([Id], Extension),
  Extension = 'STR',
  Id = 'STR',
  DocComment='STR'
].
% ## ir primitive types
%pt_bool = Primitive_type(bool)
%pt_bool     = Primitive_type(bool)
%pt_char     = Primitive_type(char)
%pt_integer  = Primitive_type(int)
%pt_long     = Primitive_type(long)
%pt_float    = Primitive_type(float)
%pt_double   = Primitive_type(double)
%pt_fcomplex = Primitive_type(fcomplex)
%pt_dcomplex = Primitive_type(dcomplex)
%pt_string   = Primitive_type(string)
%pt_void     = Primitive_type(void)
%
% ## const char*
%const_str = Pointer_type(Const(Primitive_type(char)))
% 
%def Plus(A, B):
%    """
%    same as Infix_expr(ir.plus, A, B)
%    """
%    return Infix_expr(plus, A, B)
