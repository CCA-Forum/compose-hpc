# -*- python -*-
# Process this file with burg.py
## @package UPC.conversions
#
# BURG-style low-level type conversion rules for IOR <-> UPC.
#
# Please report bugs to <components@llnl.gov>.
#
# \authors <pre>
#
# Copyright (c) 2012 Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory
# Written by Adrian Prantl <adrian@llnl.gov>.
#
# LLNL-CODE-473891.
# All rights reserved.
#
# This file is part of BRAID. For details, see
# http://compose-hpc.sourceforge.net/.
# Please read the COPYRIGHT file for Our Notice and
# for the BSD License.
#
# </pre>


#------------------------------------------------------------------------
# Declaration of additional arguments for the rule actions
#------------------------------------------------------------------------
%action arguments: (convs, skel, dest, full_type)

#------------------------------------------------------------------------
import ior, ir, sidlir
import upc.upc as upc
from codegen import CCodeGenerator, CFile

def c_gen(ir, scope=None):
    if scope == None:
        scope = CFile()
    return CCodeGenerator().generate(ir, scope)

def ir_arg_to_upc((arg, attrs, mode, typ, name)):
    return arg, attrs, mode, ir_type_to_upc(typ), name

def ir_type_to_upc(typ):
    """
    Convert only the datatype \c typ into its UPC equivalent
    """
    return tup

def strip(typ):
    if typ[0] == ir.typedef_type and typ[1] == 'sidl_bool':
        return ior.bool
    # strip unnecessary details from aggregate types
    if (typ[0] == ir.enum or
        typ[0] == sidlir.array or
        typ[0] == sidlir.rarray or
        typ[0] == ir.pointer_type or
        typ[0] == ir.struct):
        return typ[0]
    return typ


#------------------------------------------------------------------------
%rules:
# Rule format
# -----------
#
# upc.vcall @ upc <-- ior.vcall @ C : cost(1)
#   actions
#------------------------------------------------------------------------


# BOOL
#------------------------------------------------------------------------
ior.bool @ C <-- upc.bool : cost(0)
    pass

upc.bool @ C <-- ior.bool : cost(0)
    pass

# CHAR
#------------------------------------------------------------------------
ior.char @ C <-- upc.char : cost(0)
    pass

upc.char @ C <-- ior.char : cost(0)
    pass

# COMPLEX - 32/64 Bit components
#------------------------------------------------------------------------
ior.fcomplex @ C <-- upc.fcomplex : cost(0)
    pass

ior.dcomplex @ C <-- upc.dcomplex : cost(0)
    pass

upc.fcomplex @ C <-- ior.fcomplex : cost(0)
    pass

upc.dcomplex @ C <-- ior.dcomplex : cost(0)
    pass

# ENUM
#------------------------------------------------------------------------
ior.enum @ C <-- upc.enum: cost(0)
    pass

upc.enum @ C <-- ior.enum: cost(0)
    pass

# SELF
#------------------------------------------------------------------------
# ior.baseobject @ C <-- upcast(upc.baseobject): cost(0)
#     # We should find a cleaner way of implementing this
#     #if a0 == 'self' and member_chk(ir.pure, attrs):
#     import pdb; pdb.set_trace()
#     convs.append(ir.Stmt(ir.Assignment(dest, '(({0})((struct sidl_BaseInterface__object*)self)<--d_object)'.format(c_gen(typ)))))
#     return dest

# STRING
#------------------------------------------------------------------------
ior.string @C <-- upc.string: cost(0)
    pass

upc.string @C <-- ior.string: cost(0)
    pass

# INT
#------------------------------------------------------------------------
ior.int @C <-- upc.int: cost(0)
    pass
upc.int @C <-- ior.int: cost(0)
    pass

# LONG
#------------------------------------------------------------------------
ior.long @C <-- upc.long: cost(0)
    pass
upc.long @C <-- ior.long: cost(0)
    pass

# VOID return type
#------------------------------------------------------------------------
upc.void @C <-- ior.void:cost(0)
    pass

# FIXME:
# upc.pointer_type @C <-- ior.*
#   a0 = ir.Pointer_expr(a0)

upc.pointer_type @C <-- ior.pointer_type :cost(0)
    pass

ior.pointer_type @C <-- upc.pointer_type :cost(0)
    pass

# STRUCT
#------------------------------------------------------------------------
ior.struct @C <-- upc.struct: cost(0)
    pass

upc.struct @C <-- ior.struct: cost(0)
    pass

# SIDL ARRAY
#------------------------------------------------------------------------

# for sidl arrays we invoke a UPC code fragment from the C stub
upc.array @upc <-- upc.new_array: cost(0)
    pass

upc.new_array @upc <-- ior.array @upc: cost(0)
    pass

ior.array @upc <-- upc.array: cost(0)
    pass
