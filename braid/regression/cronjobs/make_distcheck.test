# make_distcheck.sh -*- sh -*-
#
# OVERVIEW:
#     This script tests the SVN repository and packaging
#     of the Babel code.  It is intended to be run only
#     on the "official" development platforms.  This script
#     will only do ./configure, make all, make check.
#
# REQUIREMENTS:
#     This script assumes several environment variables are
#     set appropriately.  It is normal usage for the envoker of
#     this script to source some other platform specific 
#     configuration file and then envoke this script.
#
#     SH
#     PACKAGE
#     SNAPSHOT_NUMBER
#     PATH
#     LD_LIBRARY_PATH (or equivalent)
#     CLASSPATH
#     SVN
#     SVNROOT
#     MAKE
#     MAKE_FLAGS
#     MAIL
#     PERL
#     ACLOCAL
#     AUTOMAKE
#     AUTOCONF
#     CONFIG_FLAGS
#     CD
#     MKDIR
#     CC
#     CFLAGS
#     CXX
#     CXXFLAGS
#     F77
#     FFLAGS
#     CHGRP
#     TESTGID
#     CHMOD
#     MV

BUILDDIR=${PACKAGING_BUILDDIR}/cronjobs/${PROFILE_NAME}/${SESSION}
if test ! -d ${BUILDDIR}; then 
   mkdir -p ${BUILDDIR};
fi 
cd ${BUILDDIR}

umask 007

date
echo "Host: " `hostname`
gcc --version
echo "************ rm -rf $PACKAGE ************"
$CHGRP -f ${TESTGID} .
$CHMOD -f ug+rwx .
if test -d $PACKAGE; then
  $CHGRP -Rf ${TESTGID} $PACKAGE
  $CHMOD -Rf ug+rwX $PACKAGE
  olddir=$PACKAGE.old
  if test -d $olddir; then
    $CHGRP -Rf ${TESTGID} $olddir ; $CHMOD -Rf ug+rwX $olddir; rm -rf $olddir
      if test -d $olddir; then
	for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	  if test -d $olddir.$i; then
	    $CHGRP -Rf ${TESTGID} $olddir.$i ; $CHMOD -Rf ug+rwX $olddir.$i; rm -rf $olddir.$i
	  else
	    olddir=$olddir.$i
	    break
	  fi
	done
      fi
    fi
  $MV -f $PACKAGE $olddir
  rm -rf $olddir
  unset olddir
fi

echo "************ ENVIRONMENT VARIABLES ************"
source ${HOME}/bin/babel-cvs-`hostname -s`.settings
# sets SSH_AUTH_SOCK & SSH_AGENT_PID
echo `set`

echo "************ $SVN checkout $PACKAGE ************"
$SVN checkout $SVNROOT $PACKAGE
if test $? -ne 0; then 
	echo '****** SVN checkout failed ******'
	exit 1
fi
$CHGRP -Rf ${TESTGID} $PACKAGE

echo "************ change version # to snapshot #  ************"
$CD $PACKAGE
$PERL -p -i -e "s/AC_INIT.*/AC_INIT([$PACKAGE], [$SNAPSHOT_NUMBER], [babel-bugs\@cca-forum.org])/;" configure.ac
# $PERL -p -i -e "s/AM_INIT_AUTOMAKE.*/AM_INIT_AUTOMAKE($PACKAGE, $SNAPSHOT_NUMBER)/;" configure.ac
$PERL -p -i -e "s/AC_INIT.*/AC_INIT([babel-runtime], [$SNAPSHOT_NUMBER], [babel-bugs\@cca-forum.org])/;" runtime/configure.ac
# $PERL -p -i -e "s/AM_INIT_AUTOMAKE.*/AM_INIT_AUTOMAKE(babel-runtime, $SNAPSHOT_NUMBER)/;" runtime/configure.ac

echo "************ rebuild supporting files  ************"
./autotool_rebuild.sh
if test $? -ne 0; then
	echo '****** autotools_rebuild.sh failed  ******'
	exit 1
fi
sh fix_timestamps.sh

echo "************ configure  ************"
./configure -C --prefix=${PWD}/_inst ${CONFIG_FLAGS} \
    CC="$CC" CFLAGS="$CFLAGS" CXX="$CXX" CXXFLAGS="$CXXFLAGS" F77="$F77" FFLAGS="$FFLAGS" FC="$FC" FCFLAGS="$FCFLAGS" CPP="$CPP" CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS"
if test $? -ne 0; then 
	  echo '****** configure failed ******'
	  exit 1
fi


# Those flags are stored in the Makefiles generated by configure
# anyway; if we do not unset them here, the Python module build step
# will use the wrong set of flags if the CC that Python was built with
# is not the Babel CC
unset CFLAGS CXXFLAGS FFLAGS FCFLAGS CPPFLAGS LDFLAGS

echo "************ $MAKE $MAKE_FLAGS all ************"
$MAKE $MAKE_FLAGS all
if test $? -ne 0; then 
	  echo "****** $MAKE $MAKE_FLAGS all failed ******"
	  exit 1
fi 

echo "************ $MAKE $MAKE_FLAGS SESSION=${SESSION} PYFLAGS=-x${XML_ARCHIVE} distcheck ************"
$MAKE $MAKE_FLAGS SESSION=${SESSION} PYFLAGS=-x${XML_ARCHIVE} distcheck
if test $? -ne 0; then 
    echo "****** $MAKE $MAKE_FLAGS distcheck failed ******"
    exit 1
fi

echo "************ Successful run $MAKE $MAKE_FLAGS clean ************"
$MAKE $MAKE_FLAGS clean
if test $? -ne 0; then
   echo "****** $MAKE $MAKE_FLAGS clean failed ******"
   exit 1
fi

#echo "************ cp babel-${SNAPSHOT_NUMBER}.tar.gz ${CRONROOT} ************"
#cp babel-${SNAPSHOT_NUMBER}.tar.gz ${CRONROOT}
#if test $? -ne 0; then
#    echo "****** cp tarball failed ******"
#    exit 1
#fi
#
#cd ${CRONROOT}
#gtar zxvf babel-${SNAPSHOT_NUMBER}.tar.gz

exit 0
