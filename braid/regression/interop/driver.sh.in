#!/bin/sh
echo "Running Braid -> Babel tests."
echo "Expecting Babel sources in @BABEL_SRCDIR@"

if [ $# -lt 3 ]; then 
    echo "usage: $0 make [flags] -- {test}.babel"
    exit 1
fi

# Argument layout:
# $1..N-1 .... make makeflags
# $N ......... file
end=
MAKE="$1"
while [ -n "$1" ] ; do
  last=$1
  shift
  if [ "$1" = "--" ]; then
      end="true" # stop copying after the -- argument
  fi
  if [ -z "$end" ]; then
      MAKE="$MAKE $1"
  fi
done
# End of argument handling

# Begin of main driver
echo "MAKE = $MAKE"
echo "file = $last"
#set -x
echo "--set up environment"
TESTCASE=`basename $last test.chpl`
BABEL=@BABEL_PREFIX@/bin/babel
BRAID="env PYTHONPATH=../../../../braid:../../../../braid/.libs:../../@top_srcdir@/contrib/argparse-1.1:../../@top_srcdir@/contrib/ply:@PYTHONPATH@ @PYTHON@ ../../@top_srcdir@/braid/braid.py"
sidl=@BABEL_SRCDIR@/regression/$TESTCASE/$TESTCASE.sidl
cd regression/interop                                   ||exit 1

echo "--setup directory, copy over babel regression test"
mkdir -p $TESTCASE
cd $TESTCASE                                            ||exit 1
cp -u -r \
   ../@srcdir@/$TESTCASE/runChapel \
   @BABEL_SRCDIR@/regression/$TESTCASE/lib* .		||exit 1
chmod u+w -R runChapel lib*                             ||exit 1


printf -- "--generate server ["
for SERVER in `ls -1 -d lib*`; do
  cd $SERVER                                             ||exit 1
  LANGUAGE=`echo $SERVER|sed 's/lib//g'`
  printf " $LANGUAGE"
  $BABEL $sidl -s$LANGUAGE --makefile                    ||exit 1
  # turn on debugging
  @PERL@ -pi -e"s/(EXTRAFLAGS=)/\1-ggdb -O0/" GNUmakefile||exit 1
  cd ..							 ||exit 1
done
echo " ]"

echo "--compile server"
$MAKE all -C libC      >/dev/null & libC=$!
$MAKE all -C libCxx    >/dev/null & libCxx=$!
$MAKE all -C libF77    >/dev/null & libF77=$!
$MAKE all -C libF90    >/dev/null & libF90=$!
$MAKE all -C libF03    >/dev/null & libF03=$!
$MAKE all -C libPython >/dev/null & libPython=$!
$MAKE all -C libJava   >/dev/null & libJava=$!
FAILED=
wait $libC	|| FAILED="$FAILED\n$PWD/libC"
wait $libCxx	|| FAILED="$FAILED\n$PWD/libCxx" 
wait $libF77	|| FAILED="$FAILED\n$PWD/libF77" 
wait $libF90	|| FAILED="$FAILED\n$PWD/libF90" 
wait $libF03	|| FAILED="$FAILED\n$PWD/libF03" 
wait $libPython	|| FAILED="$FAILED\n$PWD/libPython" 
wait $libJava	|| FAILED="$FAILED\n$PWD/libJava"
if [ -n "$FAILED" ]; then
    wait
    echo "**ERROR: Failed to compile $FAILED"
    exit 1
fi

echo "--generate client"
cd runChapel						||exit 1
$BRAID $sidl -cchapel --makefile			||exit 1
$BRAID ../../output/output.sidl -cchapel                ||exit 1
cat >>babel.make <<EOF
IORHDRS += RegOut_IOR.h
STUBHDRS += RegOut.h
STUBSRCS += RegOut_cStub.c 
EOF
for libdir in `ls -1 -d ../lib*`; do
  language=`echo $libdir|sed 's/^...lib//g'`
  $MAKE SERVER="${libdir}/libimpl*.la ../../output/libC/libimpl.la" \
        IMPL="${TESTCASE}test" \
        OUTFILE="runChapel2$language"                   ||exit 1
done

echo "--run client"

for libdir in `ls -1 -d ../lib*`; do
  language=`echo $libdir|sed 's/^...lib//g'`
  echo "TEST_BEGIN Chapel->$language"
  env LD_LIBRARY_PATH="${libjvm_dir}:${libjava_dir}:@BABEL_PREFIX@/lib:${LD_LIBRARY_PATH}" \
      CLASSPATH="../libJava:@BABEL_PREFIX@/lib/sidl-@BABEL_VERSION@.jar:@BABEL_PREFIX@/lib/sidlstub_@BABEL_VERSION@.jar:." \
      SIDL_DLL_PATH="../lib$language/libImpl.scl;@BABEL_PREFIX@/lib/libsidlstub_java.scl;@BABEL_PREFIX@/lib/libsidl.scl;../../../runtime/sidlx/libsidlx.scl;../../output/libC/libOutput.scl" \
      ./runChapel2$language || exit 1
done

