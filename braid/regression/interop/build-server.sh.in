#!/bin/sh
if [ $# -lt 2 ]; then 
    echo "usage: $0 testcase make [flags]"
    exit 1
fi

BRAID="env PYTHONPATH=../../../../braid:../../../../braid/.libs:../../@top_srcdir@/contrib/argparse-1.1:../../@top_srcdir@/contrib/ply:@PYTHONPATH@ @PYTHON@ ../../@top_srcdir@/braid/braid.py"
arg=$1
shift
MAKE=$1
shift
if echo "$1" | grep -q '^-'; then
    MAKE="$MAKE $*"
else
    MAKE="$MAKE -$*"
fi
cd regression/interop                                   ||exit 1

TESTCASE=`basename \`dirname \\\`dirname $arg\\\`\``
language=`echo \`basename \\\`dirname $arg\\\`\` |sed 's/lib//g'`
sidl=@BABEL_SRCDIR@/regression/$TESTCASE/$TESTCASE.sidl
#echo "MAKE = $MAKE"
#echo "TESTCASE = $TESTCASE"
#echo "language = $language"

#echo "--setup directory, copy over babel regression test [ $TESTCASE / $language ]"
mkdir -p $TESTCASE
cd $TESTCASE                                            ||exit 1

if [ x"$language" = x"Chapel" ]; then
  # copy from Braid srcdir
  cp -r \
   ../@top_srcdir@/regression/interop/$TESTCASE/libChapel .||exit 1
else
 # copy from Babel srcdir
  cp -r \
   @BABEL_SRCDIR@/regression/$TESTCASE/lib$language .   ||exit 1
  chmod -R u+w lib$language                             ||exit 1
fi

echo "--generate server [ $TESTCASE : $language ]"
cd lib$language                                         ||exit 1
OUTPUTSIDL=@BABEL_SRCDIR@/regression/output/output.sidl
case $TESTCASE in
    hooks|contracts)
	$BRAID -i -s$language --makefile $sidl ||exit 1
	$BRAID -c$language --make-prefix=synch_ $OUTPUTSIDL ||exit 1
	@PERL@ -pi -e"s|(BABELFLAG=)|\1-i |" GNUmakefile ||exit 1
	;;
    *)
	$BRAID -s$language --makefile $sidl ||exit 1
	$BRAID -c$language --make-prefix=synch_ $OUTPUTSIDL ||exit 1
	;;
esac
sed -i -e 's/\(include babel.make\)/\1\ninclude synch_babel.make/' GNUmakefile

case $language in
    F*) 
	echo "synch_STUBOBJS=\$(synch_STUBSRCS:.c=.lo)">>synch_babel.make
	echo "synch_STUBMODULEOBJS=\$(synch_STUBMODULESRCS:.$language=.lo)">>synch_babel.make
	echo "synch_TYPEMODULEOBJS=\$(synch_TYPEMODULESRCS:.$language=.lo)">>synch_babel.make
	;;
    Chapel)
	echo "# not needed">synch_babel.make
	;;
    *)  ;;
esac

sed -i -e 's/(\(IORHDRS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(STUBHDRS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(STUBMODULESRCS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(STUBSRCS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(TYPEMODULESRCS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(STUBOBJS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(STUBMODULEOBJS\))/(\1) \$(synch_\1)/g' \
       -e 's/(\(TYPEMODULEOBJS\))/(\1) \$(synch_\1)/g' \
    GNUmakefile
@PERL@ -pi -e "s|^.babel (.*)|\t$BRAID \1 ; $BRAID -c$language --make-prefix=synch_ @BABEL_SRCDIR@/regression/output/output.sidl|" GNUmakefile ||exit 1

# turn on debugging
@PERL@ -pi -e"s/(EXTRAFLAGS=)/\1-ggdb -O0 -Wno-all/" GNUmakefile ||exit 1
cd ..						        ||exit 1

echo "--compile server  [  $TESTCASE : $language ]"
$MAKE -C lib$language clean >/dev/null
if [ x"$language" = x"Chapel" ]; then
    exec $MAKE all -C lib$language # verbose
else
    exec $MAKE all -C lib$language >/dev/null
fi