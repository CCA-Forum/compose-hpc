# TO BE INCLUDED BY THE TOPLEVEL Makefile.am         -*- makefile-automake -*-

# .SECONDEXPANSION:
# GNU make allows us to use $$-quoted variables which are exanded in a second pass

TESTDIR=regression/interop
TTESTDIR=$(top_builddir)/regression/interop

# These are gently ordered by number of generated files to speedup parallel builds
BABEL_TESTS = \
  regression/interop/inherit/runChapel/inherittest.chpl \
  regression/interop/args/runChapel/argstest.chpl \
  regression/interop/arrays/runChapel/arraystest.chpl \
  regression/interop/contracts/runChapel/vectortest.chpl \
  regression/interop/strings/runChapel/stringstest.chpl \
  regression/interop/exceptions/runChapel/exceptionstest.chpl \
  regression/interop/ordering/runChapel/orderingtest.chpl  \
  regression/interop/overload/runChapel/overloadtest.chpl \
  regression/interop/struct/runChapel/structtest.chpl 

BABEL_TESTNAMES = \
  args arrays contracts enums hooks inherit strings exceptions ordering overload struct 
BABEL_TESTNAMES77 = \
  args arrays contracts enums hooks inherit strings exceptions          overload struct

EXTRA_DIST += $(BABEL_TESTS)

if ENABLE_INTEROP_REGRESSION

# This target will be made prior to the tests. We use it to compile
# regression/output and all the server libraries that are copied over
# from Babel
check_DATA = $(TESTDIR)/output/libC/libimpl.la

# Automake does not allow the use of wildcards, so we generate the
# list of tests by hand
include regression/interop/tests.mk
TESTS += $(INTEROP_TESTS)
TEST_EXTENSIONS += .sh
SH_LOG_COMPILER = sh regression/interop/driver.sh 

if BABEL_LANG_C # for symmetry -- can't do much without C ..?
languages = C
#check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libC/libimpl.la)
check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/runC/client-stamp)
# by using $$ we can record a list of prerequisites that will get
# %-expanded when used in a rule
#SERVER_DEPS = $$(filter $(TESTDIR)/%/libC/libimpl.la,$(check_DATA))

if BABEL_LANG_CXX
  languages += Cxx
#  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libCxx/libimpl.la)
  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/runCxx/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libCxx/libimpl.la,$(check_DATA))
endif

if BABEL_LANG_F77
  languages += F77
#  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libF77/libimpl.la)
  check_DATA += $(BABEL_TESTNAMES77:%=$(TESTDIR)/%/runF77/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libF77/libimpl.la,$(check_DATA))
endif

if BABEL_LANG_F90
  languages += F90
#  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libF90/libimpl.la)
  check_DATA += $(BABEL_TESTNAMES77:%=$(TESTDIR)/%/runF90/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libF90/libimpl.la,$(check_DATA))
endif

if BABEL_LANG_F03
  languages += F03
#  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libF03/libimpl.la)
  check_DATA += $(BABEL_TESTNAMES77:%=$(TESTDIR)/%/runF03/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libF03/libimpl.la,$(check_DATA))
endif

if BABEL_LANG_JAVA
  languages += Java
#  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libJava/libimpl.jar)
  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/runJava/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libJava/libimpl.jar,$(check_DATA))
endif

if BABEL_LANG_PYTHON
  languages += Python
#  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libPython/libimpl2.la)
  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/runPython/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libPython/libimpl2.la,$(check_DATA))
endif

if BABEL_LANG_CHPL
# for now only these work
#  check_DATA += $(TESTDIR)/args/libChapel/libimpl.la
#  check_DATA += $(TESTDIR)/contracts/libChapel/libimpl.la
# check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/libChapel/libimpl.la)

  check_DATA += $(BABEL_TESTNAMES:%=$(TESTDIR)/%/runChapel/client-stamp)
#  SERVER_DEPS += $$(filter $(TESTDIR)/%/libChapel/libimpl.la,$(check_DATA))
endif

endif

# FIXME:
#
# On parallel make: Apparently my nice hack to pass through the jobs
# pipe does not work too well. We therefore use -j1 to force each
# testcase to build serially if make check is run with -jN.

# We are only using one proxy target to circumvent the
# multi-target-parallel make issue
$(TESTDIR)/output/libC/libimpl.la: $(TTESTDIR)/build-tracker.sh
	@sh $< $(MAKE) $(MAKEFLAGS)

$(TESTDIR)/%/libimpl.la: $(TTESTDIR)/build-server.sh
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

$(TESTDIR)/%/libimpl.jar: $(TTESTDIR)/build-server.sh
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

$(TESTDIR)/%/libimpl2.la: $(TTESTDIR)/build-server.sh
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

CLIENT_DEPS=$(TTESTDIR)/build-client.sh \
	    $(TESTDIR)/output/libC/libimpl.la \
            $(nobase_python_PYTHON)

# ATTN: If we should ever encounter a race condition with this rule,
# it is because libimpl.la is not the last file to be built by
# build-server.sh
#$(TESTDIR)/%.sh: $(CLIENT_DEPS) $(SERVER_DEPS)
#       @echo Prerequisites are $^
#	@sh $< $@ $(MAKE) $(MAKEFLAGS)

clean-regression:
	if [ "x$(builddir)" != "x$(srcdir)" ]; then \
		cd $(builddir) && \
                rm -rf $(BABEL_TESTS) \
                       regression/interop/output && \
		for f in `echo $(BABEL_TESTS)|sed 's/ /\\n/g'`; do \
	            rm -rf `dirname \`dirname $$f\``; \
		done; \
	fi


# ----------------------------------------------------------------------
# Convenience targets
RUNPYTEST = env PYTHONPATH=$$PYTHONPATH:@BABEL_SRCDIR@/regression $(PYTHON) \
		@BABEL_SRCDIR@/regression/gantlet/commandline.py \
		-d -k$(PACKAGE) #-c$(host)

STATIC_TESTS := $(shell echo $(TESTDIR)/*/run*/run*.sh)
ALLTESTS = $(STATIC_TESTS)

# This is an alternate way of invoking the regression tests via gantlet
# End-users should use `make check' instead.
# This prints better statistics about broken tests
run-gantlet: $(check_DATA)
	if test "X$$PROFILE_NAME" = X; then \
	    PROFILE_NAME="$(host)"; \
        fi; \
	if test "X$(SESSION)" != X; then \
	    session_name="$(SESSION)"; \
        else  \
            session_name="default_$$CHECK_COMMAND"; \
        fi; \
	$(RUNPYTEST) -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" $(TESTDIR)/*/run*/run*.sh ;

run-gantlet-gui: $(check_DATA)
	if test "X$$PROFILE_NAME" = X; then \
	    PROFILE_NAME="$(host)"; \
        fi; \
	if test "X$(SESSION)" != X; then \
	    session_name="$(SESSION)"; \
        else  \
            session_name="default_$$CHECK_COMMAND"; \
        fi; \
	$(RUNPYTEST) -g -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" $(TESTDIR)/*/run*/run*.sh ;


# ----------------------------------------------------------------------

endif
