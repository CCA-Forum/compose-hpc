# TO BE INCLUDED BY THE TOPLEVEL Makefile.am         -*- makefile-automake -*-

# These are gently ordered by number of generated files to speedup parallel builds
BABEL_TESTS = \
  regression/interop/inherit/runChapel/inherittest.chpl \
  regression/interop/args/runChapel/argstest.chpl \
  regression/interop/arrays/runChapel/arraystest.chpl \
  regression/interop/contracts/runChapel/vectortest.chpl \
  regression/interop/strings/runChapel/stringstest.chpl \
  regression/interop/exceptions/runChapel/exceptionstest.chpl \
  regression/interop/ordering/runChapel/orderingtest.chpl  \
  regression/interop/overload/runChapel/overloadtest.chpl \
  regression/interop/struct/runChapel/structtest.chpl 

BABEL_TESTNAMES = \
  args arrays inherit strings exceptions ordering overload struct 

# BABEL_TESTS = regression/interop/contracts/runChapel/contractstest.chpl 
# BABEL_TESTNAMES = contracts

EXTRA_DIST += $(BABEL_TESTS)

if ENABLE_INTEROP_REGRESSION
TESTS += $(BABEL_TESTS)
# Hmm.. apparently, this is not the same as the above
## BABEL_TESTS = args arrays strings
## $(BABEL_TESTS:%=$(INTEROP_DIR)/%.babel)

TEST_EXTENSIONS += .chpl
CHPL_LOG_COMPILER = sh 
# FIXME:
#
# On parallel make: Apparently my nice hack to pass through the jobs
# pipe does not work too well. We therefore use -j1 to force each
# testcase to build serially if make check is run with -jN.
#AM_BABEL_LOG_FLAGS = $(builddir)/regression/interop/driver.sh $(MAKE) -$(MAKEFLAGS)
AM_CHPL_LOG_FLAGS = $(builddir)/regression/interop/driver.sh

# This target will be made prior to the tests. We use it to compile
# regression/output and all the server libraries that are copied over
# from Babel
check_DATA = $(builddir)/regression/interop/output/libC/GNUmakefile

if BABEL_LANG_C # for symmetry -- can't do much without C ..?
check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libC/libimpl.la)
check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/runC/runC2Chapel.sh)
languages = C

if BABEL_LANG_CXX
  languages += Cxx
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libCxx/libimpl.la)
endif

if BABEL_LANG_F77
  languages += F77
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libF77/libimpl.la)
endif

if BABEL_LANG_F90
  languages += F90
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libF90/libimpl.la)
endif

if BABEL_LANG_F03
  languages += F03
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libF03/libimpl.la)
endif

if BABEL_LANG_JAVA
  languages += Java
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libJava/libimpl.la)
endif

if BABEL_LANG_PYTHON
  languages += Python
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libPython/libimpl1.la)
endif

if BABEL_LANG_CHPL
#check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libChapel/libimpl.la)

# for now onnly these work
check_DATA += $(builddir)/regression/interop/args/libChapel/libimpl.la
check_DATA += $(builddir)/regression/interop/contracts/libChapel/libimpl.la

check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/runChapel/runChapel2C.sh)
endif
endif

TESTDIR=$(builddir)/regression/interop
TTESTDIR=$(top_builddir)/regression/interop
# We are only using one proxy target to circumvent the
# multi-target-parallel make issue
$(TESTDIR)/output/libC/GNUmakefile: $(TTESTDIR)/build-tracker.sh
	@sh $< $(MAKE) $(MAKEFLAGS)

$(TESTDIR)/%/libimpl.la: $(TTESTDIR)/build-server.sh
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

$(TESTDIR)/%/libimpl1.la: $(TTESTDIR)/build-server.sh
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

CLIENT_DEPS=$(TTESTDIR)/build-client.sh \
            $(filter %.la, $(check_DATA)) \
	    $(TESTDIR)/output/libC/GNUmakefile \
            $(nobase_python_PYTHON)

# ATTN: If we should ever encounter a race condition with this rule,
# it is because libimpl.la is not the last file to be built by
# build-server.sh
$(TESTDIR)/%/runChapel/runChapel2C.sh: $(CLIENT_DEPS)
	@sh $< $@ $(MAKE) $(MAKEFLAGS)
$(TESTDIR)/%/runC/runC2Chapel.sh: $(CLIENT_DEPS)
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

clean-regression:
	if [ "x$(builddir)" != "x$(srcdir)" ]; then \
		cd $(builddir) && \
                rm -rf $(BABEL_TESTS) \
                       regression/interop/output && \
		for f in `echo $(BABEL_TESTS)|sed 's/ /\\n/g'`; do \
	            rm -rf `dirname \`dirname $$f\``; \
		done; \
	fi


# ----------------------------------------------------------------------
# Convenience targets
RUNPYTEST = env PYTHONPATH=$$PYTHONPATH:@BABEL_SRCDIR@/regression $(PYTHON) \
		@BABEL_SRCDIR@/regression/gantlet/commandline.py \
		-d -k$(PACKAGE) #-c$(host)

STATIC_TESTS := $(shell echo $(TESTDIR)/*/run*/run*.sh)
ALLTESTS = $(STATIC_TESTS)

# This is an alternate way of invoking the regression tests via gantlet
# End-users should use `make check' instead.
# This prints better statistics about broken tests
run-gantlet: $(check_DATA)
	if test "X$$PROFILE_NAME" = X; then \
	    PROFILE_NAME="$(host)"; \
        fi; \
	if test "X$(SESSION)" != X; then \
	    session_name="$(SESSION)"; \
        else  \
            session_name="default_$$CHECK_COMMAND"; \
        fi; \
	$(RUNPYTEST) -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" $(TESTDIR)/*/run*/run*.sh ;

run-gantlet-gui: $(check_DATA)
	if test "X$$PROFILE_NAME" = X; then \
	    PROFILE_NAME="$(host)"; \
        fi; \
	if test "X$(SESSION)" != X; then \
	    session_name="$(SESSION)"; \
        else  \
            session_name="default_$$CHECK_COMMAND"; \
        fi; \
	$(RUNPYTEST) -g -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" $(TESTDIR)/*/run*/run*.sh ;


# ----------------------------------------------------------------------

endif
