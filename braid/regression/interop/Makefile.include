# TO BE INCLUDED BY THE TOPLEVEL Makefile.am         -*- makefile-automake -*-

BABEL_TESTS = \
  regression/interop/args/runChapel/argstest.chpl \
  regression/interop/arrays/runChapel/arraystest.chpl \
  regression/interop/inherit/runChapel/inherittest.chpl \
  regression/interop/strings/runChapel/stringstest.chpl 

BABEL_TESTNAMES = \
  args arrays inherit strings

EXTRA_DIST += $(BABEL_TESTS)

if ENABLE_INTEROP_REGRESSION
TESTS += $(BABEL_TESTS)
# Hmm.. apparently, this is not the same as the above
## BABEL_TESTS = args arrays strings
## $(BABEL_TESTS:%=$(INTEROP_DIR)/%.babel)

TEST_EXTENSIONS += .chpl
CHPL_LOG_COMPILER = sh 
# FIXME:
#
# On parallel make: Apparently my nice hack to pass through the jobs
# pipe does not work too well. We therefore use -j1 to force each
# testcase to build serially if make check is run with -jN.
#AM_BABEL_LOG_FLAGS = $(builddir)/regression/interop/driver.sh $(MAKE) -$(MAKEFLAGS)
AM_CHPL_LOG_FLAGS = $(builddir)/regression/interop/driver.sh $(MAKE) -j1 --

# This target will be made prior to the tests. We use it to compile
# regression/output and all the server libraries that are copied over
# from Babel
if BABEL_LANG_C # can't do much without C
check_DATA = $(builddir)/regression/interop/output/libC/GNUmakefile
check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libC/libimpl.la)

if BABEL_LANG_CXX
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libCxx/libimpl.la)
endif

if BABEL_LANG_F77
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libF77/libimpl.la)
endif

if BABEL_LANG_F90
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libF90/libimpl.la)
endif

if BABEL_LANG_F03
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libF03/libimpl.la)
endif

if BABEL_LANG_JAVA
  check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libJava/libimpl.la)
endif

if BABEL_LANG_PYTHON
check_DATA += $(builddir)/$(BABEL_TESTNAMES:%=regression/interop/%/libPython/libimpl1.la)
endif
endif

$(builddir)/regression/interop/output/libC/GNUmakefile: $(builddir)/regression/interop/build-tracker.sh
	sh $< $(MAKE) $(MAKEFLAGS)

$(builddir)/regression/interop/%/libimpl.la: $(builddir)/regression/interop/build-server.sh
	sh $< $@ $(MAKE) $(MAKEFLAGS)

$(builddir)/regression/interop/%/libimpl1.la: $(builddir)/regression/interop/build-server.sh
	sh $< $@ $(MAKE) $(MAKEFLAGS)


# ----------------------------------------------------------------------
# This is an alternate way of invoking the regression tests via gantlet
# End-users should use `make check' instead.
# This prints better statistics about broken tests
RUNPYTEST = env PYTHONPATH=$$PYTHONPATH:@BABEL_SRCDIR@/regression $(PYTHON) \
		@BABEL_SRCDIR@/regression/gantlet/commandline.py \
		-d -k$(PACKAGE) #-c$(host)

STATIC_TESTS := $(filter-out %.testresult, $(shell echo $(builddir)/regression/interop/*/run*/run*))
ALLTESTS = $(STATIC_TESTS)

run-gantlet: # check
	if test "X$$PROFILE_NAME" = X; then \
	    PROFILE_NAME="$(host)"; \
        fi; \
	if test "X$(SESSION)" != X; then \
	    session_name="$(SESSION)"; \
        else  \
            session_name="default_$$CHECK_COMMAND"; \
        fi; \
	echo "" $(RUNPYTEST) -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" \$$\(ALLTESTS\) ;\
	$(RUNPYTEST) -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" $(ALLTESTS) ;

run-gantlet-gui: # check
	if test "X$$PROFILE_NAME" = X; then \
	    PROFILE_NAME="$(host)"; \
        fi; \
	if test "X$(SESSION)" != X; then \
	    session_name="$(SESSION)"; \
        else  \
            session_name="default_$$CHECK_COMMAND"; \
        fi; \
	echo "" $(RUNPYTEST) -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" \$$\(ALLTESTS\) ;\
	$(RUNPYTEST) -g -p "$$PROFILE_NAME" $(PYFLAGS) "$$session_name" $(ALLTESTS) ;


# ----------------------------------------------------------------------

endif
