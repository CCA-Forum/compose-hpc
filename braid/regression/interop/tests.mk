# List generated by ../compose-hpc/braid/regression/interop/gen-test-deps.sh on Fri Feb  1 16:06:30 PST 2013

# args
# ------------------

# client: runChapel
regression/interop/args/runChapel/runChapel2Python.sh regression/interop/args/runChapel/runChapel2Java.sh regression/interop/args/runChapel/runChapel2F90.sh regression/interop/args/runChapel/runChapel2F77.sh regression/interop/args/runChapel/runChapel2F03.sh regression/interop/args/runChapel/runChapel2Cxx.sh regression/interop/args/runChapel/runChapel2C.sh regression/interop/args/runChapel/runChapel2Chapel.sh : regression/interop/args/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runChapel/client.lock regression/interop/args/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/args/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/args/runUPC/runUPC2Python.sh regression/interop/args/runUPC/runUPC2Java.sh regression/interop/args/runUPC/runUPC2F90.sh regression/interop/args/runUPC/runUPC2F77.sh regression/interop/args/runUPC/runUPC2F03.sh regression/interop/args/runUPC/runUPC2Cxx.sh regression/interop/args/runUPC/runUPC2C.sh regression/interop/args/runUPC/runUPC2Chapel.sh : regression/interop/args/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runUPC/client.lock regression/interop/args/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/args/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/args/runC/runC2Python.sh regression/interop/args/runC/runC2Java.sh regression/interop/args/runC/runC2F90.sh regression/interop/args/runC/runC2F77.sh regression/interop/args/runC/runC2F03.sh regression/interop/args/runC/runC2Cxx.sh regression/interop/args/runC/runC2C.sh regression/interop/args/runC/runC2Chapel.sh : regression/interop/args/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runC/client.lock regression/interop/args/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runC/client-stamp; \
	  fi; \
	fi

regression/interop/args/runC/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/args/runCxx/runCxx2Python.sh regression/interop/args/runCxx/runCxx2Java.sh regression/interop/args/runCxx/runCxx2F90.sh regression/interop/args/runCxx/runCxx2F77.sh regression/interop/args/runCxx/runCxx2F03.sh regression/interop/args/runCxx/runCxx2Cxx.sh regression/interop/args/runCxx/runCxx2C.sh regression/interop/args/runCxx/runCxx2Chapel.sh : regression/interop/args/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runCxx/client.lock regression/interop/args/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/args/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/args/runF03/runF032Python.sh regression/interop/args/runF03/runF032Java.sh regression/interop/args/runF03/runF032F90.sh regression/interop/args/runF03/runF032F77.sh regression/interop/args/runF03/runF032F03.sh regression/interop/args/runF03/runF032Cxx.sh regression/interop/args/runF03/runF032C.sh regression/interop/args/runF03/runF032Chapel.sh : regression/interop/args/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runF03/client.lock regression/interop/args/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/args/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/args/runF77/runF772Python.sh regression/interop/args/runF77/runF772Java.sh regression/interop/args/runF77/runF772F90.sh regression/interop/args/runF77/runF772F77.sh regression/interop/args/runF77/runF772F03.sh regression/interop/args/runF77/runF772Cxx.sh regression/interop/args/runF77/runF772C.sh regression/interop/args/runF77/runF772Chapel.sh : regression/interop/args/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runF77/client.lock regression/interop/args/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/args/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/args/runF90/runF902Python.sh regression/interop/args/runF90/runF902Java.sh regression/interop/args/runF90/runF902F90.sh regression/interop/args/runF90/runF902F77.sh regression/interop/args/runF90/runF902F03.sh regression/interop/args/runF90/runF902Cxx.sh regression/interop/args/runF90/runF902C.sh regression/interop/args/runF90/runF902Chapel.sh : regression/interop/args/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runF90/client.lock regression/interop/args/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/args/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/args/runJava/runJava2Python.sh regression/interop/args/runJava/runJava2Java.sh regression/interop/args/runJava/runJava2F90.sh regression/interop/args/runJava/runJava2F77.sh regression/interop/args/runJava/runJava2F03.sh regression/interop/args/runJava/runJava2Cxx.sh regression/interop/args/runJava/runJava2C.sh regression/interop/args/runJava/runJava2Chapel.sh : regression/interop/args/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runJava/client.lock regression/interop/args/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/args/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/args/runPython/runPython2Python.sh regression/interop/args/runPython/runPython2Java.sh regression/interop/args/runPython/runPython2F90.sh regression/interop/args/runPython/runPython2F77.sh regression/interop/args/runPython/runPython2F03.sh regression/interop/args/runPython/runPython2Cxx.sh regression/interop/args/runPython/runPython2C.sh regression/interop/args/runPython/runPython2Chapel.sh : regression/interop/args/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runPython/client.lock regression/interop/args/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/args/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/args/libPython/libimpl2.la regression/interop/args/libJava/libimpl.la regression/interop/args/libF90/libimpl.la regression/interop/args/libF77/libimpl.la regression/interop/args/libF03/libimpl.la regression/interop/args/libCxx/libimpl.la regression/interop/args/libC/libimpl.la regression/interop/args/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/args/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/args/runSIDL/client.lock regression/interop/args/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/args/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/args/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/args/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/args/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/args/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/args/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/args/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# arrays
# ------------------

# client: runChapel
regression/interop/arrays/runChapel/runChapel2Python.sh regression/interop/arrays/runChapel/runChapel2Java.sh regression/interop/arrays/runChapel/runChapel2F90.sh regression/interop/arrays/runChapel/runChapel2F77.sh regression/interop/arrays/runChapel/runChapel2F03.sh regression/interop/arrays/runChapel/runChapel2Cxx.sh regression/interop/arrays/runChapel/runChapel2C.sh : regression/interop/arrays/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runChapel/client.lock regression/interop/arrays/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/arrays/runUPC/runUPC2Python.sh regression/interop/arrays/runUPC/runUPC2Java.sh regression/interop/arrays/runUPC/runUPC2F90.sh regression/interop/arrays/runUPC/runUPC2F77.sh regression/interop/arrays/runUPC/runUPC2F03.sh regression/interop/arrays/runUPC/runUPC2Cxx.sh regression/interop/arrays/runUPC/runUPC2C.sh : regression/interop/arrays/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runUPC/client.lock regression/interop/arrays/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/arrays/runC/runC2Python.sh regression/interop/arrays/runC/runC2Java.sh regression/interop/arrays/runC/runC2F90.sh regression/interop/arrays/runC/runC2F77.sh regression/interop/arrays/runC/runC2F03.sh regression/interop/arrays/runC/runC2Cxx.sh regression/interop/arrays/runC/runC2C.sh : regression/interop/arrays/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runC/client.lock regression/interop/arrays/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runC/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runC/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/arrays/runCxx/runCxx2Python.sh regression/interop/arrays/runCxx/runCxx2Java.sh regression/interop/arrays/runCxx/runCxx2F90.sh regression/interop/arrays/runCxx/runCxx2F77.sh regression/interop/arrays/runCxx/runCxx2F03.sh regression/interop/arrays/runCxx/runCxx2Cxx.sh regression/interop/arrays/runCxx/runCxx2C.sh : regression/interop/arrays/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runCxx/client.lock regression/interop/arrays/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/arrays/runF03/runF032Python.sh regression/interop/arrays/runF03/runF032Java.sh regression/interop/arrays/runF03/runF032F90.sh regression/interop/arrays/runF03/runF032F77.sh regression/interop/arrays/runF03/runF032F03.sh regression/interop/arrays/runF03/runF032Cxx.sh regression/interop/arrays/runF03/runF032C.sh : regression/interop/arrays/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runF03/client.lock regression/interop/arrays/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/arrays/runF77/runF772Python.sh regression/interop/arrays/runF77/runF772Java.sh regression/interop/arrays/runF77/runF772F90.sh regression/interop/arrays/runF77/runF772F77.sh regression/interop/arrays/runF77/runF772F03.sh regression/interop/arrays/runF77/runF772Cxx.sh regression/interop/arrays/runF77/runF772C.sh : regression/interop/arrays/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runF77/client.lock regression/interop/arrays/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/arrays/runF90/runF902Python.sh regression/interop/arrays/runF90/runF902Java.sh regression/interop/arrays/runF90/runF902F90.sh regression/interop/arrays/runF90/runF902F77.sh regression/interop/arrays/runF90/runF902F03.sh regression/interop/arrays/runF90/runF902Cxx.sh regression/interop/arrays/runF90/runF902C.sh : regression/interop/arrays/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runF90/client.lock regression/interop/arrays/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/arrays/runJava/runJava2Python.sh regression/interop/arrays/runJava/runJava2Java.sh regression/interop/arrays/runJava/runJava2F90.sh regression/interop/arrays/runJava/runJava2F77.sh regression/interop/arrays/runJava/runJava2F03.sh regression/interop/arrays/runJava/runJava2Cxx.sh regression/interop/arrays/runJava/runJava2C.sh : regression/interop/arrays/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runJava/client.lock regression/interop/arrays/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/arrays/runPython/runPython2Python.sh regression/interop/arrays/runPython/runPython2Java.sh regression/interop/arrays/runPython/runPython2F90.sh regression/interop/arrays/runPython/runPython2F77.sh regression/interop/arrays/runPython/runPython2F03.sh regression/interop/arrays/runPython/runPython2Cxx.sh regression/interop/arrays/runPython/runPython2C.sh : regression/interop/arrays/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runPython/client.lock regression/interop/arrays/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/arrays/libPython/libimpl2.la regression/interop/arrays/libJava/libimpl.la regression/interop/arrays/libF90/libimpl.la regression/interop/arrays/libF77/libimpl.la regression/interop/arrays/libF03/libimpl.la regression/interop/arrays/libCxx/libimpl.la regression/interop/arrays/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/arrays/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/arrays/runSIDL/client.lock regression/interop/arrays/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/arrays/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/arrays/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/arrays/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/arrays/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/arrays/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/arrays/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/arrays/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# construct
# ------------------


# contracts
# ------------------

# client: runChapel
regression/interop/contracts/runChapel/runChapel2Python.sh regression/interop/contracts/runChapel/runChapel2Java.sh regression/interop/contracts/runChapel/runChapel2F90.sh regression/interop/contracts/runChapel/runChapel2F77.sh regression/interop/contracts/runChapel/runChapel2F03.sh regression/interop/contracts/runChapel/runChapel2Cxx.sh regression/interop/contracts/runChapel/runChapel2C.sh regression/interop/contracts/runChapel/runChapel2Chapel.sh : regression/interop/contracts/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runChapel/client.lock regression/interop/contracts/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/contracts/runUPC/runUPC2Python.sh regression/interop/contracts/runUPC/runUPC2Java.sh regression/interop/contracts/runUPC/runUPC2F90.sh regression/interop/contracts/runUPC/runUPC2F77.sh regression/interop/contracts/runUPC/runUPC2F03.sh regression/interop/contracts/runUPC/runUPC2Cxx.sh regression/interop/contracts/runUPC/runUPC2C.sh regression/interop/contracts/runUPC/runUPC2Chapel.sh : regression/interop/contracts/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runUPC/client.lock regression/interop/contracts/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/contracts/runC/runC2Python.sh regression/interop/contracts/runC/runC2Java.sh regression/interop/contracts/runC/runC2F90.sh regression/interop/contracts/runC/runC2F77.sh regression/interop/contracts/runC/runC2F03.sh regression/interop/contracts/runC/runC2Cxx.sh regression/interop/contracts/runC/runC2C.sh regression/interop/contracts/runC/runC2Chapel.sh : regression/interop/contracts/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runC/client.lock regression/interop/contracts/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runC/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runC/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/contracts/runCxx/runCxx2Python.sh regression/interop/contracts/runCxx/runCxx2Java.sh regression/interop/contracts/runCxx/runCxx2F90.sh regression/interop/contracts/runCxx/runCxx2F77.sh regression/interop/contracts/runCxx/runCxx2F03.sh regression/interop/contracts/runCxx/runCxx2Cxx.sh regression/interop/contracts/runCxx/runCxx2C.sh regression/interop/contracts/runCxx/runCxx2Chapel.sh : regression/interop/contracts/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runCxx/client.lock regression/interop/contracts/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/contracts/runF03/runF032Python.sh regression/interop/contracts/runF03/runF032Java.sh regression/interop/contracts/runF03/runF032F90.sh regression/interop/contracts/runF03/runF032F77.sh regression/interop/contracts/runF03/runF032F03.sh regression/interop/contracts/runF03/runF032Cxx.sh regression/interop/contracts/runF03/runF032C.sh regression/interop/contracts/runF03/runF032Chapel.sh : regression/interop/contracts/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runF03/client.lock regression/interop/contracts/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/contracts/runF77/runF772Python.sh regression/interop/contracts/runF77/runF772Java.sh regression/interop/contracts/runF77/runF772F90.sh regression/interop/contracts/runF77/runF772F77.sh regression/interop/contracts/runF77/runF772F03.sh regression/interop/contracts/runF77/runF772Cxx.sh regression/interop/contracts/runF77/runF772C.sh regression/interop/contracts/runF77/runF772Chapel.sh : regression/interop/contracts/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runF77/client.lock regression/interop/contracts/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/contracts/runF90/runF902Python.sh regression/interop/contracts/runF90/runF902Java.sh regression/interop/contracts/runF90/runF902F90.sh regression/interop/contracts/runF90/runF902F77.sh regression/interop/contracts/runF90/runF902F03.sh regression/interop/contracts/runF90/runF902Cxx.sh regression/interop/contracts/runF90/runF902C.sh regression/interop/contracts/runF90/runF902Chapel.sh : regression/interop/contracts/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runF90/client.lock regression/interop/contracts/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/contracts/runJava/runJava2Python.sh regression/interop/contracts/runJava/runJava2Java.sh regression/interop/contracts/runJava/runJava2F90.sh regression/interop/contracts/runJava/runJava2F77.sh regression/interop/contracts/runJava/runJava2F03.sh regression/interop/contracts/runJava/runJava2Cxx.sh regression/interop/contracts/runJava/runJava2C.sh regression/interop/contracts/runJava/runJava2Chapel.sh : regression/interop/contracts/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runJava/client.lock regression/interop/contracts/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/contracts/runPython/runPython2Python.sh regression/interop/contracts/runPython/runPython2Java.sh regression/interop/contracts/runPython/runPython2F90.sh regression/interop/contracts/runPython/runPython2F77.sh regression/interop/contracts/runPython/runPython2F03.sh regression/interop/contracts/runPython/runPython2Cxx.sh regression/interop/contracts/runPython/runPython2C.sh regression/interop/contracts/runPython/runPython2Chapel.sh : regression/interop/contracts/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runPython/client.lock regression/interop/contracts/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/contracts/libPython/libimpl2.la regression/interop/contracts/libJava/libimpl.la regression/interop/contracts/libF90/libimpl.la regression/interop/contracts/libF77/libimpl.la regression/interop/contracts/libF03/libimpl.la regression/interop/contracts/libCxx/libimpl.la regression/interop/contracts/libC/libimpl.la regression/interop/contracts/libChapel/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/contracts/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/contracts/runSIDL/client.lock regression/interop/contracts/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/contracts/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/contracts/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/contracts/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/contracts/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/contracts/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/contracts/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/contracts/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# enums
# ------------------

# client: runChapel
regression/interop/enums/runChapel/runChapel2Python.sh regression/interop/enums/runChapel/runChapel2Java.sh regression/interop/enums/runChapel/runChapel2F90.sh regression/interop/enums/runChapel/runChapel2F77.sh regression/interop/enums/runChapel/runChapel2F03.sh regression/interop/enums/runChapel/runChapel2Cxx.sh regression/interop/enums/runChapel/runChapel2C.sh : regression/interop/enums/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runChapel/client.lock regression/interop/enums/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/enums/runUPC/runUPC2Python.sh regression/interop/enums/runUPC/runUPC2Java.sh regression/interop/enums/runUPC/runUPC2F90.sh regression/interop/enums/runUPC/runUPC2F77.sh regression/interop/enums/runUPC/runUPC2F03.sh regression/interop/enums/runUPC/runUPC2Cxx.sh regression/interop/enums/runUPC/runUPC2C.sh : regression/interop/enums/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runUPC/client.lock regression/interop/enums/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/enums/runC/runC2Python.sh regression/interop/enums/runC/runC2Java.sh regression/interop/enums/runC/runC2F90.sh regression/interop/enums/runC/runC2F77.sh regression/interop/enums/runC/runC2F03.sh regression/interop/enums/runC/runC2Cxx.sh regression/interop/enums/runC/runC2C.sh : regression/interop/enums/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runC/client.lock regression/interop/enums/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runC/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runC/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/enums/runCxx/runCxx2Python.sh regression/interop/enums/runCxx/runCxx2Java.sh regression/interop/enums/runCxx/runCxx2F90.sh regression/interop/enums/runCxx/runCxx2F77.sh regression/interop/enums/runCxx/runCxx2F03.sh regression/interop/enums/runCxx/runCxx2Cxx.sh regression/interop/enums/runCxx/runCxx2C.sh : regression/interop/enums/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runCxx/client.lock regression/interop/enums/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/enums/runF03/runF032Python.sh regression/interop/enums/runF03/runF032Java.sh regression/interop/enums/runF03/runF032F90.sh regression/interop/enums/runF03/runF032F77.sh regression/interop/enums/runF03/runF032F03.sh regression/interop/enums/runF03/runF032Cxx.sh regression/interop/enums/runF03/runF032C.sh : regression/interop/enums/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runF03/client.lock regression/interop/enums/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/enums/runF77/runF772Python.sh regression/interop/enums/runF77/runF772Java.sh regression/interop/enums/runF77/runF772F90.sh regression/interop/enums/runF77/runF772F77.sh regression/interop/enums/runF77/runF772F03.sh regression/interop/enums/runF77/runF772Cxx.sh regression/interop/enums/runF77/runF772C.sh : regression/interop/enums/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runF77/client.lock regression/interop/enums/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/enums/runF90/runF902Python.sh regression/interop/enums/runF90/runF902Java.sh regression/interop/enums/runF90/runF902F90.sh regression/interop/enums/runF90/runF902F77.sh regression/interop/enums/runF90/runF902F03.sh regression/interop/enums/runF90/runF902Cxx.sh regression/interop/enums/runF90/runF902C.sh : regression/interop/enums/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runF90/client.lock regression/interop/enums/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/enums/runJava/runJava2Python.sh regression/interop/enums/runJava/runJava2Java.sh regression/interop/enums/runJava/runJava2F90.sh regression/interop/enums/runJava/runJava2F77.sh regression/interop/enums/runJava/runJava2F03.sh regression/interop/enums/runJava/runJava2Cxx.sh regression/interop/enums/runJava/runJava2C.sh : regression/interop/enums/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runJava/client.lock regression/interop/enums/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/enums/runPython/runPython2Python.sh regression/interop/enums/runPython/runPython2Java.sh regression/interop/enums/runPython/runPython2F90.sh regression/interop/enums/runPython/runPython2F77.sh regression/interop/enums/runPython/runPython2F03.sh regression/interop/enums/runPython/runPython2Cxx.sh regression/interop/enums/runPython/runPython2C.sh : regression/interop/enums/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runPython/client.lock regression/interop/enums/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/enums/libPython/libimpl2.la regression/interop/enums/libJava/libimpl.la regression/interop/enums/libF90/libimpl.la regression/interop/enums/libF77/libimpl.la regression/interop/enums/libF03/libimpl.la regression/interop/enums/libCxx/libimpl.la regression/interop/enums/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/enums/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/enums/runSIDL/client.lock regression/interop/enums/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/enums/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/enums/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/enums/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/enums/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/enums/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/enums/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/enums/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# exceptions
# ------------------

# client: runChapel
regression/interop/exceptions/runChapel/runChapel2Python.sh regression/interop/exceptions/runChapel/runChapel2Java.sh regression/interop/exceptions/runChapel/runChapel2F90.sh regression/interop/exceptions/runChapel/runChapel2F77.sh regression/interop/exceptions/runChapel/runChapel2F03.sh regression/interop/exceptions/runChapel/runChapel2Cxx.sh regression/interop/exceptions/runChapel/runChapel2C.sh : regression/interop/exceptions/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runChapel/client.lock regression/interop/exceptions/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/exceptions/runUPC/runUPC2Python.sh regression/interop/exceptions/runUPC/runUPC2Java.sh regression/interop/exceptions/runUPC/runUPC2F90.sh regression/interop/exceptions/runUPC/runUPC2F77.sh regression/interop/exceptions/runUPC/runUPC2F03.sh regression/interop/exceptions/runUPC/runUPC2Cxx.sh regression/interop/exceptions/runUPC/runUPC2C.sh : regression/interop/exceptions/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runUPC/client.lock regression/interop/exceptions/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/exceptions/runC/runC2Python.sh regression/interop/exceptions/runC/runC2Java.sh regression/interop/exceptions/runC/runC2F90.sh regression/interop/exceptions/runC/runC2F77.sh regression/interop/exceptions/runC/runC2F03.sh regression/interop/exceptions/runC/runC2Cxx.sh regression/interop/exceptions/runC/runC2C.sh : regression/interop/exceptions/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runC/client.lock regression/interop/exceptions/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runC/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runC/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/exceptions/runCxx/runCxx2Python.sh regression/interop/exceptions/runCxx/runCxx2Java.sh regression/interop/exceptions/runCxx/runCxx2F90.sh regression/interop/exceptions/runCxx/runCxx2F77.sh regression/interop/exceptions/runCxx/runCxx2F03.sh regression/interop/exceptions/runCxx/runCxx2Cxx.sh regression/interop/exceptions/runCxx/runCxx2C.sh : regression/interop/exceptions/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runCxx/client.lock regression/interop/exceptions/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/exceptions/runF03/runF032Python.sh regression/interop/exceptions/runF03/runF032Java.sh regression/interop/exceptions/runF03/runF032F90.sh regression/interop/exceptions/runF03/runF032F77.sh regression/interop/exceptions/runF03/runF032F03.sh regression/interop/exceptions/runF03/runF032Cxx.sh regression/interop/exceptions/runF03/runF032C.sh : regression/interop/exceptions/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runF03/client.lock regression/interop/exceptions/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/exceptions/runF77/runF772Python.sh regression/interop/exceptions/runF77/runF772Java.sh regression/interop/exceptions/runF77/runF772F90.sh regression/interop/exceptions/runF77/runF772F77.sh regression/interop/exceptions/runF77/runF772F03.sh regression/interop/exceptions/runF77/runF772Cxx.sh regression/interop/exceptions/runF77/runF772C.sh : regression/interop/exceptions/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runF77/client.lock regression/interop/exceptions/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/exceptions/runF90/runF902Python.sh regression/interop/exceptions/runF90/runF902Java.sh regression/interop/exceptions/runF90/runF902F90.sh regression/interop/exceptions/runF90/runF902F77.sh regression/interop/exceptions/runF90/runF902F03.sh regression/interop/exceptions/runF90/runF902Cxx.sh regression/interop/exceptions/runF90/runF902C.sh : regression/interop/exceptions/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runF90/client.lock regression/interop/exceptions/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/exceptions/runJava/runJava2Python.sh regression/interop/exceptions/runJava/runJava2Java.sh regression/interop/exceptions/runJava/runJava2F90.sh regression/interop/exceptions/runJava/runJava2F77.sh regression/interop/exceptions/runJava/runJava2F03.sh regression/interop/exceptions/runJava/runJava2Cxx.sh regression/interop/exceptions/runJava/runJava2C.sh : regression/interop/exceptions/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runJava/client.lock regression/interop/exceptions/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/exceptions/runPython/runPython2Python.sh regression/interop/exceptions/runPython/runPython2Java.sh regression/interop/exceptions/runPython/runPython2F90.sh regression/interop/exceptions/runPython/runPython2F77.sh regression/interop/exceptions/runPython/runPython2F03.sh regression/interop/exceptions/runPython/runPython2Cxx.sh regression/interop/exceptions/runPython/runPython2C.sh : regression/interop/exceptions/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runPython/client.lock regression/interop/exceptions/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/exceptions/libPython/libimpl2.la regression/interop/exceptions/libJava/libimpl.la regression/interop/exceptions/libF90/libimpl.la regression/interop/exceptions/libF77/libimpl.la regression/interop/exceptions/libF03/libimpl.la regression/interop/exceptions/libCxx/libimpl.la regression/interop/exceptions/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/exceptions/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/exceptions/runSIDL/client.lock regression/interop/exceptions/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/exceptions/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/exceptions/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/exceptions/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/exceptions/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/exceptions/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/exceptions/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/exceptions/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# hooks
# ------------------

# client: runChapel
regression/interop/hooks/runChapel/runChapel2Python.sh regression/interop/hooks/runChapel/runChapel2Java.sh regression/interop/hooks/runChapel/runChapel2F90.sh regression/interop/hooks/runChapel/runChapel2F77.sh regression/interop/hooks/runChapel/runChapel2F03.sh regression/interop/hooks/runChapel/runChapel2Cxx.sh regression/interop/hooks/runChapel/runChapel2C.sh : regression/interop/hooks/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runChapel/client.lock regression/interop/hooks/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/hooks/runUPC/runUPC2Python.sh regression/interop/hooks/runUPC/runUPC2Java.sh regression/interop/hooks/runUPC/runUPC2F90.sh regression/interop/hooks/runUPC/runUPC2F77.sh regression/interop/hooks/runUPC/runUPC2F03.sh regression/interop/hooks/runUPC/runUPC2Cxx.sh regression/interop/hooks/runUPC/runUPC2C.sh : regression/interop/hooks/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runUPC/client.lock regression/interop/hooks/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/hooks/runC/runC2Python.sh regression/interop/hooks/runC/runC2Java.sh regression/interop/hooks/runC/runC2F90.sh regression/interop/hooks/runC/runC2F77.sh regression/interop/hooks/runC/runC2F03.sh regression/interop/hooks/runC/runC2Cxx.sh regression/interop/hooks/runC/runC2C.sh : regression/interop/hooks/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runC/client.lock regression/interop/hooks/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runC/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runC/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/hooks/runCxx/runCxx2Python.sh regression/interop/hooks/runCxx/runCxx2Java.sh regression/interop/hooks/runCxx/runCxx2F90.sh regression/interop/hooks/runCxx/runCxx2F77.sh regression/interop/hooks/runCxx/runCxx2F03.sh regression/interop/hooks/runCxx/runCxx2Cxx.sh regression/interop/hooks/runCxx/runCxx2C.sh : regression/interop/hooks/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runCxx/client.lock regression/interop/hooks/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/hooks/runF03/runF032Python.sh regression/interop/hooks/runF03/runF032Java.sh regression/interop/hooks/runF03/runF032F90.sh regression/interop/hooks/runF03/runF032F77.sh regression/interop/hooks/runF03/runF032F03.sh regression/interop/hooks/runF03/runF032Cxx.sh regression/interop/hooks/runF03/runF032C.sh : regression/interop/hooks/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runF03/client.lock regression/interop/hooks/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/hooks/runF77/runF772Python.sh regression/interop/hooks/runF77/runF772Java.sh regression/interop/hooks/runF77/runF772F90.sh regression/interop/hooks/runF77/runF772F77.sh regression/interop/hooks/runF77/runF772F03.sh regression/interop/hooks/runF77/runF772Cxx.sh regression/interop/hooks/runF77/runF772C.sh : regression/interop/hooks/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runF77/client.lock regression/interop/hooks/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/hooks/runF90/runF902Python.sh regression/interop/hooks/runF90/runF902Java.sh regression/interop/hooks/runF90/runF902F90.sh regression/interop/hooks/runF90/runF902F77.sh regression/interop/hooks/runF90/runF902F03.sh regression/interop/hooks/runF90/runF902Cxx.sh regression/interop/hooks/runF90/runF902C.sh : regression/interop/hooks/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runF90/client.lock regression/interop/hooks/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/hooks/runJava/runJava2Python.sh regression/interop/hooks/runJava/runJava2Java.sh regression/interop/hooks/runJava/runJava2F90.sh regression/interop/hooks/runJava/runJava2F77.sh regression/interop/hooks/runJava/runJava2F03.sh regression/interop/hooks/runJava/runJava2Cxx.sh regression/interop/hooks/runJava/runJava2C.sh : regression/interop/hooks/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runJava/client.lock regression/interop/hooks/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/hooks/runPython/runPython2Python.sh regression/interop/hooks/runPython/runPython2Java.sh regression/interop/hooks/runPython/runPython2F90.sh regression/interop/hooks/runPython/runPython2F77.sh regression/interop/hooks/runPython/runPython2F03.sh regression/interop/hooks/runPython/runPython2Cxx.sh regression/interop/hooks/runPython/runPython2C.sh : regression/interop/hooks/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runPython/client.lock regression/interop/hooks/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/hooks/libPython/libimpl2.la regression/interop/hooks/libJava/libimpl.la regression/interop/hooks/libF90/libimpl.la regression/interop/hooks/libF77/libimpl.la regression/interop/hooks/libF03/libimpl.la regression/interop/hooks/libCxx/libimpl.la regression/interop/hooks/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/hooks/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/hooks/runSIDL/client.lock regression/interop/hooks/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/hooks/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/hooks/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/hooks/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/hooks/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/hooks/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/hooks/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/hooks/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# inherit
# ------------------

# client: runChapel
regression/interop/inherit/runChapel/runChapel2Python.sh regression/interop/inherit/runChapel/runChapel2Java.sh regression/interop/inherit/runChapel/runChapel2F90.sh regression/interop/inherit/runChapel/runChapel2F77.sh regression/interop/inherit/runChapel/runChapel2F03.sh regression/interop/inherit/runChapel/runChapel2Cxx.sh regression/interop/inherit/runChapel/runChapel2C.sh : regression/interop/inherit/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runChapel/client.lock regression/interop/inherit/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/inherit/runUPC/runUPC2Python.sh regression/interop/inherit/runUPC/runUPC2Java.sh regression/interop/inherit/runUPC/runUPC2F90.sh regression/interop/inherit/runUPC/runUPC2F77.sh regression/interop/inherit/runUPC/runUPC2F03.sh regression/interop/inherit/runUPC/runUPC2Cxx.sh regression/interop/inherit/runUPC/runUPC2C.sh : regression/interop/inherit/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runUPC/client.lock regression/interop/inherit/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/inherit/runC/runC2Python.sh regression/interop/inherit/runC/runC2Java.sh regression/interop/inherit/runC/runC2F90.sh regression/interop/inherit/runC/runC2F77.sh regression/interop/inherit/runC/runC2F03.sh regression/interop/inherit/runC/runC2Cxx.sh regression/interop/inherit/runC/runC2C.sh : regression/interop/inherit/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runC/client.lock regression/interop/inherit/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runC/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runC/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/inherit/runCxx/runCxx2Python.sh regression/interop/inherit/runCxx/runCxx2Java.sh regression/interop/inherit/runCxx/runCxx2F90.sh regression/interop/inherit/runCxx/runCxx2F77.sh regression/interop/inherit/runCxx/runCxx2F03.sh regression/interop/inherit/runCxx/runCxx2Cxx.sh regression/interop/inherit/runCxx/runCxx2C.sh : regression/interop/inherit/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runCxx/client.lock regression/interop/inherit/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/inherit/runF03/runF032Python.sh regression/interop/inherit/runF03/runF032Java.sh regression/interop/inherit/runF03/runF032F90.sh regression/interop/inherit/runF03/runF032F77.sh regression/interop/inherit/runF03/runF032F03.sh regression/interop/inherit/runF03/runF032Cxx.sh regression/interop/inherit/runF03/runF032C.sh : regression/interop/inherit/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runF03/client.lock regression/interop/inherit/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/inherit/runF77/runF772Python.sh regression/interop/inherit/runF77/runF772Java.sh regression/interop/inherit/runF77/runF772F90.sh regression/interop/inherit/runF77/runF772F77.sh regression/interop/inherit/runF77/runF772F03.sh regression/interop/inherit/runF77/runF772Cxx.sh regression/interop/inherit/runF77/runF772C.sh : regression/interop/inherit/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runF77/client.lock regression/interop/inherit/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/inherit/runF90/runF902Python.sh regression/interop/inherit/runF90/runF902Java.sh regression/interop/inherit/runF90/runF902F90.sh regression/interop/inherit/runF90/runF902F77.sh regression/interop/inherit/runF90/runF902F03.sh regression/interop/inherit/runF90/runF902Cxx.sh regression/interop/inherit/runF90/runF902C.sh : regression/interop/inherit/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runF90/client.lock regression/interop/inherit/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/inherit/runJava/runJava2Python.sh regression/interop/inherit/runJava/runJava2Java.sh regression/interop/inherit/runJava/runJava2F90.sh regression/interop/inherit/runJava/runJava2F77.sh regression/interop/inherit/runJava/runJava2F03.sh regression/interop/inherit/runJava/runJava2Cxx.sh regression/interop/inherit/runJava/runJava2C.sh : regression/interop/inherit/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runJava/client.lock regression/interop/inherit/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/inherit/runPython/runPython2Python.sh regression/interop/inherit/runPython/runPython2Java.sh regression/interop/inherit/runPython/runPython2F90.sh regression/interop/inherit/runPython/runPython2F77.sh regression/interop/inherit/runPython/runPython2F03.sh regression/interop/inherit/runPython/runPython2Cxx.sh regression/interop/inherit/runPython/runPython2C.sh : regression/interop/inherit/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runPython/client.lock regression/interop/inherit/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/inherit/libPython/libimpl2.la regression/interop/inherit/libJava/libimpl.la regression/interop/inherit/libF90/libimpl.la regression/interop/inherit/libF77/libimpl.la regression/interop/inherit/libF03/libimpl.la regression/interop/inherit/libCxx/libimpl.la regression/interop/inherit/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/inherit/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/inherit/runSIDL/client.lock regression/interop/inherit/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/inherit/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/inherit/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/inherit/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/inherit/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/inherit/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/inherit/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/inherit/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# invariants
# ------------------


# objarg
# ------------------

# client: runChapel
regression/interop/objarg/runChapel/runChapel2Python.sh regression/interop/objarg/runChapel/runChapel2Java.sh regression/interop/objarg/runChapel/runChapel2F90.sh regression/interop/objarg/runChapel/runChapel2F03.sh regression/interop/objarg/runChapel/runChapel2Cxx.sh regression/interop/objarg/runChapel/runChapel2C.sh : regression/interop/objarg/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runChapel/client.lock regression/interop/objarg/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/objarg/runUPC/runUPC2Python.sh regression/interop/objarg/runUPC/runUPC2Java.sh regression/interop/objarg/runUPC/runUPC2F90.sh regression/interop/objarg/runUPC/runUPC2F03.sh regression/interop/objarg/runUPC/runUPC2Cxx.sh regression/interop/objarg/runUPC/runUPC2C.sh : regression/interop/objarg/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runUPC/client.lock regression/interop/objarg/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/objarg/runC/runC2Python.sh regression/interop/objarg/runC/runC2Java.sh regression/interop/objarg/runC/runC2F90.sh regression/interop/objarg/runC/runC2F03.sh regression/interop/objarg/runC/runC2Cxx.sh regression/interop/objarg/runC/runC2C.sh : regression/interop/objarg/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runC/client.lock regression/interop/objarg/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runC/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runC/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/objarg/runCxx/runCxx2Python.sh regression/interop/objarg/runCxx/runCxx2Java.sh regression/interop/objarg/runCxx/runCxx2F90.sh regression/interop/objarg/runCxx/runCxx2F03.sh regression/interop/objarg/runCxx/runCxx2Cxx.sh regression/interop/objarg/runCxx/runCxx2C.sh : regression/interop/objarg/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runCxx/client.lock regression/interop/objarg/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/objarg/runF03/runF032Python.sh regression/interop/objarg/runF03/runF032Java.sh regression/interop/objarg/runF03/runF032F90.sh regression/interop/objarg/runF03/runF032F03.sh regression/interop/objarg/runF03/runF032Cxx.sh regression/interop/objarg/runF03/runF032C.sh : regression/interop/objarg/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runF03/client.lock regression/interop/objarg/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/objarg/runJava/runJava2Python.sh regression/interop/objarg/runJava/runJava2Java.sh regression/interop/objarg/runJava/runJava2F90.sh regression/interop/objarg/runJava/runJava2F03.sh regression/interop/objarg/runJava/runJava2Cxx.sh regression/interop/objarg/runJava/runJava2C.sh : regression/interop/objarg/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runJava/client.lock regression/interop/objarg/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/objarg/runPython/runPython2Python.sh regression/interop/objarg/runPython/runPython2Java.sh regression/interop/objarg/runPython/runPython2F90.sh regression/interop/objarg/runPython/runPython2F03.sh regression/interop/objarg/runPython/runPython2Cxx.sh regression/interop/objarg/runPython/runPython2C.sh : regression/interop/objarg/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runPython/client.lock regression/interop/objarg/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/objarg/libPython/libimpl2.la regression/interop/objarg/libJava/libimpl.la regression/interop/objarg/libF90/libimpl.la regression/interop/objarg/libF03/libimpl.la regression/interop/objarg/libCxx/libimpl.la regression/interop/objarg/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/objarg/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/objarg/runSIDL/client.lock regression/interop/objarg/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/objarg/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/objarg/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/objarg/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/objarg/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/objarg/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/objarg/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/objarg/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# ordering
# ------------------

# client: runChapel
regression/interop/ordering/runChapel/runChapel2Python.sh regression/interop/ordering/runChapel/runChapel2Java.sh regression/interop/ordering/runChapel/runChapel2F90.sh regression/interop/ordering/runChapel/runChapel2F77.sh regression/interop/ordering/runChapel/runChapel2F03.sh regression/interop/ordering/runChapel/runChapel2Cxx.sh regression/interop/ordering/runChapel/runChapel2C.sh : regression/interop/ordering/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runChapel/client.lock regression/interop/ordering/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/ordering/libPython/libimpl2.la regression/interop/ordering/libJava/libimpl.la regression/interop/ordering/libF90/libimpl.la regression/interop/ordering/libF77/libimpl.la regression/interop/ordering/libF03/libimpl.la regression/interop/ordering/libCxx/libimpl.la regression/interop/ordering/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/ordering/runUPC/runUPC2Python.sh regression/interop/ordering/runUPC/runUPC2Java.sh regression/interop/ordering/runUPC/runUPC2F90.sh regression/interop/ordering/runUPC/runUPC2F77.sh regression/interop/ordering/runUPC/runUPC2F03.sh regression/interop/ordering/runUPC/runUPC2Cxx.sh regression/interop/ordering/runUPC/runUPC2C.sh : regression/interop/ordering/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runUPC/client.lock regression/interop/ordering/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/ordering/libPython/libimpl2.la regression/interop/ordering/libJava/libimpl.la regression/interop/ordering/libF90/libimpl.la regression/interop/ordering/libF77/libimpl.la regression/interop/ordering/libF03/libimpl.la regression/interop/ordering/libCxx/libimpl.la regression/interop/ordering/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/ordering/runC/runC2Python.sh regression/interop/ordering/runC/runC2Java.sh regression/interop/ordering/runC/runC2F90.sh regression/interop/ordering/runC/runC2F77.sh regression/interop/ordering/runC/runC2F03.sh regression/interop/ordering/runC/runC2Cxx.sh regression/interop/ordering/runC/runC2C.sh : regression/interop/ordering/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runC/client.lock regression/interop/ordering/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runC/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runC/client-stamp: $(CLIENT_DEPS) regression/interop/ordering/libPython/libimpl2.la regression/interop/ordering/libJava/libimpl.la regression/interop/ordering/libF90/libimpl.la regression/interop/ordering/libF77/libimpl.la regression/interop/ordering/libF03/libimpl.la regression/interop/ordering/libCxx/libimpl.la regression/interop/ordering/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/ordering/runCxx/runCxx2Python.sh regression/interop/ordering/runCxx/runCxx2Java.sh regression/interop/ordering/runCxx/runCxx2F90.sh regression/interop/ordering/runCxx/runCxx2F77.sh regression/interop/ordering/runCxx/runCxx2F03.sh regression/interop/ordering/runCxx/runCxx2Cxx.sh regression/interop/ordering/runCxx/runCxx2C.sh : regression/interop/ordering/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runCxx/client.lock regression/interop/ordering/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/ordering/libPython/libimpl2.la regression/interop/ordering/libJava/libimpl.la regression/interop/ordering/libF90/libimpl.la regression/interop/ordering/libF77/libimpl.la regression/interop/ordering/libF03/libimpl.la regression/interop/ordering/libCxx/libimpl.la regression/interop/ordering/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/ordering/runJava/runJava2Python.sh regression/interop/ordering/runJava/runJava2Java.sh regression/interop/ordering/runJava/runJava2F90.sh regression/interop/ordering/runJava/runJava2F77.sh regression/interop/ordering/runJava/runJava2F03.sh regression/interop/ordering/runJava/runJava2Cxx.sh regression/interop/ordering/runJava/runJava2C.sh : regression/interop/ordering/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runJava/client.lock regression/interop/ordering/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/ordering/libPython/libimpl2.la regression/interop/ordering/libJava/libimpl.la regression/interop/ordering/libF90/libimpl.la regression/interop/ordering/libF77/libimpl.la regression/interop/ordering/libF03/libimpl.la regression/interop/ordering/libCxx/libimpl.la regression/interop/ordering/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/ordering/runPython/runPython2Python.sh regression/interop/ordering/runPython/runPython2Java.sh regression/interop/ordering/runPython/runPython2F90.sh regression/interop/ordering/runPython/runPython2F77.sh regression/interop/ordering/runPython/runPython2F03.sh regression/interop/ordering/runPython/runPython2Cxx.sh regression/interop/ordering/runPython/runPython2C.sh : regression/interop/ordering/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runPython/client.lock regression/interop/ordering/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/ordering/libPython/libimpl2.la regression/interop/ordering/libJava/libimpl.la regression/interop/ordering/libF90/libimpl.la regression/interop/ordering/libF77/libimpl.la regression/interop/ordering/libF03/libimpl.la regression/interop/ordering/libCxx/libimpl.la regression/interop/ordering/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/ordering/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/ordering/runSIDL/client.lock regression/interop/ordering/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/ordering/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/ordering/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/ordering/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/ordering/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/ordering/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/ordering/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/ordering/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# output
# ------------------


# overload
# ------------------

# client: runChapel
regression/interop/overload/runChapel/runChapel2Python.sh regression/interop/overload/runChapel/runChapel2Java.sh regression/interop/overload/runChapel/runChapel2F90.sh regression/interop/overload/runChapel/runChapel2F77.sh regression/interop/overload/runChapel/runChapel2F03.sh regression/interop/overload/runChapel/runChapel2Cxx.sh regression/interop/overload/runChapel/runChapel2C.sh : regression/interop/overload/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runChapel/client.lock regression/interop/overload/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/overload/runUPC/runUPC2Python.sh regression/interop/overload/runUPC/runUPC2Java.sh regression/interop/overload/runUPC/runUPC2F90.sh regression/interop/overload/runUPC/runUPC2F77.sh regression/interop/overload/runUPC/runUPC2F03.sh regression/interop/overload/runUPC/runUPC2Cxx.sh regression/interop/overload/runUPC/runUPC2C.sh : regression/interop/overload/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runUPC/client.lock regression/interop/overload/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/overload/runC/runC2Python.sh regression/interop/overload/runC/runC2Java.sh regression/interop/overload/runC/runC2F90.sh regression/interop/overload/runC/runC2F77.sh regression/interop/overload/runC/runC2F03.sh regression/interop/overload/runC/runC2Cxx.sh regression/interop/overload/runC/runC2C.sh : regression/interop/overload/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runC/client.lock regression/interop/overload/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runC/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runC/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/overload/runCxx/runCxx2Python.sh regression/interop/overload/runCxx/runCxx2Java.sh regression/interop/overload/runCxx/runCxx2F90.sh regression/interop/overload/runCxx/runCxx2F77.sh regression/interop/overload/runCxx/runCxx2F03.sh regression/interop/overload/runCxx/runCxx2Cxx.sh regression/interop/overload/runCxx/runCxx2C.sh : regression/interop/overload/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runCxx/client.lock regression/interop/overload/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/overload/runF03/runF032Python.sh regression/interop/overload/runF03/runF032Java.sh regression/interop/overload/runF03/runF032F90.sh regression/interop/overload/runF03/runF032F77.sh regression/interop/overload/runF03/runF032F03.sh regression/interop/overload/runF03/runF032Cxx.sh regression/interop/overload/runF03/runF032C.sh : regression/interop/overload/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runF03/client.lock regression/interop/overload/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/overload/runF77/runF772Python.sh regression/interop/overload/runF77/runF772Java.sh regression/interop/overload/runF77/runF772F90.sh regression/interop/overload/runF77/runF772F77.sh regression/interop/overload/runF77/runF772F03.sh regression/interop/overload/runF77/runF772Cxx.sh regression/interop/overload/runF77/runF772C.sh : regression/interop/overload/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runF77/client.lock regression/interop/overload/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/overload/runF90/runF902Python.sh regression/interop/overload/runF90/runF902Java.sh regression/interop/overload/runF90/runF902F90.sh regression/interop/overload/runF90/runF902F77.sh regression/interop/overload/runF90/runF902F03.sh regression/interop/overload/runF90/runF902Cxx.sh regression/interop/overload/runF90/runF902C.sh : regression/interop/overload/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runF90/client.lock regression/interop/overload/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/overload/runJava/runJava2Python.sh regression/interop/overload/runJava/runJava2Java.sh regression/interop/overload/runJava/runJava2F90.sh regression/interop/overload/runJava/runJava2F77.sh regression/interop/overload/runJava/runJava2F03.sh regression/interop/overload/runJava/runJava2Cxx.sh regression/interop/overload/runJava/runJava2C.sh : regression/interop/overload/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runJava/client.lock regression/interop/overload/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/overload/runPython/runPython2Python.sh regression/interop/overload/runPython/runPython2Java.sh regression/interop/overload/runPython/runPython2F90.sh regression/interop/overload/runPython/runPython2F77.sh regression/interop/overload/runPython/runPython2F03.sh regression/interop/overload/runPython/runPython2Cxx.sh regression/interop/overload/runPython/runPython2C.sh : regression/interop/overload/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runPython/client.lock regression/interop/overload/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/overload/libPython/libimpl2.la regression/interop/overload/libJava/libimpl.la regression/interop/overload/libF90/libimpl.la regression/interop/overload/libF77/libimpl.la regression/interop/overload/libF03/libimpl.la regression/interop/overload/libCxx/libimpl.la regression/interop/overload/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/overload/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/overload/runSIDL/client.lock regression/interop/overload/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/overload/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/overload/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/overload/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/overload/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/overload/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/overload/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/overload/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# sorting
# ------------------

# client: runChapel
regression/interop/sorting/runChapel/runChapel2Python.sh regression/interop/sorting/runChapel/runChapel2Java.sh regression/interop/sorting/runChapel/runChapel2F90.sh regression/interop/sorting/runChapel/runChapel2F77.sh regression/interop/sorting/runChapel/runChapel2F03.sh regression/interop/sorting/runChapel/runChapel2Cxx.sh regression/interop/sorting/runChapel/runChapel2C.sh : regression/interop/sorting/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runChapel/client.lock regression/interop/sorting/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/sorting/runUPC/runUPC2Python.sh regression/interop/sorting/runUPC/runUPC2Java.sh regression/interop/sorting/runUPC/runUPC2F90.sh regression/interop/sorting/runUPC/runUPC2F77.sh regression/interop/sorting/runUPC/runUPC2F03.sh regression/interop/sorting/runUPC/runUPC2Cxx.sh regression/interop/sorting/runUPC/runUPC2C.sh : regression/interop/sorting/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runUPC/client.lock regression/interop/sorting/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/sorting/runC/runC2Python.sh regression/interop/sorting/runC/runC2Java.sh regression/interop/sorting/runC/runC2F90.sh regression/interop/sorting/runC/runC2F77.sh regression/interop/sorting/runC/runC2F03.sh regression/interop/sorting/runC/runC2Cxx.sh regression/interop/sorting/runC/runC2C.sh : regression/interop/sorting/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runC/client.lock regression/interop/sorting/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runC/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runC/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/sorting/runCxx/runCxx2Python.sh regression/interop/sorting/runCxx/runCxx2Java.sh regression/interop/sorting/runCxx/runCxx2F90.sh regression/interop/sorting/runCxx/runCxx2F77.sh regression/interop/sorting/runCxx/runCxx2F03.sh regression/interop/sorting/runCxx/runCxx2Cxx.sh regression/interop/sorting/runCxx/runCxx2C.sh : regression/interop/sorting/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runCxx/client.lock regression/interop/sorting/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/sorting/runF03/runF032Python.sh regression/interop/sorting/runF03/runF032Java.sh regression/interop/sorting/runF03/runF032F90.sh regression/interop/sorting/runF03/runF032F77.sh regression/interop/sorting/runF03/runF032F03.sh regression/interop/sorting/runF03/runF032Cxx.sh regression/interop/sorting/runF03/runF032C.sh : regression/interop/sorting/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runF03/client.lock regression/interop/sorting/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/sorting/runF77/runF772Python.sh regression/interop/sorting/runF77/runF772Java.sh regression/interop/sorting/runF77/runF772F90.sh regression/interop/sorting/runF77/runF772F77.sh regression/interop/sorting/runF77/runF772F03.sh regression/interop/sorting/runF77/runF772Cxx.sh regression/interop/sorting/runF77/runF772C.sh : regression/interop/sorting/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runF77/client.lock regression/interop/sorting/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/sorting/runF90/runF902Python.sh regression/interop/sorting/runF90/runF902Java.sh regression/interop/sorting/runF90/runF902F90.sh regression/interop/sorting/runF90/runF902F77.sh regression/interop/sorting/runF90/runF902F03.sh regression/interop/sorting/runF90/runF902Cxx.sh regression/interop/sorting/runF90/runF902C.sh : regression/interop/sorting/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runF90/client.lock regression/interop/sorting/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/sorting/runJava/runJava2Python.sh regression/interop/sorting/runJava/runJava2Java.sh regression/interop/sorting/runJava/runJava2F90.sh regression/interop/sorting/runJava/runJava2F77.sh regression/interop/sorting/runJava/runJava2F03.sh regression/interop/sorting/runJava/runJava2Cxx.sh regression/interop/sorting/runJava/runJava2C.sh : regression/interop/sorting/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runJava/client.lock regression/interop/sorting/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/sorting/runPython/runPython2Python.sh regression/interop/sorting/runPython/runPython2Java.sh regression/interop/sorting/runPython/runPython2F90.sh regression/interop/sorting/runPython/runPython2F77.sh regression/interop/sorting/runPython/runPython2F03.sh regression/interop/sorting/runPython/runPython2Cxx.sh regression/interop/sorting/runPython/runPython2C.sh : regression/interop/sorting/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runPython/client.lock regression/interop/sorting/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/sorting/libPython/libimpl2.la regression/interop/sorting/libJava/libimpl.la regression/interop/sorting/libF90/libimpl.la regression/interop/sorting/libF77/libimpl.la regression/interop/sorting/libF03/libimpl.la regression/interop/sorting/libCxx/libimpl.la regression/interop/sorting/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/sorting/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/sorting/runSIDL/client.lock regression/interop/sorting/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/sorting/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/sorting/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/sorting/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/sorting/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/sorting/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/sorting/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/sorting/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# strings
# ------------------

# client: runChapel
regression/interop/strings/runChapel/runChapel2Python.sh regression/interop/strings/runChapel/runChapel2Java.sh regression/interop/strings/runChapel/runChapel2F90.sh regression/interop/strings/runChapel/runChapel2F77.sh regression/interop/strings/runChapel/runChapel2F03.sh regression/interop/strings/runChapel/runChapel2Cxx.sh regression/interop/strings/runChapel/runChapel2C.sh : regression/interop/strings/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runChapel/client.lock regression/interop/strings/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/strings/runUPC/runUPC2Python.sh regression/interop/strings/runUPC/runUPC2Java.sh regression/interop/strings/runUPC/runUPC2F90.sh regression/interop/strings/runUPC/runUPC2F77.sh regression/interop/strings/runUPC/runUPC2F03.sh regression/interop/strings/runUPC/runUPC2Cxx.sh regression/interop/strings/runUPC/runUPC2C.sh : regression/interop/strings/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runUPC/client.lock regression/interop/strings/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/strings/runC/runC2Python.sh regression/interop/strings/runC/runC2Java.sh regression/interop/strings/runC/runC2F90.sh regression/interop/strings/runC/runC2F77.sh regression/interop/strings/runC/runC2F03.sh regression/interop/strings/runC/runC2Cxx.sh regression/interop/strings/runC/runC2C.sh : regression/interop/strings/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runC/client.lock regression/interop/strings/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runC/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runC/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/strings/runCxx/runCxx2Python.sh regression/interop/strings/runCxx/runCxx2Java.sh regression/interop/strings/runCxx/runCxx2F90.sh regression/interop/strings/runCxx/runCxx2F77.sh regression/interop/strings/runCxx/runCxx2F03.sh regression/interop/strings/runCxx/runCxx2Cxx.sh regression/interop/strings/runCxx/runCxx2C.sh : regression/interop/strings/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runCxx/client.lock regression/interop/strings/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/strings/runF03/runF032Python.sh regression/interop/strings/runF03/runF032Java.sh regression/interop/strings/runF03/runF032F90.sh regression/interop/strings/runF03/runF032F77.sh regression/interop/strings/runF03/runF032F03.sh regression/interop/strings/runF03/runF032Cxx.sh regression/interop/strings/runF03/runF032C.sh : regression/interop/strings/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runF03/client.lock regression/interop/strings/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/strings/runF77/runF772Python.sh regression/interop/strings/runF77/runF772Java.sh regression/interop/strings/runF77/runF772F90.sh regression/interop/strings/runF77/runF772F77.sh regression/interop/strings/runF77/runF772F03.sh regression/interop/strings/runF77/runF772Cxx.sh regression/interop/strings/runF77/runF772C.sh : regression/interop/strings/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runF77/client.lock regression/interop/strings/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/strings/runF90/runF902Python.sh regression/interop/strings/runF90/runF902Java.sh regression/interop/strings/runF90/runF902F90.sh regression/interop/strings/runF90/runF902F77.sh regression/interop/strings/runF90/runF902F03.sh regression/interop/strings/runF90/runF902Cxx.sh regression/interop/strings/runF90/runF902C.sh : regression/interop/strings/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runF90/client.lock regression/interop/strings/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/strings/runJava/runJava2Python.sh regression/interop/strings/runJava/runJava2Java.sh regression/interop/strings/runJava/runJava2F90.sh regression/interop/strings/runJava/runJava2F77.sh regression/interop/strings/runJava/runJava2F03.sh regression/interop/strings/runJava/runJava2Cxx.sh regression/interop/strings/runJava/runJava2C.sh : regression/interop/strings/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runJava/client.lock regression/interop/strings/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/strings/runPython/runPython2Python.sh regression/interop/strings/runPython/runPython2Java.sh regression/interop/strings/runPython/runPython2F90.sh regression/interop/strings/runPython/runPython2F77.sh regression/interop/strings/runPython/runPython2F03.sh regression/interop/strings/runPython/runPython2Cxx.sh regression/interop/strings/runPython/runPython2C.sh : regression/interop/strings/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runPython/client.lock regression/interop/strings/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/strings/libPython/libimpl2.la regression/interop/strings/libJava/libimpl.la regression/interop/strings/libF90/libimpl.la regression/interop/strings/libF77/libimpl.la regression/interop/strings/libF03/libimpl.la regression/interop/strings/libCxx/libimpl.la regression/interop/strings/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/strings/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/strings/runSIDL/client.lock regression/interop/strings/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/strings/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/strings/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/strings/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/strings/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/strings/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/strings/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/strings/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# struct
# ------------------

# client: runChapel
regression/interop/struct/runChapel/runChapel2Python.sh regression/interop/struct/runChapel/runChapel2Java.sh regression/interop/struct/runChapel/runChapel2F90.sh regression/interop/struct/runChapel/runChapel2F77.sh regression/interop/struct/runChapel/runChapel2F03.sh regression/interop/struct/runChapel/runChapel2Cxx.sh regression/interop/struct/runChapel/runChapel2C.sh : regression/interop/struct/runChapel/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runChapel/client.lock regression/interop/struct/runChapel/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runChapel/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runChapel/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runChapel/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runChapel/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runChapel/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runChapel/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runChapel/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runUPC
regression/interop/struct/runUPC/runUPC2Python.sh regression/interop/struct/runUPC/runUPC2Java.sh regression/interop/struct/runUPC/runUPC2F90.sh regression/interop/struct/runUPC/runUPC2F77.sh regression/interop/struct/runUPC/runUPC2F03.sh regression/interop/struct/runUPC/runUPC2Cxx.sh regression/interop/struct/runUPC/runUPC2C.sh : regression/interop/struct/runUPC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runUPC/client.lock regression/interop/struct/runUPC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runUPC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runUPC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runUPC/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runUPC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runUPC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runUPC/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runUPC/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runC
regression/interop/struct/runC/runC2Python.sh regression/interop/struct/runC/runC2Java.sh regression/interop/struct/runC/runC2F90.sh regression/interop/struct/runC/runC2F77.sh regression/interop/struct/runC/runC2F03.sh regression/interop/struct/runC/runC2Cxx.sh regression/interop/struct/runC/runC2C.sh : regression/interop/struct/runC/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runC/client.lock regression/interop/struct/runC/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runC/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runC/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runC/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runC/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runC/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runC/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runC/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runCxx
regression/interop/struct/runCxx/runCxx2Python.sh regression/interop/struct/runCxx/runCxx2Java.sh regression/interop/struct/runCxx/runCxx2F90.sh regression/interop/struct/runCxx/runCxx2F77.sh regression/interop/struct/runCxx/runCxx2F03.sh regression/interop/struct/runCxx/runCxx2Cxx.sh regression/interop/struct/runCxx/runCxx2C.sh : regression/interop/struct/runCxx/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runCxx/client.lock regression/interop/struct/runCxx/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runCxx/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runCxx/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runCxx/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runCxx/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runCxx/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runCxx/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runCxx/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF03
regression/interop/struct/runF03/runF032Python.sh regression/interop/struct/runF03/runF032Java.sh regression/interop/struct/runF03/runF032F90.sh regression/interop/struct/runF03/runF032F77.sh regression/interop/struct/runF03/runF032F03.sh regression/interop/struct/runF03/runF032Cxx.sh regression/interop/struct/runF03/runF032C.sh : regression/interop/struct/runF03/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runF03/client.lock regression/interop/struct/runF03/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runF03/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runF03/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runF03/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runF03/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runF03/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runF03/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runF03/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF77
regression/interop/struct/runF77/runF772Python.sh regression/interop/struct/runF77/runF772Java.sh regression/interop/struct/runF77/runF772F90.sh regression/interop/struct/runF77/runF772F77.sh regression/interop/struct/runF77/runF772F03.sh regression/interop/struct/runF77/runF772Cxx.sh regression/interop/struct/runF77/runF772C.sh : regression/interop/struct/runF77/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runF77/client.lock regression/interop/struct/runF77/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runF77/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runF77/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runF77/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runF77/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runF77/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runF77/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runF77/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runF90
regression/interop/struct/runF90/runF902Python.sh regression/interop/struct/runF90/runF902Java.sh regression/interop/struct/runF90/runF902F90.sh regression/interop/struct/runF90/runF902F77.sh regression/interop/struct/runF90/runF902F03.sh regression/interop/struct/runF90/runF902Cxx.sh regression/interop/struct/runF90/runF902C.sh : regression/interop/struct/runF90/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runF90/client.lock regression/interop/struct/runF90/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runF90/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runF90/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runF90/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runF90/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runF90/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runF90/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runF90/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runJava
regression/interop/struct/runJava/runJava2Python.sh regression/interop/struct/runJava/runJava2Java.sh regression/interop/struct/runJava/runJava2F90.sh regression/interop/struct/runJava/runJava2F77.sh regression/interop/struct/runJava/runJava2F03.sh regression/interop/struct/runJava/runJava2Cxx.sh regression/interop/struct/runJava/runJava2C.sh : regression/interop/struct/runJava/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runJava/client.lock regression/interop/struct/runJava/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runJava/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runJava/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runJava/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runJava/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runJava/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runJava/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runJava/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runPython
regression/interop/struct/runPython/runPython2Python.sh regression/interop/struct/runPython/runPython2Java.sh regression/interop/struct/runPython/runPython2F90.sh regression/interop/struct/runPython/runPython2F77.sh regression/interop/struct/runPython/runPython2F03.sh regression/interop/struct/runPython/runPython2Cxx.sh regression/interop/struct/runPython/runPython2C.sh : regression/interop/struct/runPython/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runPython/client.lock regression/interop/struct/runPython/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runPython/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runPython/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runPython/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runPython/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runPython/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runPython/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runPython/client-stamp: $(CLIENT_DEPS) regression/interop/struct/libPython/libimpl2.la regression/interop/struct/libJava/libimpl.la regression/interop/struct/libF90/libimpl.la regression/interop/struct/libF77/libimpl.la regression/interop/struct/libF03/libimpl.la regression/interop/struct/libCxx/libimpl.la regression/interop/struct/libC/libimpl.la 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)

# client: runSIDL
: regression/interop/struct/runSIDL/client-stamp
## cf. http://www.gnu.org/software/automake/manual/automake.html#Multiple-Outputs
## Recover from the removal of $@
	@if test -f $@; then :; else \
	  trap 'rm -rf regression/interop/struct/runSIDL/client.lock regression/interop/struct/runSIDL/client-stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
	  if mkdir regression/interop/struct/runSIDL/client.lock 2>/dev/null; then \
## This code is being executed by the first process.
	    rm -f regression/interop/struct/runSIDL/client-stamp; \
	    $(MAKE) $(AM_MAKEFLAGS) regression/interop/struct/runSIDL/client-stamp; \
	    result=$$?; rm -rf regression/interop/struct/runSIDL/client.lock; exit $$result; \
	  else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
	    while test -d regression/interop/struct/runSIDL/client.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
	    test -f regression/interop/struct/runSIDL/client-stamp; \
	  fi; \
	fi

regression/interop/struct/runSIDL/client-stamp: $(CLIENT_DEPS) 
	@sh $< $@ $(MAKE) $(MAKEFLAGS)


# wrapper
# ------------------

INTEROP_TESTS = 
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2Chapel.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_CHPL
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2Chapel.sh
endif
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/args/runUPC/runUPC2Python.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runC/runC2Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runC/runC2C.sh
INTEROP_TESTS += regression/interop/args/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/args/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/args/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/args/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/args/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/args/runC/runC2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/args/runCxx/runCxx2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runF03/runF032Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/args/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/args/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/args/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/args/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/args/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/args/runF03/runF032Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runF77/runF772Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/args/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/args/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/args/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/args/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/args/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/args/runF77/runF772Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runF90/runF902Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/args/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/args/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/args/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/args/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/args/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/args/runF90/runF902Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runJava/runJava2Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/args/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/args/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/args/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/args/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/args/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/args/runJava/runJava2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/args/runPython/runPython2Chapel.sh
endif
INTEROP_TESTS += regression/interop/args/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/args/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/args/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/args/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/args/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/args/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/args/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/arrays/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/arrays/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/arrays/runC/runC2C.sh
INTEROP_TESTS += regression/interop/arrays/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/arrays/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/arrays/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/arrays/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/arrays/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/arrays/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/arrays/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/arrays/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/arrays/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/arrays/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/arrays/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2Chapel.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_CHPL
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2Chapel.sh
endif
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/contracts/runUPC/runUPC2Python.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runC/runC2Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runC/runC2C.sh
INTEROP_TESTS += regression/interop/contracts/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/contracts/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/contracts/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/contracts/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/contracts/runC/runC2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/contracts/runCxx/runCxx2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runF03/runF032Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/contracts/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/contracts/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/contracts/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/contracts/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/contracts/runF03/runF032Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runF77/runF772Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/contracts/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/contracts/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/contracts/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/contracts/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/contracts/runF77/runF772Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runF90/runF902Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/contracts/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/contracts/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/contracts/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/contracts/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/contracts/runF90/runF902Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/contracts/runJava/runJava2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2Chapel.sh
endif
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/contracts/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/enums/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/enums/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/enums/runC/runC2C.sh
INTEROP_TESTS += regression/interop/enums/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/enums/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/enums/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/enums/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/enums/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/enums/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/enums/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/enums/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/enums/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/enums/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/enums/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/enums/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/exceptions/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/exceptions/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/exceptions/runC/runC2C.sh
INTEROP_TESTS += regression/interop/exceptions/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/exceptions/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/exceptions/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/exceptions/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/exceptions/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/exceptions/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/exceptions/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/exceptions/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/exceptions/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/exceptions/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/exceptions/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/hooks/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/hooks/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/hooks/runC/runC2C.sh
INTEROP_TESTS += regression/interop/hooks/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/hooks/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/hooks/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/hooks/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/hooks/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/hooks/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/hooks/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/hooks/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/hooks/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/hooks/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/hooks/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/inherit/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/inherit/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/inherit/runC/runC2C.sh
INTEROP_TESTS += regression/interop/inherit/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/inherit/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/inherit/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/inherit/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/inherit/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/inherit/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/inherit/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/inherit/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/inherit/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/inherit/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/inherit/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/objarg/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/objarg/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/objarg/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/objarg/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/objarg/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/objarg/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/objarg/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/objarg/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/objarg/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/objarg/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/objarg/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/objarg/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/objarg/runC/runC2C.sh
INTEROP_TESTS += regression/interop/objarg/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/objarg/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/objarg/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/objarg/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/objarg/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/objarg/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/objarg/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/objarg/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/objarg/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/objarg/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/objarg/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/objarg/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/objarg/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/objarg/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/objarg/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/objarg/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/objarg/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/objarg/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/objarg/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/objarg/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/objarg/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/objarg/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/objarg/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/objarg/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/objarg/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/objarg/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/objarg/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/objarg/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/objarg/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/ordering/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/ordering/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/ordering/runC/runC2C.sh
INTEROP_TESTS += regression/interop/ordering/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/ordering/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/ordering/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/ordering/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/ordering/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/ordering/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/ordering/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/ordering/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/ordering/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/overload/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/overload/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/overload/runC/runC2C.sh
INTEROP_TESTS += regression/interop/overload/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/overload/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/overload/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/overload/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/overload/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/overload/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/overload/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/overload/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/overload/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/overload/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/overload/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/overload/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/sorting/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/sorting/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/sorting/runC/runC2C.sh
INTEROP_TESTS += regression/interop/sorting/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/sorting/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/sorting/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/sorting/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/sorting/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/sorting/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/sorting/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/sorting/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/sorting/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/sorting/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/sorting/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/strings/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/strings/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/strings/runC/runC2C.sh
INTEROP_TESTS += regression/interop/strings/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/strings/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/strings/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/strings/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/strings/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/strings/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/strings/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/strings/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/strings/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/strings/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/strings/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/strings/runPython/runPython2Python.sh
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2C.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2Cxx.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2F03.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2F77.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2F90.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2Java.sh
endif
if BABEL_LANG_CHPL
INTEROP_TESTS += regression/interop/struct/runChapel/runChapel2Python.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2C.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2Cxx.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2F03.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2F77.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2F90.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2Java.sh
endif
if BABEL_LANG_UPC
INTEROP_TESTS += regression/interop/struct/runUPC/runUPC2Python.sh
endif
INTEROP_TESTS += regression/interop/struct/runC/runC2C.sh
INTEROP_TESTS += regression/interop/struct/runC/runC2Cxx.sh
INTEROP_TESTS += regression/interop/struct/runC/runC2F03.sh
INTEROP_TESTS += regression/interop/struct/runC/runC2F77.sh
INTEROP_TESTS += regression/interop/struct/runC/runC2F90.sh
INTEROP_TESTS += regression/interop/struct/runC/runC2Java.sh
INTEROP_TESTS += regression/interop/struct/runC/runC2Python.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2C.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2Cxx.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2F03.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2F77.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2F90.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2Java.sh
INTEROP_TESTS += regression/interop/struct/runCxx/runCxx2Python.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032C.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032Cxx.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032F03.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032F77.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032F90.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032Java.sh
INTEROP_TESTS += regression/interop/struct/runF03/runF032Python.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772C.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772Cxx.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772F03.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772F77.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772F90.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772Java.sh
INTEROP_TESTS += regression/interop/struct/runF77/runF772Python.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902C.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902Cxx.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902F03.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902F77.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902F90.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902Java.sh
INTEROP_TESTS += regression/interop/struct/runF90/runF902Python.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2C.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2Cxx.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2F03.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2F77.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2F90.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2Java.sh
INTEROP_TESTS += regression/interop/struct/runJava/runJava2Python.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2C.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2Cxx.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2F03.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2F77.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2F90.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2Java.sh
INTEROP_TESTS += regression/interop/struct/runPython/runPython2Python.sh

# Total:  795
