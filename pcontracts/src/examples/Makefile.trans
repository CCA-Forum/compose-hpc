#
# Name:      src/examples/Makefile.trans
#
# Purpose:
# This is the top-most PAUL Contracts source subdirectory makefile.
# It is used to manage the build, basic build checking, and cleanup
# of the source files.
#
# Dependencies:
# Refer to the ../../setup.sh script for the required environment variables.


include $(PCONTRACTS_HOME)/src/make_test.inc


# NOTE: The following values are automatically replaced by the examples 
# Makefile.
TEST_DRIVER_DIR=REPLACEDIR
TEST_DRIVER=$(BIN_DIR)/REPLACEEXE

ORACLE_DIR=$(BASE_ORACLE_DIR)/$(TEST_DRIVER_DIR)
CHECK_EX_STATUS=$(PCONTRACTS_HOME)/$(CHECK_STATUS)-$(TEST_DRIVER_DIR)
BUILD_EX_STATUS=$(PCONTRACTS_HOME)/$(BUILD_STATUS)-$(TEST_DRIVER_DIR)

#
# Be sure to call this with 'make PCEFLAGS=-DPAUL_CONTRACTS' to enable 
# contract checking.
FLAGS=$(BASE_FLAGS) $(PCEFLAGS)
INCLUDES=$(BASE_INCLUDES)

CXXFLAGS = $(INCLUDES) $(FLAGS) $(BASE_CXXFLAGS)

LDFLAGS = -L$(LIB_DIR) -l$(RUNTIME_LIB_BASE)


CSRCS = hello.c knapsack.c simple.c unlabeledknapsack.c 
CCSRCS = helloworld.cc helloworld-v2.cc helloworld-v3.cc
CPPSRCS = Knapsack-v2.cpp SimpleClass.cpp UnlabeledKnapsack-v2.cpp \
	WeightsList.cpp WeightsList2.cpp

SRCS=$(CSRCS) $(CCSRCS) $(CPPSRCS)
HDRS=$(CSRCS:.h=.o) $(CCSRCS:.hh=.o) $(CPPSRCS:.hpp=.o)
OBJS=$(CSRCS:.c=.o) $(CCSRCS:.cc=.o) $(CPPSRCS:.cpp=.o)
EXES=$(CSRCS:.c=) $(CCSRCS:.cc=) $(CPPSRCS:.cpp=)

H_EXE=hello
HWCC_EXE=helloworld
HWCC2_EXE=helloworld-v2
HWCC3_EXE=helloworld-v3
LKC_EXE=knapsack
UKC_EXE=unlabeledknapsack
LKCPP_EXE=Knapsack-v2
UKCPP_EXE=UnlabeledKnapsack-v2
S_EXE=simple
SC_EXE=SimpleClass
WLCPP_EXE=WeightsList
WLCPP2_EXE=WeightsList2


.PHONY:  buildsummary check checkall checkBasics checkBasicsCore \
	checksummary; checkbuild checkclean checksetup checkKC checkKCpp \
	checkKnapsack checkUK clean cleanall cleanexe

all:	$(EXES) $(OBJS) $(HDRS) $(SRCS)
	$(MAKE) buildsummary

.c.o:
	$(CXX) $(CXXFLAGS) -c -o $@ $< || echo 0 > $(BUILD_EX_STATUS)

.cc.o:
	$(CXX) $(CXXFLAGS) -c -o $@ $< || echo 0 > $(BUILD_EX_STATUS)

.cpp.o:
	$(CXX) $(CXXFLAGS) -c -o $@ $< || echo 0 > $(BUILD_EX_STATUS)

$(H_EXE): $(H_EXE).c $(H_EXE).o 
	$(CXX) -o $(H_EXE) $(FLAGS) $(H_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(HWCC_EXE): $(HWCC_EXE).cc $(HWCC_EXE).o 
	$(CXX) -o $(HWCC_EXE) $(FLAGS) $(HWCC_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(HWCC2_EXE): $(HWCC2_EXE).cc $(HWCC2_EXE).o 
	$(CXX) -o $(HWCC2_EXE) $(FLAGS) $(HWCC2_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(HWCC3_EXE): $(HWCC3_EXE).cc $(HWCC3_EXE).o 
	$(CXX) -o $(HWCC3_EXE) $(FLAGS) $(HWCC3_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(LKC_EXE): $(LKC_EXE).c $(LKC_EXE).o 
	$(CXX) -o $(LKC_EXE) $(FLAGS) $(LKC_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(UKC_EXE): $(UKC_EXE).c $(UKC_EXE).o 
	$(CXX) -o $(UKC_EXE) $(FLAGS) $(UKC_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(LKCPP_EXE): $(LKCPP_EXE).cpp $(LKCPP_EXE).o 
	$(CXX) -o $(LKCPP_EXE) $(FLAGS) $(LKCPP_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(UKCPP_EXE): $(UKCPP_EXE).cpp $(UKCPP_EXE).o 
	$(CXX) -o $(UKCPP_EXE) $(FLAGS) $(UKCPP_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(S_EXE): $(S_EXE).c $(S_EXE).o 
	$(CXX) -o $(S_EXE) $(FLAGS) $(S_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(SC_EXE): $(SC_EXE).cpp $(SC_EXE).o 
	$(CXX) -o $(SC_EXE) $(FLAGS) $(SC_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(WLCPP_EXE): $(WLCPP_EXE).cpp $(WLCPP_EXE).o 
	$(CXX) -o $(WLCPP_EXE) $(FLAGS) $(WLCPP_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

$(WLCPP2_EXE): $(WLCPP2_EXE).cpp $(WLCPP2_EXE).o 
	$(CXX) -o $(WLCPP2_EXE) $(FLAGS) $(WLCPP2_EXE).o $(LDFLAGS) \
	  || echo 0 > $(BUILD_EX_STATUS)

buildsummary:
	@echo; \
	if [ -f $(BUILD_EX_STATUS) ]; then \
	  res=`cat $(BUILD_EX_STATUS)`; \
	else \
	  res="-1"; \
	  echo; echo "*******"; \
	  echo "WARNING:  $(BUILD_EX_STATUS) is missing.  "; \
	  echo "*******"; \
	fi; \
	if [ "X$$PCEFLAGS" != "X" ]; then \
	  stat="enabled"; \
	else \
	  stat="disabled"; \
	fi; \
	if [ "$$res" -eq "0" ]; then \
	  echo "$(TEST_DRIVER_DIR) Build: Contracts-$$stat: FAILED"; \
	  echo; echo "Review output to identify failure(s)"; \
	else \
	  echo "$(TEST_DRIVER_DIR) Build: Contracts-$$stat: Okay";\
	fi

check: checkbuild checkBasicsCore checksummary
	@echo 

checkall: checkbuild checkBasicsCore checkContractsCore checksummary
	@echo

checkBasics: check

checkBasicsCore: checkKC checkKCpp checkKnapsack checkUK

checkbuild: checkclean checksetup all

checkContracts:  checkbuild checkContractsCore checksummary

# WARNING:  The following rule assumes Rose's installation of edg 4 is
# responsible for addition namespace lines at the top of generated C++ source 
# files.  Specifically, Rose 0.9.6a (with edg-4.7) adds empty namespaces for
# std # (when not specifying "using namespace std;) and __cxxabiv1.
# This results in contract violations reported with line numbers off by up to 
# 6.  These changes have been reflected in the .edg versions of the oracle
# (or fiducial) output files under the src/tests/data directory.
checkContractsCore: 
	@echo; echo "Checking contract-instrumented versions..."; \
	$(MAKE) PCEFLAGS=-DPAUL_CONTRACTS check || echo 0 > $(CHECK_EX_STATUS);\
	ok=0; \
	n=0; \
	for exe in $(EXES); do \
	  n=`expr $$n + 1`; \
	  echo "..Processing $$exe"; \
	  if [ -f $$exe ]; then \
	    TFN=$$exe.mout; \
	    EDGVS=`${TEST_DRIVER} --version | grep edg | sed 's/[^:]*: edg-//g' | sed 's/\([0-9]*\).\([0-9]*\)\(.*\)/\1/g'`; \
	    EDGV=`expr $$EDGVS`; \
	    if [ "$$EDGV" -gt "3" ]; then \
	      ORFN=$(ORACLE_DIR)/$$TFN.edg4; \
	    else \
	    ORFN=$(ORACLE_DIR)/$$TFN; \
	    fi; \
	    ./$$exe > $$TFN.save; \
	    cat $$TFN.save | grep -v DEBUG > $$TFN; \
	    if [ -s $$TFN ]; then \
	      if [ -f $$ORFN -a -s $$TFN ]; then \
	      diff $$TFN $$ORFN > $$TFN.diffs; \
	      if [ -s $$TFN.diffs ]; then \
	        echo "....*** Different: $$TFN $$ORFN ***"; \
	        cat $$TFN.diffs; \
	        echo "....FAILED on $$exe"; echo; \
	        echo 0 > $(CHECK_EX_STATUS); \
	      else \
	        echo "....Identical:  $$TFN $$ORFN"; \
	        ok=`expr $$ok + 1`; \
	      fi; \
	    else \
	      echo "....*** $$ORFN is missing ***"; \
	      echo 0 > $(CHECK_EX_STATUS); \
	    fi; \
	  else \
	      echo "....*** $$TFN is empty ***"; \
	      echo 0 > $(CHECK_EX_STATUS); \
	    fi; \
	  else \
	    echo "....*** $$exe is missing ***"; \
	    echo 0 > $(CHECK_EX_STATUS); \
	  fi; \
	done; \
	echo "...Successfully processed $$ok of $$n files."

# Do NOT remove $(CHECK_EX_STATUS) as long as the root makefile expects it
checksummary:
	@echo; \
	if [ -f $(CHECK_EX_STATUS) ]; then \
	  res=`cat $(CHECK_EX_STATUS)`; \
	else \
	  res="-1"; \
	  echo; echo "*******"; \
	  echo "WARNING:  $(CHECK_EX_STATUS) is missing.  "; \
	  echo "*******"; \
	fi; \
	if [ "X$$PCEFLAGS" != "X" ]; then \
	  stat="enabled"; \
	else \
	  stat="disabled"; \
	fi; \
	if [ "$$res" -eq "0" ]; then \
	  echo "$(TEST_DRIVER_DIR) Test Suite: Contracts-$$stat: FAILED"; \
	  echo; echo "Review output to identify failure(s)"; \
	else \
	  echo "$(TEST_DRIVER_DIR) Test Suite: Contracts-$$stat: PASSED";\
	fi

checkclean:
	@rm -f *.o *.mout *.mout.save $(EXES)

checksetup:
	@echo 1 > $(CHECK_EX_STATUS)

checkKC: $(LKC_EXE) $(UKC_EXE)
	@echo; echo "Checking C knapsack programs..."; \
	if [ -s $(LKC_EXE) ]; then \
	  if [ -s $(UKC_EXE) ]; then \
	    ./$(LKC_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(LKC_EXE).mout 2>&1; \
	    ./$(UKC_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(UKC_EXE).mout 2>&1; \
	    diff $(LKC_EXE).mout $(UKC_EXE).mout > checkKC.diffs 2>&1; \
	    if [ -s checkKC.diffs ]; then \
	      echo "ERROR: Different C knapsack results"; \
	      echo 0 > $(CHECK_EX_STATUS); \
	    else \
	      echo "SUCCESS: Identical C knapsack results!"; \
	    fi; \
	    rm -f checkKC.diffs; \
	  else \
	    echo "ERROR: Cannot find or empty $(UKC_EXE)"; \
	    echo 0 > $(CHECK_EX_STATUS); \
	  fi; \
	else \
	  echo "ERROR: Cannot find or empty $(LKC_EXE)"; \
	  echo 0 > $(CHECK_EX_STATUS); \
	fi

checkKCpp: $(LKCPP_EXE) $(UKCPP_EXE)
	@echo; echo "Checking C++ knapsack programs..."; \
	if [ -s $(LKCPP_EXE) ]; then \
	  if [ -s $(UKCPP_EXE) ]; then \
	    ./$(LKCPP_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(LKCPP_EXE).mout 2>&1; \
	    ./$(UKCPP_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(UKCPP_EXE).mout 2>&1; \
	    diff $(LKCPP_EXE).mout $(UKCPP_EXE).mout > checkKCpp.diffs 2>&1;\
	    if [ -s checkKCpp.diffs ]; then \
	      if [ "X$$PCEFLAGS" != "X" ]; then \
	        cat $(LKCPP_EXE).mout \
	            | grep pos_target > checkKCpp-pt.mout 2>&1;\
	        if [ -s checkKCpp-pt.mout ]; then \
	          echo "SUCCESS: Different C++ knapsack results due to";\
	          echo "  known C++ precondition violation (label)."; \
	        else \
	          echo "ERROR: Different C++ knapsack results"; \
	          echo 0 > $(CHECK_EX_STATUS); \
	        fi; \
	        rm -f checkKCpp-pt.mout; \
	      else \
	        echo "ERROR: Different C++ knapsack results"; \
	        echo 0 > $(CHECK_EX_STATUS); \
	      fi; \
	    else \
	      echo "SUCCESS: Identical C++ knapsack results!"; \
	    fi; \
	    rm -f checkKCpp.diffs; \
	  else \
	    echo "ERROR: Cannot find or empty $(UKCPP_EXE)"; \
	    echo 0 > $(CHECK_EX_STATUS); \
	  fi; \
	else \
	  echo "ERROR: Cannot find or empty $(LKCPP_EXE)"; \
	  echo 0 > $(CHECK_EX_STATUS); \
	fi

checkKnapsack: $(LKC_EXE) $(LKCPP_EXE)
	@echo; \
	TYPE=labeled; \
	echo "Checking C and C++ $$TYPE knapsack programs..."; \
	if [ -s $(LKCPP_EXE) ]; then \
	  if [ -s $(LKC_EXE) ]; then \
	    ./$(LKCPP_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(LKCPP_EXE).mout 2>&1; \
	    ./$(LKC_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(LKC_EXE).mout 2>&1; \
	    diff $(LKCPP_EXE).mout $(LKC_EXE).mout > checkKnapsack.diffs 2>&1; \
	    if [ -s checkKnapsack.diffs ]; then \
	      if [ "X$$PCEFLAGS" != "X" ]; then \
	        cat $(LKCPP_EXE).mout \
	           | grep pos_target > checkKnapsack-pt.mout 2>&1; \
	        if [ -s checkKnapsack-pt.mout ]; then \
	          echo "SUCCESS: Different C and C++ $$TYPE knapsack results";\
	          echo "  due to known C++ precondition violation (label)."; \
	        else \
	          echo "ERROR: Different C and C++ $$TYPE knapsack results"; \
	          echo 0 > $(CHECK_EX_STATUS); \
	        fi; \
	        rm -f checkKnapsack-pt.mout; \
	      else \
	        echo "ERROR: Different C and C++ $$TYPE knapsack results"; \
	        echo 0 > $(CHECK_EX_STATUS); \
	      fi; \
	    else \
	      echo "SUCCESS: Identical C and C++ $$TYPE knapsack results!"; \
	    fi; \
	    rm -f checkKnapsack.diffs; \
	  else \
	    echo "ERROR: Cannot find or empty $(LKC_EXE)"; \
	    echo 0 > $(CHECK_EX_STATUS); \
	  fi; \
	else \
	  echo "ERROR: Cannot find or empty $(LKCPP_EXE)"; \
	  echo 0 > $(CHECK_EX_STATUS); \
	fi

checkUK: $(UKC_EXE) $(UKCPP_EXE)
	@echo; \
	TYPE=unlabeled; \
	echo "Checking C and C++ $$TYPE knapsack programs..."; \
	if [ -s $(UKCPP_EXE) ]; then \
	  if [ -s $(UKC_EXE) ]; then \
	    ./$(UKCPP_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(UKCPP_EXE).mout 2>&1; \
	    ./$(UKC_EXE) | grep -v DEBUG | tr "\n\r\f\v" " " \
	        | sed 's/ [ ]*/ /g' > $(UKC_EXE).mout 2>&1; \
	    diff $(UKCPP_EXE).mout $(UKC_EXE).mout > checkUK.diffs 2>&1; \
	    if [ -s checkUK.diffs ]; then \
	      if [ "X$$PCEFLAGS" != "X" ]; then \
	        cat $(UKCPP_EXE).mout | grep Violation > checkUK-pt.mout 2>&1; \
	        if [ -s checkUK-pt.mout ]; then \
	          echo "SUCCESS: Different C and C++ $$TYPE knapsack";\
	          echo "  results due to known C++ precondition violation."; \
	        else \
	          echo "ERROR: Different C and C++ $$TYPE knapsack results";\
	          echo 0 > $(CHECK_EX_STATUS); \
	        fi; \
	        rm -f checkUK-pt.mout; \
	      else \
	        echo "ERROR: Different C and C++ $$TYPE knapsack results"; \
	        echo 0 > $(CHECK_EX_STATUS); \
	      fi; \
	    else \
	      echo "SUCCESS: Identical C and C++ $$TYPE knapsack results!"; \
	    fi; \
	    rm -f checkUK.diffs; \
	  else \
	    echo "ERROR: Cannot find or empty $(UKC_EXE)"; \
	    echo 0 > $(CHECK_EX_STATUS); \
	  fi; \
	else \
	  echo "ERROR: Cannot find or empty $(UKCPP_EXE)"; \
	  echo 0 > $(CHECK_EX_STATUS); \
	fi

clean:
	rm -f *.o *.mout *.out *.diffs *.stats *.trace 

cleanall: clean cleanexe

cleanexe:
	rm -f *.o $(EXES)
