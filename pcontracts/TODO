Tasks

*** Preliminaries:

- Stand-alone enforcement library 
  TBD:  Should Babel/SIDL tracing be supported?

  -- Resume work on:
     o testContractsEnforcer.c
       Need routines that use the following -- whether associated
       with contract clauses or not:
         ContractsEnforcer_dumpStatistics(enforcer, msg)
         ContractsEnforcer_logTrace(enforcer, times, name, msg)
         ContractsEnforcer_enforceClause(enforcer, clause, clauseTime, 
                                         routineTime, firstForCall)
     o create build for testContractsEnforcer.c
     o Iterate on ContractsEnforcer.h & .c as needed

- Continue preliminary identification of relevant libpaul features
  -- Resume work on:
     o CommentVisitor
       A preferred version would be for CommentVisitor (or PaulConfReader?) 
       to support the addition of <parser-name, comment handler function>
       pairings.  Then handle_comment() could retrieve and call the comment
       handler function.
     o PaulContractsDecorator

- Potentially relevant ROSE tutorial codes:
  (Refer to docs and code in tutorial source subdirectory.)
  -- instrumentEndOfFunction.C  (pattern for adding invariant checks at end?)
  -- tauInstrumenter.C  (source review does not clarify instrumentation site(s))
  -- synthesizedAttributeTraversal.C  (pattern for traversing child attrs)
  -- attributeCopyExamples.C  (pattern for inheriting attributes--invariants?)
  -- inherited*AttributeTraversal.C  (pattern for inheriting attrs--invariants?)


*** Refinement:

- Discuss options and trade-offs with D.Q./ROSE team
  -- AST Annotations
    (e.g., function node vs. basic block node vs. pre-/post-pend to bb vs. ?)
  -- contract validations
  -- Enforcement code generation

- Implement new annotations
                      PreconditionsClause
                    /
  ContractClause <|-- PostconditionsClause
                    \
                      InvariantsClause

- Implement new parsers:
                           PreconditionsParser
                         /
  ContractClauseParser <|-- PostconditionsParser
                         \
                           InvariantsParser

- Extend libpaul/PaulDecorate (or revision) with support for new parsers
  and new annotation node support
  -- Depends on tag-parser generalizations and support for multiple 
     annotation attributes per node as proposed at the coding camp


Last Updated:  11 May 2012
