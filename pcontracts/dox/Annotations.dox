/**
\page Annotations

\tableofcontents

\section annotations_intro_sec Annotations

Executable interface contracts and assertions are generally useful in terms 
of documenting expectations and features of software.  They also provide a 
mechanism for verifying the behavior of code and providing sanity checks for 
silent errors to improve code resilience in Exascale environments, for example.

Interface contracts take the form of preconditions, post conditions, and
class invariants.  
Preconditions are obligations on the caller; postconditions are guarantees
of the implementation; and class invariants are assertions expected to hold, 
in general, prior to and after the execution of routines.
In-lined assertions are conditions expected to be true at the given point
in the execution of the code.

This software supports the translation of PAUL-compliant interface contracts 
and in-lined assertions specified in C/C++ into statements for checking the
associated assertions.
All interface contract annotations start with \b CONTRACT.
The table below lists supported annotations and indicates where the annotation
may appear relative to the associated method definition, if relevant.

\htmlinclude annotations_table.html

Annotations containing an \em expression-list are referred to as \b contract 
\b clauses.
The \b expression-list is a semi-colon separated list of assertions, each of
which is optionally prefaced by a label followed by a colon.
The label is added to the error message when a contract clause violation is
reported.  
So meaningful labels aid violation isolation.


\section clause_sec Examples

Examples using different sets of annotations can be found on the 
\ref Programs "Programs" page.
Below is an example of a method with precondition and postcondition clauses.

\htmlinclude knapsack.html

The precondition clause annotation -- \b CONTRACT \b REQUIRE -- consists
of two labeled assertions.  
The first assertion states the \b weights argument must not be 0 (or null) and 
the second assertion states \b n must be positive.
The example also contains an unlabeled postcondition clause -- \b CONTRACT 
\b ENSURE -- stating that the result of the call, identified by \b pce_result, 
is expected to be in the range of 0 and 1 (assuming the preconditions were 
satisfied on entry).
While one could argue that the first precondition assertion is inappropriate
from a defensive programming standpoint, the main point here is to illustrate
the syntax of a clause.

\section init_sec Enforcement Initialization

The \b CONTRACT \b INIT annotation, which indicates where contract enforcement
initialization needs to occur in the program, supports the optional 
specification of a configuration file.  
In other words, it can take the form:

<pre>
/* %CONTRACT INIT */
</pre>

if there is no configuration file to be used to drive enforcement, therefore
resulting in all clause checks being enforced, or 

<pre>
/* %CONTRACT INIT helloworld.config; */
</pre>

if there is a configuration file (i.e., \em helloworld.config) providing 
information for the desired enforcement strategy.



\htmlinclude copyright.html

*/
